%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Web programming concept.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Aleksandar
%%CreationDate: 12/6/2013
%%BoundingBox: 0 0 709 712
%%HiResBoundingBox: 0 0 708.6622 711.6548
%%CropBox: 0 0 708.6622 711.6548
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2013-12-06T16:48:41+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-12-06T16:48:41+01:00</xmp:ModifyDate>
         <xmp:CreateDate>2013-12-06T16:48:40+01:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAZABkAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAZAAAAAEA&#xA;AQBkAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7blbq3Yq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FURp/+99t/wAZU/4k&#xA;MQyx/UPeh8WLsVdirsVdirsVdirsVdiqC1HWtN0+gupgrkVWMAsx+gfxxAacueGP6ihrPzRot1KI&#xA;km4O2yiQFQT7E7YaLXDWY5GgU2wOU7FXYqx/WvPvlbR2aK6vVe4XZreD964PgeOyn/WIwiJLRk1E&#xA;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&#xA;hCXENn//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:4F4D986B7E5EE31198469AB8D82CD259</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:4F4D986B7E5EE31198469AB8D82CD259</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:4E4D986B7E5EE31198469AB8D82CD259</stRef:instanceID>
            <stRef:documentID>xmp.did:4E4D986B7E5EE31198469AB8D82CD259</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4AF48E22B0DCE111A27FB79E6B754501</stEvt:instanceID>
                  <stEvt:when>2012-08-02T16:41:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4BF48E22B0DCE111A27FB79E6B754501</stEvt:instanceID>
                  <stEvt:when>2012-08-02T17:49:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:856779D2AD57E3119649A890517A13E0</stEvt:instanceID>
                  <stEvt:when>2013-11-27T22:49:42+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4C4D986B7E5EE31198469AB8D82CD259</stEvt:instanceID>
                  <stEvt:when>2013-12-06T15:31:01+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4D4D986B7E5EE31198469AB8D82CD259</stEvt:instanceID>
                  <stEvt:when>2013-12-06T15:40:32+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4E4D986B7E5EE31198469AB8D82CD259</stEvt:instanceID>
                  <stEvt:when>2013-12-06T16:10:11+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4F4D986B7E5EE31198469AB8D82CD259</stEvt:instanceID>
                  <stEvt:when>2013-12-06T16:48:41+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>24.999956</stDim:w>
            <stDim:h>24.999956</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=27 M=0 Y=24 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>27.343798</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>24.218798</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=71 M=5 Y=58 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>70.703102</xmpG:cyan>
                           <xmpG:magenta>5.468798</xmpG:magenta>
                           <xmpG:yellow>57.812500</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=37 M=0 Y=43 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>37.477695</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>42.859196</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=5 M=5 Y=71 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>5.490202</xmpG:cyan>
                           <xmpG:magenta>4.705900</xmpG:magenta>
                           <xmpG:yellow>70.588203</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=58 M=2 Y=29 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>58.039200</xmpG:cyan>
                           <xmpG:magenta>2.352899</xmpG:magenta>
                           <xmpG:yellow>28.627502</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -711.655 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 711.655 li
708.662 711.655 li
708.662 0 li
cp
clp
708.662 708.661 mo
0 708.661 li
0 0 li
708.662 0 li
708.662 708.661 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.273438 0 .242188 0 cmyk
f
234.644 336.66 mo
234.243 336.66 233.845 336.491 233.564 336.162 cv
229.671 331.598 li
229.162 331.003 229.233 330.108 229.829 329.6 cv
230.425 329.092 231.319 329.163 231.827 329.758 cv
234.801 333.244 li
238.287 330.27 li
238.883 329.763 239.777 329.833 240.285 330.428 cv
240.793 331.023 240.723 331.918 240.127 332.426 cv
235.563 336.32 li
235.296 336.548 234.969 336.66 234.644 336.66 cv
cp
0 0 0 0 cmyk
f
233.016 153.313 mo
232.316 153.313 231.707 152.795 231.612 152.083 cv
231.509 151.307 232.054 150.594 232.83 150.491 cv
236.852 149.955 240.962 149.737 245.02 149.831 cv
245.803 149.849 246.422 150.499 246.403 151.281 cv
246.385 152.052 245.754 152.665 244.986 152.665 cv
244.952 152.665 li
241.038 152.571 237.081 152.784 233.204 153.3 cv
233.016 153.313 li
265.175 155.873 mo
265.04 155.873 264.902 155.855 264.767 155.813 cv
261.02 154.69 257.151 153.853 253.269 153.326 cv
252.492 153.221 251.949 152.507 252.055 151.732 cv
252.159 150.956 252.875 150.411 253.649 150.518 cv
257.679 151.064 261.693 151.933 265.581 153.099 cv
266.331 153.323 266.757 154.113 266.531 154.863 cv
266.348 155.477 265.784 155.873 265.175 155.873 cv
213.305 158.705 mo
212.753 158.705 212.229 158.381 212 157.842 cv
211.693 157.121 212.029 156.289 212.749 155.983 cv
216.486 154.394 220.381 153.091 224.326 152.109 cv
225.083 151.92 225.854 152.382 226.044 153.142 cv
226.233 153.902 225.771 154.671 225.011 154.86 cv
221.21 155.806 217.458 157.061 213.858 158.591 cv
213.678 158.668 213.489 158.705 213.305 158.705 cv
283.786 164.319 mo
283.528 164.319 283.268 164.249 283.034 164.102 cv
279.722 162.021 276.215 160.187 272.61 158.651 cv
271.891 158.344 271.556 157.512 271.862 156.792 cv
272.169 156.071 273.003 155.733 273.722 156.043 cv
277.464 157.638 281.103 159.541 284.542 161.702 cv
285.205 162.118 285.404 162.993 284.988 163.656 cv
284.719 164.085 284.258 164.319 283.786 164.319 cv
195.746 169.154 mo
195.328 169.154 194.914 168.97 194.635 168.618 cv
194.148 168.004 194.251 167.113 194.864 166.626 cv
198.055 164.095 201.461 161.801 204.986 159.81 cv
205.669 159.425 206.532 159.666 206.918 160.348 cv
207.303 161.029 207.062 161.894 206.38 162.279 cv
202.983 164.197 199.701 166.407 196.626 168.847 cv
196.365 169.054 196.055 169.154 195.746 169.154 cv
299.478 177.424 mo
299.094 177.424 298.711 177.269 298.432 176.963 cv
295.78 174.065 292.888 171.362 289.836 168.928 cv
289.224 168.44 289.123 167.548 289.611 166.936 cv
290.1 166.325 290.99 166.222 291.604 166.712 cv
294.771 169.237 297.771 172.043 300.523 175.05 cv
301.052 175.627 301.012 176.524 300.434 177.053 cv
300.162 177.301 299.819 177.424 299.478 177.424 cv
181.555 183.869 mo
181.264 183.869 180.97 183.78 180.718 183.594 cv
180.086 183.131 179.95 182.244 180.413 181.613 cv
182.811 178.345 185.494 175.235 188.39 172.369 cv
188.946 171.818 189.843 171.822 190.394 172.379 cv
190.945 172.935 190.94 173.833 190.384 174.383 cv
187.595 177.145 185.009 180.142 182.698 183.29 cv
182.421 183.668 181.991 183.869 181.555 183.869 cv
311.156 194.196 mo
310.642 194.196 310.146 193.915 309.895 193.425 cv
308.112 189.952 306.034 186.585 303.719 183.418 cv
303.257 182.786 303.394 181.899 304.026 181.437 cv
304.657 180.975 305.543 181.113 306.007 181.745 cv
308.41 185.032 310.566 188.526 312.417 192.131 cv
312.773 192.828 312.499 193.682 311.803 194.039 cv
311.596 194.146 311.374 194.196 311.156 194.196 cv
171.793 201.829 mo
171.626 201.829 171.456 201.799 171.29 201.736 cv
170.559 201.458 170.19 200.64 170.468 199.908 cv
171.912 196.105 173.669 192.392 175.689 188.87 cv
176.08 188.191 176.944 187.957 177.624 188.346 cv
178.303 188.736 178.538 189.602 178.148 190.281 cv
176.202 193.673 174.51 197.25 173.118 200.915 cv
172.903 201.48 172.364 201.829 171.793 201.829 cv
317.948 213.469 mo
317.29 213.469 316.7 213.009 316.561 212.339 cv
315.767 208.502 314.663 204.702 313.279 201.045 cv
313.002 200.313 313.371 199.495 314.103 199.218 cv
314.837 198.941 315.652 199.31 315.931 200.041 cv
317.367 203.838 318.514 207.782 319.337 211.765 cv
319.496 212.531 319.003 213.281 318.236 213.439 cv
318.14 213.46 318.043 213.469 317.948 213.469 cv
167.158 221.736 mo
167.022 221.73 li
166.243 221.655 165.671 220.963 165.745 220.184 cv
166.132 216.139 166.84 212.093 167.852 208.159 cv
168.046 207.401 168.815 206.943 169.577 207.14 cv
170.335 207.334 170.791 208.107 170.597 208.865 cv
169.622 212.656 168.939 216.555 168.567 220.454 cv
168.497 221.187 167.88 221.736 167.158 221.736 cv
319.38 233.859 mo
319.288 233.857 li
318.507 233.807 317.914 233.133 317.964 232.352 cv
318.065 230.765 318.116 229.15 318.116 227.553 cv
318.116 225.236 318.008 222.893 317.794 220.587 cv
317.722 219.808 318.295 219.118 319.074 219.045 cv
319.857 218.966 320.545 219.546 320.616 220.326 cv
320.839 222.717 320.951 225.149 320.951 227.553 cv
320.951 229.21 320.897 230.886 320.793 232.532 cv
320.745 233.283 320.121 233.859 319.38 233.859 cv
167.937 242.162 mo
167.262 242.162 166.663 241.676 166.543 240.987 cv
165.848 236.988 165.463 232.899 165.4 228.833 cv
165.388 228.051 166.013 227.407 166.795 227.394 cv
166.817 227.394 li
167.59 227.394 168.223 228.014 168.234 228.79 cv
168.295 232.707 168.666 236.648 169.336 240.502 cv
169.47 241.273 168.953 242.007 168.182 242.141 cv
167.937 242.162 li
315.372 253.904 mo
315.22 253.904 315.065 253.879 314.911 253.827 cv
314.171 253.572 313.777 252.766 314.032 252.025 cv
315.304 248.327 316.293 244.495 316.974 240.634 cv
317.109 239.864 317.841 239.346 318.615 239.484 cv
319.387 239.621 319.901 240.355 319.766 241.126 cv
319.059 245.132 318.032 249.109 316.713 252.947 cv
316.511 253.535 315.961 253.904 315.372 253.904 cv
174.116 261.643 mo
173.585 261.643 173.076 261.344 172.834 260.832 cv
171.096 257.16 169.638 253.32 168.5 249.419 cv
168.28 248.668 168.712 247.881 169.463 247.662 cv
170.214 247.442 171.002 247.874 171.221 248.625 cv
172.317 252.383 173.722 256.081 175.396 259.619 cv
175.73 260.327 175.429 261.172 174.722 261.507 cv
174.525 261.599 174.319 261.643 174.116 261.643 cv
306.187 272.165 mo
305.912 272.165 305.633 272.085 305.388 271.917 cv
304.742 271.474 304.577 270.592 305.021 269.946 cv
307.233 266.719 309.207 263.289 310.885 259.75 cv
311.221 259.042 312.064 258.742 312.772 259.077 cv
313.48 259.412 313.781 260.257 313.446 260.965 cv
311.704 264.638 309.656 268.199 307.358 271.55 cv
307.083 271.95 306.64 272.165 306.187 272.165 cv
185.259 278.775 mo
184.859 278.775 184.461 278.606 184.181 278.278 cv
184.004 278.07 li
181.417 275.039 179.051 271.797 176.97 268.434 cv
176.558 267.768 176.764 266.895 177.43 266.483 cv
178.094 266.07 178.968 266.276 179.38 266.943 cv
181.386 270.184 183.666 273.308 186.159 276.23 cv
186.336 276.437 li
186.845 277.032 186.774 277.927 186.179 278.435 cv
185.912 278.663 185.585 278.775 185.259 278.775 cv
292.471 287.323 mo
292.07 287.323 291.672 287.154 291.392 286.826 cv
290.884 286.23 290.955 285.335 291.55 284.828 cv
291.815 284.601 li
294.721 282.123 297.449 279.414 299.925 276.55 cv
300.437 275.958 301.333 275.893 301.924 276.405 cv
302.517 276.917 302.581 277.812 302.069 278.404 cv
299.5 281.376 296.669 284.186 293.655 286.757 cv
293.39 286.984 li
293.123 287.212 292.796 287.323 292.471 287.323 cv
198.566 294.373 mo
198.166 294.373 197.768 294.204 197.487 293.875 cv
189.7 284.747 li
189.191 284.151 189.263 283.257 189.858 282.749 cv
190.454 282.241 191.348 282.311 191.856 282.907 cv
199.644 292.036 li
200.152 292.631 200.081 293.526 199.485 294.034 cv
199.219 294.262 198.892 294.373 198.566 294.373 cv
276.873 300.631 mo
276.473 300.631 276.074 300.462 275.794 300.133 cv
275.286 299.538 275.356 298.643 275.952 298.135 cv
285.081 290.347 li
285.677 289.839 286.571 289.91 287.079 290.505 cv
287.587 291.101 287.517 291.996 286.921 292.503 cv
277.792 300.291 li
277.525 300.52 277.198 300.631 276.873 300.631 cv
211.874 309.971 mo
211.474 309.971 211.075 309.802 210.795 309.474 cv
203.007 300.345 li
202.499 299.749 202.569 298.855 203.165 298.347 cv
203.761 297.839 204.655 297.91 205.163 298.505 cv
212.951 307.634 li
213.46 308.23 213.389 309.124 212.793 309.632 cv
212.526 309.86 212.199 309.971 211.874 309.971 cv
261.274 313.938 mo
260.874 313.938 260.477 313.77 260.196 313.441 cv
259.688 312.845 259.759 311.951 260.354 311.443 cv
269.482 303.655 li
270.079 303.147 270.973 303.217 271.48 303.813 cv
271.989 304.409 271.918 305.303 271.322 305.811 cv
262.194 313.599 li
261.927 313.827 261.601 313.938 261.274 313.938 cv
225.181 325.569 mo
224.78 325.569 224.383 325.4 224.103 325.071 cv
216.314 315.943 li
215.807 315.347 215.878 314.453 216.473 313.945 cv
217.069 313.437 217.963 313.508 218.471 314.103 cv
226.259 323.231 li
226.767 323.827 226.696 324.722 226.101 325.23 cv
225.833 325.457 225.507 325.569 225.181 325.569 cv
245.677 327.246 mo
245.276 327.246 244.879 327.077 244.599 326.748 cv
244.09 326.153 244.161 325.258 244.757 324.75 cv
253.885 316.962 li
254.48 316.455 255.375 316.526 255.883 317.121 cv
256.392 317.716 256.32 318.611 255.725 319.119 cv
246.597 326.907 li
246.329 327.135 246.003 327.246 245.677 327.246 cv
f
417.433 373.253 mo
417.031 373.253 416.634 373.084 416.354 372.756 cv
412.46 368.192 li
411.952 367.596 412.022 366.702 412.618 366.194 cv
413.213 365.684 414.108 365.757 414.616 366.352 cv
417.59 369.838 li
421.076 366.865 li
421.671 366.356 422.565 366.428 423.074 367.023 cv
423.582 367.619 423.512 368.513 422.916 369.021 cv
418.352 372.915 li
418.085 373.142 417.758 373.253 417.433 373.253 cv
cp
f
411.263 249.693 mo
410.62 249.693 410.038 249.253 409.884 248.601 cv
409.704 247.839 410.176 247.076 410.938 246.896 cv
414.924 245.955 419.026 245.476 423.132 245.47 cv
423.134 245.47 li
423.916 245.47 424.55 246.104 424.551 246.886 cv
424.552 247.669 423.918 248.304 423.136 248.305 cv
419.248 248.31 415.363 248.764 411.589 249.655 cv
411.479 249.681 411.37 249.693 411.263 249.693 cv
cp
443.082 252.249 mo
442.902 252.249 442.719 252.214 442.541 252.141 cv
438.959 250.659 435.196 249.59 431.358 248.965 cv
430.586 248.839 430.062 248.111 430.188 247.338 cv
430.313 246.565 431.047 246.041 431.813 246.167 cv
435.867 246.828 439.841 247.956 443.625 249.521 cv
444.348 249.821 444.692 250.649 444.393 251.373 cv
444.167 251.919 443.639 252.249 443.082 252.249 cv
cp
392.789 258.174 mo
392.351 258.174 391.919 257.972 391.642 257.59 cv
391.182 256.957 391.321 256.07 391.955 255.61 cv
395.279 253.195 398.878 251.169 402.652 249.588 cv
403.382 249.285 404.206 249.627 404.508 250.348 cv
404.81 251.07 404.47 251.9 403.748 252.203 cv
400.175 253.699 396.768 255.617 393.621 257.903 cv
393.37 258.086 393.078 258.174 392.789 258.174 cv
cp
459.971 263.574 mo
459.606 263.574 459.242 263.435 458.965 263.156 cv
456.221 260.393 453.163 257.955 449.877 255.909 cv
449.213 255.495 449.009 254.621 449.423 253.957 cv
449.837 253.292 450.711 253.089 451.375 253.502 cv
454.848 255.664 458.078 258.24 460.977 261.158 cv
461.528 261.713 461.524 262.611 460.97 263.162 cv
460.693 263.437 460.332 263.574 459.971 263.574 cv
cp
378.974 273.099 mo
378.721 273.099 378.466 273.031 378.235 272.89 cv
377.567 272.482 377.357 271.609 377.766 270.941 cv
379.901 267.45 382.451 264.2 385.345 261.281 cv
385.896 260.725 386.794 260.72 387.35 261.271 cv
387.905 261.823 387.909 262.72 387.358 263.276 cv
384.619 266.04 382.205 269.117 380.184 272.421 cv
379.916 272.857 379.45 273.099 378.974 273.099 cv
cp
471.222 280.511 mo
470.663 280.511 470.134 280.179 469.909 279.63 cv
468.441 276.047 466.551 272.625 464.288 269.459 cv
463.833 268.822 463.98 267.937 464.617 267.481 cv
465.255 267.027 466.14 267.175 466.595 267.811 cv
468.984 271.155 470.982 274.77 472.532 278.556 cv
472.829 279.281 472.482 280.108 471.758 280.405 cv
471.582 280.477 471.4 280.511 471.222 280.511 cv
cp
371.988 292.194 mo
371.77 292.177 li
370.996 292.057 370.466 291.333 370.586 290.559 cv
371.215 286.502 372.312 282.52 373.848 278.723 cv
374.141 277.996 374.971 277.648 375.692 277.94 cv
376.418 278.234 376.769 279.06 376.475 279.786 cv
375.021 283.38 373.982 287.151 373.387 290.994 cv
373.278 291.693 372.675 292.194 371.988 292.194 cv
cp
475.072 300.475 mo
475.061 300.475 li
474.277 300.468 473.648 299.828 473.655 299.045 cv
473.656 298.715 li
473.656 294.938 473.231 291.162 472.396 287.492 cv
472.222 286.729 472.699 285.969 473.463 285.795 cv
474.228 285.617 474.986 286.1 475.159 286.862 cv
476.043 290.739 476.49 294.727 476.49 298.715 cv
476.489 299.07 li
476.482 299.848 475.85 300.475 475.072 300.475 cv
cp
372.854 312.51 mo
372.216 312.51 371.636 312.076 371.478 311.429 cv
370.505 307.454 369.993 303.355 369.956 299.247 cv
369.948 298.464 370.577 297.824 371.36 297.816 cv
371.373 297.816 li
372.15 297.816 372.783 298.443 372.79 299.221 cv
372.825 303.111 373.311 306.992 374.231 310.755 cv
374.417 311.516 373.951 312.283 373.191 312.469 cv
373.078 312.497 372.965 312.51 372.854 312.51 cv
cp
470.972 320.393 mo
470.788 320.393 470.601 320.357 470.421 320.281 cv
469.7 319.976 469.362 319.145 469.667 318.424 cv
471.177 314.854 472.274 311.1 472.93 307.265 cv
473.062 306.493 473.8 305.978 474.566 306.107 cv
475.338 306.239 475.856 306.972 475.725 307.743 cv
475.031 311.792 473.872 315.757 472.278 319.527 cv
472.05 320.068 471.524 320.393 470.972 320.393 cv
cp
381.483 330.918 mo
381.049 330.918 380.62 330.719 380.343 330.343 cv
377.9 327.036 375.845 323.453 374.235 319.693 cv
373.927 318.973 374.261 318.14 374.98 317.832 cv
375.701 317.521 376.532 317.858 376.841 318.577 cv
378.365 322.136 380.31 325.528 382.622 328.658 cv
383.088 329.288 382.954 330.175 382.324 330.641 cv
382.071 330.828 381.776 330.918 381.483 330.918 cv
cp
459.515 337.19 mo
459.146 337.19 458.779 337.048 458.501 336.764 cv
457.954 336.204 457.964 335.307 458.523 334.76 cv
461.306 332.039 463.769 329 465.842 325.729 cv
466.261 325.067 467.138 324.873 467.798 325.29 cv
468.459 325.709 468.655 326.585 468.236 327.246 cv
466.046 330.703 463.444 333.913 460.506 336.786 cv
460.229 337.056 459.872 337.19 459.515 337.19 cv
cp
394.668 346.57 mo
394.268 346.57 393.869 346.401 393.589 346.073 cv
385.814 336.96 li
385.307 336.364 385.377 335.47 385.973 334.962 cv
386.567 334.454 387.463 334.525 387.971 335.12 cv
395.745 344.233 li
396.253 344.829 396.183 345.723 395.587 346.231 cv
395.32 346.459 394.993 346.57 394.668 346.57 cv
cp
444.026 350.565 mo
443.626 350.565 443.228 350.396 442.947 350.068 cv
442.439 349.473 442.51 348.578 443.105 348.07 cv
452.218 340.295 li
452.813 339.788 453.708 339.858 454.216 340.453 cv
454.724 341.048 454.653 341.943 454.058 342.451 cv
444.945 350.226 li
444.679 350.454 444.352 350.565 444.026 350.565 cv
cp
407.952 362.141 mo
407.551 362.141 407.153 361.972 406.873 361.644 cv
399.099 352.531 li
398.591 351.935 398.661 351.041 399.257 350.533 cv
399.853 350.023 400.747 350.096 401.255 350.691 cv
409.029 359.804 li
409.537 360.4 409.467 361.294 408.871 361.802 cv
408.604 362.03 408.277 362.141 407.952 362.141 cv
cp
428.455 363.849 mo
428.055 363.849 427.656 363.68 427.376 363.352 cv
426.868 362.756 426.938 361.862 427.534 361.354 cv
436.646 353.58 li
437.242 353.072 438.138 353.142 438.645 353.738 cv
439.152 354.333 439.082 355.228 438.486 355.736 cv
429.374 363.51 li
429.107 363.738 428.78 363.849 428.455 363.849 cv
cp
f
476.528 296.132 mo
477.281 297.015 li
478.164 296.262 li
476.528 296.132 li
cp
477.123 300.431 mo
477.011 300.426 li
476.637 300.396 476.289 300.219 476.045 299.933 cv
472.151 295.369 li
471.779 294.933 471.706 294.315 471.967 293.805 cv
472.228 293.294 472.765 292.997 473.342 293.036 cv
481.8 293.706 li
482.371 293.751 482.858 294.137 483.036 294.682 cv
483.213 295.227 483.044 295.825 482.607 296.197 cv
478.043 300.091 li
477.785 300.311 477.459 300.431 477.123 300.431 cv
cp
f
496.701 128.098 mo
496.473 128.08 li
492.729 127.473 488.91 127.166 485.119 127.166 cv
484.986 127.166 li
484.203 127.166 483.569 126.531 483.569 125.748 cv
483.569 124.965 484.203 124.331 484.986 124.331 cv
485.119 124.331 li
489.061 124.331 493.034 124.651 496.926 125.282 cv
497.698 125.407 498.224 126.135 498.099 126.908 cv
497.985 127.603 497.384 128.098 496.701 128.098 cv
465.151 129.986 mo
464.536 129.986 463.97 129.583 463.791 128.962 cv
463.573 128.21 464.007 127.424 464.759 127.207 cv
468.587 126.101 472.538 125.304 476.503 124.836 cv
477.284 124.749 477.984 125.301 478.076 126.078 cv
478.168 126.856 477.612 127.56 476.835 127.652 cv
473.023 128.101 469.225 128.868 465.546 129.931 cv
465.414 129.968 465.282 129.986 465.151 129.986 cv
515.835 134.023 mo
515.633 134.023 515.427 133.979 515.232 133.888 cv
511.768 132.255 508.139 130.898 504.445 129.851 cv
503.692 129.637 503.255 128.854 503.469 128.1 cv
503.683 127.347 504.469 126.91 505.219 127.123 cv
509.061 128.212 512.836 129.625 516.44 131.323 cv
517.148 131.657 517.452 132.501 517.118 133.21 cv
516.877 133.722 516.367 134.023 515.835 134.023 cv
446.884 138.187 mo
446.413 138.187 445.953 137.953 445.684 137.526 cv
445.267 136.864 445.465 135.988 446.127 135.571 cv
449.504 133.443 453.078 131.58 456.751 130.037 cv
457.474 129.734 458.304 130.074 458.606 130.794 cv
458.91 131.516 458.57 132.347 457.849 132.65 cv
454.319 134.134 450.884 135.923 447.639 137.969 cv
447.404 138.117 447.142 138.187 446.884 138.187 cv
532.582 145.018 mo
532.25 145.018 531.916 144.901 531.646 144.664 cv
528.764 142.128 525.654 139.816 522.405 137.793 cv
521.74 137.379 521.537 136.505 521.951 135.841 cv
522.365 135.175 523.238 134.974 523.903 135.387 cv
527.284 137.492 530.52 139.897 533.52 142.536 cv
534.106 143.053 534.164 143.949 533.647 144.536 cv
533.367 144.854 532.975 145.018 532.582 145.018 cv
431.568 151.112 mo
431.231 151.112 430.893 150.993 430.622 150.75 cv
430.039 150.227 429.99 149.331 430.514 148.749 cv
432.691 146.321 435.063 144.008 437.565 141.873 cv
438.109 141.408 438.659 140.953 439.213 140.508 cv
439.822 140.017 440.716 140.113 441.206 140.723 cv
441.696 141.333 441.6 142.225 440.99 142.716 cv
440.458 143.144 439.93 143.582 439.405 144.029 cv
436.999 146.083 434.717 148.307 432.623 150.641 cv
432.344 150.953 431.956 151.112 431.568 151.112 cv
545.654 160.202 mo
545.188 160.202 544.732 159.972 544.462 159.552 cv
542.751 156.895 540.837 154.322 538.772 151.904 cv
538.34 151.397 537.9 150.897 537.457 150.405 cv
536.932 149.824 536.979 148.928 537.56 148.403 cv
538.142 147.88 539.036 147.925 539.563 148.507 cv
540.023 149.018 540.478 149.537 540.929 150.064 cv
543.075 152.578 545.065 155.254 546.845 158.017 cv
547.269 158.675 547.079 159.552 546.421 159.976 cv
546.184 160.128 545.918 160.202 545.654 160.202 cv
420.409 167.749 mo
420.202 167.749 419.992 167.704 419.794 167.608 cv
419.089 167.268 418.794 166.42 419.134 165.716 cv
420.869 162.123 422.915 158.65 425.216 155.392 cv
425.667 154.752 426.554 154.601 427.191 155.052 cv
427.831 155.503 427.983 156.388 427.532 157.027 cv
425.32 160.158 423.353 163.496 421.687 166.948 cv
421.442 167.455 420.936 167.749 420.409 167.749 cv
554.033 178.392 mo
553.424 178.392 552.86 177.995 552.677 177.381 cv
551.576 173.709 550.163 170.103 548.477 166.66 cv
548.132 165.957 548.423 165.108 549.125 164.764 cv
549.829 164.419 550.678 164.71 551.022 165.413 cv
552.777 168.994 554.247 172.747 555.392 176.567 cv
555.616 177.317 555.19 178.107 554.441 178.332 cv
554.306 178.373 554.168 178.392 554.033 178.392 cv
414.301 186.831 mo
414.059 186.81 li
413.287 186.677 412.769 185.944 412.902 185.172 cv
413.58 181.238 414.585 177.334 415.89 173.57 cv
416.146 172.83 416.956 172.441 417.692 172.695 cv
418.433 172.951 418.824 173.759 418.567 174.498 cv
417.313 178.117 416.348 181.871 415.695 185.654 cv
415.577 186.344 414.977 186.831 414.301 186.831 cv
557.049 198.195 mo
556.273 198.195 555.641 197.571 555.632 196.794 cv
555.588 192.959 555.228 189.101 554.562 185.325 cv
554.425 184.555 554.939 183.819 555.711 183.684 cv
556.479 183.547 557.217 184.062 557.353 184.833 cv
558.046 188.76 558.42 192.773 558.466 196.762 cv
558.475 197.544 557.848 198.186 557.065 198.195 cv
557.049 198.195 li
413.667 206.854 mo
412.953 206.854 412.339 206.315 412.26 205.589 cv
411.977 202.977 411.834 200.316 411.834 197.681 cv
411.833 196.342 411.87 194.973 411.945 193.613 cv
411.988 192.831 412.665 192.239 413.439 192.276 cv
414.22 192.319 414.818 192.987 414.775 193.769 cv
414.703 195.076 414.667 196.392 414.668 197.68 cv
414.668 200.215 414.807 202.773 415.078 205.283 cv
415.162 206.062 414.6 206.761 413.821 206.845 cv
413.667 206.854 li
554.505 218.067 mo
554.381 218.067 554.256 218.051 554.131 218.017 cv
553.376 217.81 552.931 217.032 553.137 216.276 cv
554.145 212.579 554.858 208.769 555.255 204.954 cv
555.337 204.175 556.035 203.609 556.811 203.69 cv
557.59 203.771 558.156 204.468 558.075 205.247 cv
557.662 209.215 556.921 213.177 555.871 217.022 cv
555.699 217.653 555.128 218.067 554.505 218.067 cv
418.58 226.273 mo
418.022 226.273 417.492 225.941 417.268 225.392 cv
415.76 221.705 414.546 217.861 413.66 213.967 cv
413.486 213.204 413.964 212.444 414.728 212.271 cv
415.492 212.095 416.251 212.576 416.424 213.338 cv
417.275 217.081 418.442 220.775 419.891 224.319 cv
420.187 225.044 419.84 225.871 419.115 226.167 cv
418.94 226.239 418.758 226.273 418.58 226.273 cv
546.581 236.468 mo
546.329 236.468 546.075 236.401 545.845 236.261 cv
545.177 235.855 544.965 234.982 545.371 234.313 cv
547.362 231.044 549.099 227.58 550.533 224.018 cv
550.825 223.291 551.651 222.942 552.377 223.232 cv
553.104 223.524 553.455 224.35 553.162 225.076 cv
551.671 228.782 549.864 232.386 547.793 235.788 cv
547.525 236.226 547.059 236.468 546.581 236.468 cv
428.681 243.565 mo
428.262 243.565 427.847 243.38 427.567 243.026 cv
425.089 239.887 422.858 236.531 420.936 233.053 cv
420.557 232.368 420.805 231.506 421.49 231.127 cv
422.173 230.75 423.036 230.997 423.416 231.682 cv
425.265 235.025 427.41 238.251 429.792 241.27 cv
430.277 241.884 430.172 242.775 429.558 243.261 cv
429.298 243.466 428.988 243.565 428.681 243.565 cv
533.868 251.95 mo
533.486 251.95 533.105 251.796 532.825 251.492 cv
532.295 250.916 532.333 250.019 532.908 249.49 cv
535.739 246.886 538.369 244.039 540.724 241.029 cv
541.206 240.412 542.098 240.303 542.713 240.786 cv
543.33 241.268 543.438 242.159 542.956 242.775 cv
540.507 245.907 537.771 248.868 534.828 251.576 cv
534.556 251.826 534.212 251.95 533.868 251.95 cv
441.685 258.891 mo
441.283 258.891 440.886 258.722 440.605 258.393 cv
432.972 249.444 li
432.464 248.849 432.534 247.954 433.13 247.446 cv
433.725 246.937 434.62 247.009 435.128 247.604 cv
442.762 256.554 li
443.27 257.149 443.199 258.044 442.604 258.552 cv
442.337 258.78 442.01 258.891 441.685 258.891 cv
518.612 265.034 mo
518.212 265.034 517.813 264.865 517.533 264.537 cv
517.025 263.941 517.096 263.046 517.691 262.538 cv
526.64 254.904 li
527.235 254.397 528.13 254.467 528.638 255.062 cv
529.145 255.658 529.075 256.552 528.48 257.06 cv
519.531 264.695 li
519.265 264.922 518.938 265.034 518.612 265.034 cv
454.73 274.182 mo
454.33 274.182 453.932 274.013 453.651 273.685 cv
446.017 264.736 li
445.509 264.14 445.579 263.246 446.175 262.738 cv
446.77 262.229 447.665 262.301 448.173 262.896 cv
455.808 271.845 li
456.315 272.44 456.245 273.335 455.649 273.843 cv
455.383 274.071 455.056 274.182 454.73 274.182 cv
503.321 278.08 mo
502.921 278.08 502.523 277.911 502.242 277.583 cv
501.734 276.987 501.805 276.092 502.4 275.585 cv
511.349 267.95 li
511.943 267.443 512.839 267.513 513.347 268.108 cv
513.854 268.704 513.784 269.598 513.188 270.106 cv
504.24 277.741 li
503.974 277.969 503.646 278.08 503.321 278.08 cv
467.775 289.474 mo
467.375 289.474 466.977 289.305 466.696 288.976 cv
459.062 280.027 li
458.554 279.431 458.624 278.537 459.22 278.029 cv
459.815 277.52 460.71 277.592 461.218 278.187 cv
468.852 287.136 li
469.36 287.732 469.29 288.626 468.694 289.134 cv
468.428 289.362 468.101 289.474 467.775 289.474 cv
474.607 292.329 mo
473.881 292.329 473.263 291.775 473.196 291.038 cv
473.127 290.258 473.702 289.57 474.481 289.5 cv
486.198 288.45 li
486.513 288.419 486.823 288.501 487.076 288.659 cv
487.109 288.63 li
496.059 280.996 li
496.654 280.487 497.549 280.559 498.057 281.154 cv
498.564 281.749 498.494 282.644 497.898 283.152 cv
488.949 290.787 li
488.468 291.199 487.787 291.229 487.278 290.911 cv
487.058 291.111 486.771 291.244 486.452 291.273 cv
474.735 292.323 li
474.607 292.329 li
f
281.859 431.121 mo
281.748 431.117 li
281.373 431.086 281.025 430.91 280.781 430.624 cv
276.888 426.059 li
276.38 425.463 276.451 424.569 277.046 424.061 cv
277.643 423.554 278.536 423.625 279.044 424.219 cv
282.018 427.706 li
285.504 424.731 li
286.101 424.224 286.995 424.292 287.502 424.889 cv
288.011 425.485 287.939 426.379 287.344 426.887 cv
282.779 430.782 li
282.522 431.001 282.195 431.121 281.859 431.121 cv
cp
f
301.437 258.789 mo
301.208 258.77 li
297.466 258.164 293.646 257.856 289.855 257.856 cv
289.723 257.856 li
288.939 257.856 288.305 257.221 288.305 256.438 cv
288.305 255.656 288.939 255.021 289.723 255.021 cv
289.855 255.021 li
293.798 255.021 297.77 255.341 301.661 255.972 cv
302.435 256.097 302.959 256.825 302.834 257.598 cv
302.721 258.294 302.119 258.789 301.437 258.789 cv
cp
269.889 260.677 mo
269.273 260.677 268.707 260.273 268.527 259.652 cv
268.311 258.9 268.744 258.115 269.496 257.897 cv
273.324 256.792 277.275 255.994 281.24 255.527 cv
282.014 255.436 282.722 255.99 282.813 256.769 cv
282.905 257.546 282.35 258.25 281.572 258.342 cv
277.761 258.792 273.962 259.558 270.283 260.621 cv
270.151 260.659 270.019 260.677 269.889 260.677 cv
cp
320.571 264.713 mo
320.369 264.713 320.164 264.67 319.969 264.578 cv
316.504 262.946 312.874 261.587 309.182 260.541 cv
308.429 260.327 307.991 259.544 308.204 258.791 cv
308.418 258.038 309.198 257.6 309.955 257.813 cv
313.796 258.902 317.571 260.315 321.177 262.014 cv
321.885 262.347 322.188 263.192 321.854 263.9 cv
321.613 264.413 321.104 264.713 320.571 264.713 cv
cp
251.62 268.877 mo
251.149 268.877 250.688 268.643 250.419 268.216 cv
250.002 267.554 250.2 266.678 250.862 266.261 cv
254.239 264.132 257.813 262.271 261.486 260.727 cv
262.208 260.424 263.039 260.763 263.342 261.484 cv
263.646 262.206 263.307 263.037 262.585 263.34 cv
259.055 264.824 255.619 266.613 252.374 268.659 cv
252.14 268.807 251.878 268.877 251.62 268.877 cv
cp
337.318 275.708 mo
336.985 275.708 336.651 275.592 336.383 275.354 cv
333.5 272.819 330.392 270.507 327.142 268.483 cv
326.478 268.069 326.274 267.195 326.688 266.531 cv
327.102 265.866 327.976 265.665 328.641 266.077 cv
332.021 268.183 335.256 270.588 338.255 273.227 cv
338.843 273.744 338.899 274.639 338.383 275.227 cv
338.103 275.545 337.711 275.708 337.318 275.708 cv
cp
236.305 281.803 mo
235.968 281.803 235.629 281.683 235.358 281.44 cv
234.775 280.917 234.728 280.021 235.25 279.438 cv
237.43 277.01 239.803 274.696 242.302 272.563 cv
242.847 272.099 243.396 271.644 243.95 271.198 cv
244.56 270.707 245.452 270.803 245.942 271.414 cv
246.434 272.024 246.336 272.916 245.727 273.407 cv
245.193 273.835 244.666 274.272 244.143 274.72 cv
241.737 276.771 239.456 278.996 237.359 281.332 cv
237.08 281.644 236.693 281.803 236.305 281.803 cv
cp
350.391 290.892 mo
349.925 290.892 349.469 290.663 349.197 290.242 cv
347.488 287.589 345.574 285.016 343.509 282.594 cv
343.076 282.087 342.638 281.588 342.194 281.096 cv
341.67 280.515 341.716 279.619 342.297 279.094 cv
342.879 278.57 343.774 278.616 344.299 279.197 cv
344.76 279.708 345.215 280.227 345.665 280.754 cv
347.813 283.273 349.804 285.948 351.58 288.707 cv
352.004 289.365 351.814 290.242 351.156 290.666 cv
350.919 290.819 350.653 290.892 350.391 290.892 cv
cp
225.146 298.441 mo
224.938 298.441 224.729 298.396 224.529 298.3 cv
223.825 297.959 223.529 297.111 223.87 296.407 cv
225.607 292.813 227.653 289.339 229.952 286.083 cv
230.403 285.444 231.29 285.293 231.928 285.743 cv
232.567 286.195 232.72 287.079 232.268 287.718 cv
230.059 290.847 228.092 294.186 226.422 297.64 cv
226.178 298.146 225.672 298.441 225.146 298.441 cv
cp
358.769 309.082 mo
358.159 309.082 357.596 308.685 357.412 308.071 cv
356.312 304.398 354.898 300.792 353.212 297.351 cv
352.867 296.647 353.157 295.798 353.86 295.454 cv
354.563 295.109 355.413 295.4 355.757 296.103 cv
357.512 299.684 358.982 303.437 360.127 307.257 cv
360.352 308.007 359.926 308.797 359.177 309.022 cv
359.041 309.063 358.903 309.082 358.769 309.082 cv
cp
219.038 317.521 mo
218.797 317.5 li
218.025 317.368 217.508 316.635 217.64 315.863 cv
218.316 311.93 219.321 308.027 220.626 304.261 cv
220.883 303.521 221.691 303.13 222.43 303.385 cv
223.169 303.642 223.562 304.449 223.305 305.188 cv
222.05 308.81 221.084 312.563 220.434 316.344 cv
220.315 317.034 219.716 317.521 219.038 317.521 cv
cp
361.785 328.885 mo
361.01 328.885 360.377 328.261 360.368 327.484 cv
360.323 323.647 359.963 319.788 359.297 316.015 cv
359.16 315.244 359.675 314.509 360.446 314.373 cv
361.215 314.236 361.952 314.751 362.088 315.522 cv
362.78 319.447 363.155 323.46 363.202 327.451 cv
363.212 328.233 362.585 328.875 361.802 328.884 cv
361.785 328.885 li
cp
218.404 337.544 mo
217.689 337.544 217.075 337.006 216.997 336.279 cv
216.715 333.667 216.571 331.006 216.571 328.371 cv
216.571 327.017 216.609 325.649 216.684 324.304 cv
216.727 323.522 217.385 322.923 218.177 322.967 cv
218.959 323.01 219.558 323.679 219.514 324.46 cv
219.442 325.753 219.406 327.069 219.406 328.372 cv
219.406 330.904 219.544 333.462 219.815 335.975 cv
219.899 336.753 219.337 337.452 218.559 337.536 cv
218.404 337.544 li
cp
359.241 348.757 mo
359.117 348.757 358.992 348.741 358.867 348.707 cv
358.112 348.5 357.667 347.722 357.873 346.966 cv
358.882 343.269 359.595 339.459 359.991 335.644 cv
360.073 334.865 360.77 334.301 361.548 334.38 cv
362.326 334.461 362.892 335.158 362.812 335.937 cv
362.398 339.905 361.657 343.867 360.607 347.712 cv
360.436 348.343 359.864 348.757 359.241 348.757 cv
cp
223.317 356.964 mo
222.759 356.964 222.229 356.632 222.005 356.083 cv
220.496 352.396 219.282 348.553 218.397 344.658 cv
218.224 343.895 218.701 343.135 219.465 342.962 cv
220.23 342.786 220.987 343.267 221.161 344.029 cv
222.013 347.773 223.179 351.467 224.628 355.009 cv
224.925 355.734 224.578 356.562 223.854 356.858 cv
223.678 356.93 223.496 356.964 223.317 356.964 cv
cp
351.318 367.159 mo
351.067 367.159 350.813 367.091 350.582 366.952 cv
349.914 366.544 349.702 365.672 350.109 365.003 cv
352.103 361.73 353.839 358.266 355.27 354.708 cv
355.561 353.982 356.385 353.628 357.113 353.922 cv
357.839 354.214 358.191 355.04 357.899 355.765 cv
356.411 359.468 354.604 363.072 352.53 366.478 cv
352.263 366.917 351.796 367.159 351.318 367.159 cv
cp
233.418 374.257 mo
232.999 374.257 232.584 374.073 232.305 373.718 cv
229.827 370.578 227.596 367.222 225.674 363.745 cv
225.295 363.06 225.543 362.198 226.229 361.819 cv
226.914 361.44 227.776 361.689 228.154 362.374 cv
230.003 365.716 232.147 368.943 234.53 371.962 cv
235.015 372.577 234.909 373.468 234.295 373.953 cv
234.035 374.158 233.726 374.257 233.418 374.257 cv
cp
338.605 382.64 mo
338.223 382.64 337.841 382.487 337.562 382.183 cv
337.031 381.607 337.069 380.709 337.646 380.18 cv
340.477 377.576 343.105 374.729 345.461 371.719 cv
345.943 371.103 346.835 370.994 347.45 371.476 cv
348.066 371.958 348.176 372.849 347.693 373.465 cv
345.244 376.597 342.509 379.558 339.564 382.266 cv
339.292 382.517 338.948 382.64 338.605 382.64 cv
cp
246.422 389.582 mo
246.021 389.582 245.623 389.413 245.343 389.084 cv
237.708 380.135 li
237.2 379.54 237.271 378.645 237.866 378.137 cv
238.463 377.63 239.356 377.701 239.864 378.295 cv
247.499 387.245 li
248.008 387.84 247.937 388.735 247.341 389.243 cv
247.074 389.47 246.747 389.582 246.422 389.582 cv
cp
323.348 395.724 mo
322.947 395.724 322.55 395.555 322.27 395.227 cv
321.761 394.631 321.832 393.737 322.428 393.229 cv
331.376 385.594 li
331.973 385.088 332.867 385.158 333.374 385.752 cv
333.883 386.348 333.812 387.243 333.216 387.75 cv
324.268 395.385 li
324 395.613 323.674 395.724 323.348 395.724 cv
cp
259.467 404.873 mo
259.066 404.873 258.669 404.704 258.389 404.375 cv
250.754 395.427 li
250.245 394.832 250.316 393.937 250.912 393.429 cv
251.508 392.922 252.402 392.993 252.91 393.587 cv
260.545 402.536 li
261.053 403.131 260.982 404.026 260.387 404.534 cv
260.119 404.761 259.793 404.873 259.467 404.873 cv
cp
308.058 408.77 mo
307.657 408.77 307.259 408.601 306.979 408.273 cv
306.471 407.677 306.541 406.783 307.137 406.275 cv
316.086 398.64 li
316.682 398.133 317.576 398.204 318.084 398.798 cv
318.592 399.394 318.521 400.289 317.926 400.796 cv
308.977 408.431 li
308.71 408.659 308.383 408.77 308.058 408.77 cv
cp
272.513 420.165 mo
272.112 420.165 271.714 419.996 271.434 419.667 cv
263.799 410.718 li
263.291 410.123 263.361 409.228 263.957 408.72 cv
264.554 408.213 265.447 408.284 265.955 408.878 cv
273.59 417.828 li
274.099 418.423 274.027 419.318 273.432 419.826 cv
273.165 420.053 272.838 420.165 272.513 420.165 cv
cp
292.767 421.816 mo
292.366 421.816 291.968 421.647 291.688 421.319 cv
291.18 420.723 291.25 419.829 291.846 419.321 cv
300.795 411.686 li
301.391 411.18 302.285 411.25 302.793 411.844 cv
303.301 412.44 303.23 413.334 302.635 413.842 cv
293.686 421.477 li
293.419 421.705 293.092 421.816 292.767 421.816 cv
cp
f
351.197 491.767 mo
351.086 491.763 li
350.711 491.733 350.363 491.556 350.119 491.27 cv
346.226 486.706 li
345.718 486.11 345.789 485.215 346.384 484.708 cv
346.979 484.201 347.874 484.271 348.382 484.866 cv
351.355 488.352 li
354.842 485.377 li
355.438 484.871 356.332 484.939 356.84 485.536 cv
357.348 486.131 357.277 487.026 356.682 487.534 cv
352.117 491.428 li
351.86 491.648 351.533 491.767 351.197 491.767 cv
cp
f
370.775 319.435 mo
370.547 319.416 li
366.804 318.81 362.984 318.502 359.193 318.502 cv
359.061 318.502 li
358.277 318.502 357.644 317.867 357.644 317.084 cv
357.644 316.302 358.277 315.667 359.061 315.667 cv
359.193 315.667 li
363.136 315.667 367.108 315.987 371 316.618 cv
371.772 316.743 372.298 317.471 372.173 318.244 cv
372.06 318.94 371.458 319.435 370.775 319.435 cv
cp
339.227 321.323 mo
338.611 321.323 338.045 320.919 337.865 320.299 cv
337.648 319.546 338.082 318.761 338.834 318.543 cv
342.662 317.438 346.613 316.64 350.578 316.173 cv
351.351 316.086 352.06 316.637 352.151 317.415 cv
352.243 318.192 351.688 318.896 350.91 318.988 cv
347.099 319.438 343.3 320.204 339.621 321.267 cv
339.489 321.305 339.356 321.323 339.227 321.323 cv
cp
389.909 325.359 mo
389.707 325.359 389.501 325.316 389.306 325.224 cv
385.842 323.592 382.213 322.234 378.52 321.187 cv
377.767 320.973 377.329 320.19 377.543 319.437 cv
377.757 318.684 378.544 318.246 379.293 318.459 cv
383.135 319.549 386.91 320.962 390.515 322.66 cv
391.223 322.993 391.526 323.838 391.192 324.546 cv
390.951 325.059 390.441 325.359 389.909 325.359 cv
cp
320.958 329.524 mo
320.487 329.524 320.026 329.29 319.757 328.862 cv
319.34 328.2 319.538 327.325 320.2 326.907 cv
323.577 324.779 327.151 322.917 330.824 321.373 cv
331.547 321.07 332.377 321.409 332.68 322.13 cv
332.983 322.852 332.645 323.683 331.923 323.986 cv
328.393 325.47 324.957 327.26 321.712 329.306 cv
321.478 329.453 321.216 329.524 320.958 329.524 cv
cp
406.656 336.354 mo
406.324 336.354 405.99 336.238 405.721 336 cv
402.838 333.464 399.729 331.153 396.479 329.129 cv
395.814 328.716 395.611 327.842 396.025 327.177 cv
396.438 326.512 397.313 326.311 397.978 326.723 cv
401.358 328.828 404.594 331.234 407.594 333.873 cv
408.181 334.39 408.238 335.285 407.722 335.873 cv
407.441 336.191 407.05 336.354 406.656 336.354 cv
cp
305.642 342.449 mo
305.305 342.449 304.967 342.329 304.695 342.086 cv
304.113 341.563 304.064 340.667 304.588 340.084 cv
306.768 337.655 309.141 335.342 311.64 333.209 cv
312.186 332.745 312.734 332.29 313.287 331.845 cv
313.897 331.354 314.79 331.449 315.28 332.06 cv
315.771 332.67 315.675 333.562 315.064 334.053 cv
314.532 334.481 314.004 334.919 313.479 335.366 cv
311.075 337.417 308.794 339.642 306.697 341.978 cv
306.417 342.29 306.03 342.449 305.642 342.449 cv
cp
419.729 351.539 mo
419.263 351.539 418.807 351.309 418.536 350.889 cv
416.825 348.233 414.911 345.66 412.847 343.24 cv
412.414 342.733 411.975 342.233 411.531 341.742 cv
411.007 341.16 411.054 340.264 411.635 339.74 cv
412.216 339.217 413.11 339.262 413.637 339.843 cv
414.098 340.354 414.553 340.873 415.003 341.4 cv
417.149 343.916 419.14 346.592 420.919 349.354 cv
421.343 350.012 421.153 350.889 420.495 351.313 cv
420.258 351.465 419.992 351.539 419.729 351.539 cv
cp
294.483 359.088 mo
294.276 359.088 294.066 359.042 293.867 358.947 cv
293.163 358.606 292.867 357.758 293.208 357.054 cv
294.944 353.459 296.991 349.986 299.29 346.729 cv
299.742 346.09 300.626 345.938 301.266 346.389 cv
301.905 346.84 302.058 347.725 301.605 348.364 cv
299.396 351.494 297.43 354.833 295.761 358.287 cv
295.516 358.793 295.01 359.088 294.483 359.088 cv
cp
428.107 369.729 mo
427.498 369.729 426.935 369.332 426.751 368.718 cv
425.651 365.047 424.237 361.44 422.551 357.997 cv
422.206 357.293 422.497 356.444 423.199 356.1 cv
423.904 355.755 424.752 356.046 425.096 356.749 cv
426.852 360.332 428.322 364.085 429.466 367.904 cv
429.69 368.654 429.265 369.444 428.516 369.668 cv
428.38 369.709 428.242 369.729 428.107 369.729 cv
cp
288.376 378.167 mo
288.134 378.146 li
287.362 378.013 286.845 377.281 286.978 376.509 cv
287.654 372.577 288.659 368.673 289.964 364.908 cv
290.22 364.168 291.026 363.773 291.768 364.033 cv
292.507 364.289 292.898 365.096 292.643 365.835 cv
291.388 369.457 290.422 373.208 289.771 376.99 cv
289.652 377.68 289.054 378.167 288.376 378.167 cv
cp
431.123 389.532 mo
430.348 389.532 429.715 388.909 429.706 388.131 cv
429.662 384.295 429.302 380.437 428.636 376.663 cv
428.499 375.892 429.014 375.157 429.785 375.021 cv
430.551 374.886 431.291 375.4 431.427 376.17 cv
432.12 380.096 432.494 384.109 432.54 388.098 cv
432.549 388.881 431.922 389.523 431.14 389.532 cv
431.123 389.532 li
cp
287.742 398.19 mo
287.027 398.19 286.413 397.652 286.335 396.925 cv
286.053 394.312 285.909 391.652 285.909 389.017 cv
285.909 387.663 285.947 386.294 286.021 384.95 cv
286.064 384.168 286.721 383.557 287.515 383.613 cv
288.297 383.656 288.896 384.325 288.852 385.106 cv
288.78 386.399 288.744 387.715 288.744 389.018 cv
288.744 391.55 288.882 394.109 289.153 396.621 cv
289.237 397.399 288.675 398.098 287.896 398.182 cv
287.742 398.19 li
cp
428.579 409.405 mo
428.455 409.405 428.33 409.388 428.205 409.354 cv
427.45 409.148 427.005 408.369 427.211 407.614 cv
428.22 403.917 428.933 400.107 429.329 396.292 cv
429.41 395.513 430.104 394.954 430.886 395.028 cv
431.664 395.109 432.229 395.806 432.149 396.584 cv
431.736 400.552 430.995 404.514 429.945 408.36 cv
429.773 408.99 429.202 409.405 428.579 409.405 cv
cp
292.655 417.611 mo
292.097 417.611 291.567 417.279 291.343 416.73 cv
289.834 413.042 288.62 409.199 287.735 405.305 cv
287.562 404.542 288.039 403.782 288.803 403.609 cv
289.567 403.435 290.326 403.914 290.499 404.676 cv
291.35 408.418 292.517 412.113 293.967 415.656 cv
294.263 416.38 293.916 417.208 293.191 417.504 cv
293.016 417.577 292.834 417.611 292.655 417.611 cv
cp
420.655 427.805 mo
420.403 427.805 420.149 427.738 419.919 427.598 cv
419.251 427.191 419.039 426.319 419.445 425.65 cv
421.437 422.38 423.173 418.917 424.607 415.354 cv
424.899 414.627 425.728 414.277 426.451 414.569 cv
427.177 414.861 427.529 415.686 427.236 416.413 cv
425.745 420.119 423.938 423.723 421.867 427.125 cv
421.6 427.563 421.133 427.805 420.655 427.805 cv
cp
302.757 434.903 mo
302.338 434.903 301.923 434.718 301.643 434.364 cv
299.165 431.223 296.935 427.868 295.012 424.39 cv
294.633 423.706 294.882 422.843 295.566 422.464 cv
296.252 422.085 297.114 422.334 297.492 423.019 cv
299.341 426.362 301.486 429.588 303.868 432.608 cv
304.354 433.222 304.248 434.114 303.634 434.598 cv
303.373 434.803 303.063 434.903 302.757 434.903 cv
cp
407.942 443.286 mo
407.561 443.286 407.179 443.132 406.899 442.828 cv
406.369 442.252 406.407 441.355 406.983 440.826 cv
409.814 438.221 412.443 435.375 414.799 432.365 cv
415.281 431.749 416.174 431.639 416.788 432.122 cv
417.405 432.604 417.514 433.495 417.031 434.111 cv
414.581 437.243 411.847 440.204 408.901 442.912 cv
408.63 443.163 408.286 443.286 407.942 443.286 cv
cp
315.76 450.228 mo
315.359 450.228 314.962 450.059 314.682 449.731 cv
307.047 440.782 li
306.538 440.186 306.609 439.292 307.205 438.784 cv
307.801 438.278 308.695 438.347 309.203 438.942 cv
316.838 447.891 li
317.346 448.487 317.274 449.381 316.68 449.889 cv
316.412 450.117 316.086 450.228 315.76 450.228 cv
cp
392.686 456.371 mo
392.285 456.371 391.887 456.202 391.606 455.874 cv
391.099 455.278 391.169 454.383 391.765 453.875 cv
400.714 446.241 li
401.31 445.733 402.205 445.805 402.712 446.399 cv
403.22 446.995 403.149 447.889 402.554 448.397 cv
393.604 456.032 li
393.338 456.259 393.011 456.371 392.686 456.371 cv
cp
328.806 465.519 mo
328.405 465.519 328.007 465.35 327.727 465.022 cv
320.092 456.073 li
319.584 455.477 319.655 454.583 320.25 454.075 cv
320.847 453.568 321.74 453.638 322.248 454.233 cv
329.883 463.182 li
330.392 463.778 330.32 464.672 329.725 465.18 cv
329.458 465.408 329.131 465.519 328.806 465.519 cv
cp
377.396 469.417 mo
376.995 469.417 376.597 469.248 376.316 468.919 cv
375.809 468.324 375.879 467.429 376.475 466.921 cv
385.423 459.287 li
386.019 458.78 386.914 458.851 387.421 459.445 cv
387.929 460.041 387.858 460.935 387.263 461.443 cv
378.314 469.078 li
378.048 469.305 377.721 469.417 377.396 469.417 cv
cp
341.851 480.81 mo
341.45 480.81 341.053 480.641 340.772 480.313 cv
333.138 471.364 li
332.629 470.768 332.7 469.874 333.296 469.366 cv
333.892 468.859 334.786 468.929 335.294 469.524 cv
342.929 478.473 li
343.437 479.069 343.366 479.963 342.771 480.471 cv
342.503 480.699 342.177 480.81 341.851 480.81 cv
cp
362.104 482.462 mo
361.704 482.462 361.306 482.294 361.025 481.965 cv
360.518 481.37 360.588 480.475 361.184 479.967 cv
370.132 472.333 li
370.727 471.826 371.622 471.894 372.13 472.491 cv
372.638 473.086 372.567 473.981 371.972 474.489 cv
363.023 482.124 li
362.757 482.351 362.43 482.462 362.104 482.462 cv
cp
f
216.552 378.364 mo
216.44 378.36 li
216.065 378.33 215.718 378.153 215.474 377.867 cv
211.58 373.302 li
211.071 372.707 211.143 371.812 211.738 371.304 cv
212.334 370.797 213.228 370.868 213.736 371.462 cv
216.71 374.949 li
220.196 371.974 li
220.791 371.468 221.687 371.536 222.194 372.132 cv
222.702 372.728 222.632 373.623 222.036 374.13 cv
217.472 378.025 li
217.215 378.245 216.888 378.364 216.552 378.364 cv
cp
f
224.987 349.424 mo
224.723 349.424 224.455 349.351 224.217 349.196 cv
221.027 347.127 216.851 346.791 213.371 348.327 cv
212.654 348.645 211.818 348.318 211.502 347.603 cv
211.186 346.886 211.511 346.05 212.227 345.733 cv
216.57 343.815 221.776 344.233 225.76 346.818 cv
226.417 347.244 226.604 348.122 226.178 348.778 cv
225.906 349.197 225.451 349.424 224.987 349.424 cv
cp
206.928 366.798 mo
206.444 366.798 205.974 366.551 205.709 366.106 cv
204.397 363.907 203.704 361.384 203.704 358.813 cv
203.705 356.648 204.204 354.479 205.148 352.542 cv
205.492 351.839 206.34 351.547 207.044 351.889 cv
207.747 352.232 208.04 353.08 207.696 353.784 cv
206.939 355.337 206.54 357.077 206.539 358.813 cv
206.539 360.874 207.094 362.894 208.144 364.655 cv
208.544 365.327 208.324 366.197 207.651 366.598 cv
207.424 366.733 207.174 366.798 206.928 366.798 cv
cp
227.862 368.477 mo
227.542 368.477 227.219 368.369 226.953 368.146 cv
226.354 367.644 226.274 366.75 226.777 366.15 cv
228.493 364.101 229.438 361.492 229.438 358.802 cv
229.438 357.676 229.274 356.561 228.949 355.488 cv
228.724 354.738 229.147 353.947 229.896 353.721 cv
230.647 353.495 231.438 353.918 231.663 354.668 cv
232.067 356.007 232.273 357.399 232.273 358.802 cv
232.273 362.157 231.093 365.413 228.95 367.97 cv
228.67 368.305 228.268 368.477 227.862 368.477 cv
cp
f
534.017 210.531 mo
550.16 196.756 552.082 172.501 538.308 156.357 cv
524.533 140.211 500.278 138.288 484.132 152.063 cv
467.987 165.839 466.065 190.093 479.841 206.239 cv
504.782 235.473 li
534.017 210.531 li
.707031 .054688 .578125 0 cmyk
f
237.984 221.117 mo
242.916 216.908 243.503 209.499 239.296 204.567 cv
235.088 199.635 227.68 199.048 222.747 203.256 cv
217.814 207.463 217.228 214.873 221.436 219.805 cv
229.055 228.735 li
237.984 221.117 li
cp
.871094 .296875 .75 .160156 cmyk
f
281.735 318.91 mo
291.497 310.581 292.659 295.915 284.33 286.152 cv
276.001 276.389 261.335 275.227 251.571 283.556 cv
241.81 291.886 240.647 306.551 248.977 316.314 cv
264.059 333.991 li
281.735 318.91 li
cp
.374777 0 .428592 0 cmyk
f
170.068 337.111 mo
206.619 305.925 210.97 251.011 179.784 214.46 cv
148.598 177.905 93.6856 173.553 57.1299 204.74 cv
20.5782 235.927 16.2265 290.84 47.416 327.393 cv
103.881 393.579 li
170.068 337.111 li
.707031 .054688 .578125 0 cmyk
f
655.737 357.368 mo
687.255 330.476 691.007 283.123 664.115 251.604 cv
637.223 220.083 589.871 216.331 558.349 243.223 cv
526.829 270.116 523.077 317.468 549.972 348.988 cv
598.663 406.061 li
655.737 357.368 li
.374777 0 .428592 0 cmyk
f
165.4 143.995 mo
165.4 151.348 171.35 157.297 178.702 157.297 cv
210.143 157.297 li
217.495 157.297 223.444 151.348 223.444 143.995 cv
223.444 138.348 219.926 133.534 214.968 131.6 cv
214.979 131.298 li
214.979 123.619 208.752 117.391 201.073 117.391 cv
196.213 117.391 191.943 119.883 189.452 123.656 cv
188.109 122.749 186.489 122.229 184.748 122.229 cv
180.068 122.229 176.283 126.013 176.283 130.693 cv
176.283 130.911 li
170.092 132.047 165.4 137.478 165.4 143.995 cv
cp
0 0 0 0 cmyk
ef
421.238 325.052 mo
421.238 335.428 429.633 343.823 440.007 343.823 cv
484.374 343.823 li
494.749 343.823 503.144 335.428 503.144 325.052 cv
503.144 317.083 498.179 310.292 491.182 307.562 cv
491.198 307.136 li
491.198 296.3 482.411 287.511 471.575 287.511 cv
464.717 287.511 458.692 291.028 455.176 296.353 cv
453.283 295.072 450.995 294.338 448.539 294.338 cv
441.936 294.338 436.595 299.678 436.595 306.283 cv
436.595 306.59 li
427.858 308.193 421.238 315.855 421.238 325.052 cv
cp
ef
137.972 419.27 mo
137.972 423.805 141.641 427.475 146.175 427.475 cv
165.567 427.475 li
170.103 427.475 173.771 423.805 173.771 419.27 cv
173.771 415.787 171.602 412.819 168.543 411.625 cv
168.551 411.439 li
168.551 406.703 164.71 402.861 159.974 402.861 cv
156.976 402.861 154.343 404.398 152.806 406.725 cv
151.979 406.166 150.978 405.845 149.904 405.845 cv
147.019 405.845 144.684 408.179 144.684 411.066 cv
144.684 411.201 li
140.865 411.901 137.972 415.25 137.972 419.27 cv
cp
ef
405.323 50.8154 mo
405.323 55.3506 408.992 59.0205 413.526 59.0205 cv
432.919 59.0205 li
437.454 59.0205 441.123 55.3506 441.123 50.8154 cv
441.123 47.332 438.953 44.3643 435.895 43.1709 cv
435.901 42.9844 li
435.901 38.248 432.062 34.4063 427.325 34.4063 cv
424.327 34.4063 421.694 35.9434 420.157 38.2705 cv
419.329 37.7109 418.329 37.3906 417.256 37.3906 cv
414.37 37.3906 412.035 39.7246 412.035 42.6113 cv
412.035 42.7461 li
408.216 43.4463 405.323 46.7959 405.323 50.8154 cv
cp
ef
233.327 250.237 mo
233.327 252.793 235.396 254.862 237.951 254.862 cv
248.882 254.862 li
251.438 254.862 253.507 252.793 253.507 250.237 cv
253.507 248.273 252.283 246.601 250.56 245.928 cv
250.563 245.823 li
250.563 243.153 248.398 240.987 245.729 240.987 cv
244.039 240.987 242.555 241.854 241.688 243.166 cv
241.223 242.85 240.658 242.669 240.054 242.669 cv
238.427 242.669 237.11 243.985 237.11 245.612 cv
237.11 245.688 li
234.958 246.083 233.327 247.971 233.327 250.237 cv
cp
.580392 .023529 .286275 0 cmyk
ef
467.566 96.667 mo
467.566 101.136 471.183 104.752 475.648 104.752 cv
494.759 104.752 li
499.229 104.752 502.844 101.136 502.844 96.667 cv
502.844 93.2349 500.705 90.3105 497.692 89.1343 cv
497.699 88.9507 li
497.699 84.2832 493.914 80.4976 489.246 80.4976 cv
486.293 80.4976 483.698 82.0127 482.184 84.3052 cv
481.368 83.7539 480.383 83.438 479.326 83.438 cv
476.481 83.438 474.181 85.7388 474.181 88.5825 cv
474.181 88.7158 li
470.418 89.4058 467.566 92.7065 467.566 96.667 cv
cp
ef
336.034 343.596 mo
336.034 348.065 339.65 351.682 344.116 351.682 cv
363.227 351.682 li
367.696 351.682 371.312 348.065 371.312 343.596 cv
371.312 340.164 369.173 337.24 366.16 336.063 cv
366.167 335.88 li
366.167 331.212 362.382 327.427 357.714 327.427 cv
354.761 327.427 352.166 328.942 350.651 331.234 cv
349.836 330.683 348.851 330.367 347.794 330.367 cv
344.949 330.367 342.648 332.668 342.648 335.512 cv
342.648 335.645 li
338.886 336.335 336.034 339.636 336.034 343.596 cv
cp
ef
496.164 387.16 mo
496.164 393.383 501.2 398.42 507.424 398.42 cv
534.038 398.42 li
540.263 398.42 545.298 393.383 545.298 387.16 cv
545.298 382.378 542.32 378.306 538.122 376.668 cv
538.133 376.412 li
538.133 369.912 532.86 364.639 526.36 364.639 cv
522.247 364.639 518.632 366.749 516.522 369.943 cv
515.389 369.174 514.015 368.735 512.542 368.735 cv
508.58 368.735 505.377 371.938 505.377 375.9 cv
505.377 376.085 li
500.137 377.046 496.164 381.643 496.164 387.16 cv
cp
0 0 0 0 cmyk
ef
420.755 208.507 mo
462.296 173.064 467.239 110.653 431.796 69.1113 cv
396.352 27.5659 333.943 22.6205 292.397 58.0639 cv
250.855 93.5098 245.909 155.92 281.356 197.462 cv
345.532 272.685 li
420.755 208.507 li
.871094 .296875 .75 .160156 cmyk
f
90.4443 426.938 mo
99.248 426.938 li
99.248 452.915 li
117.297 452.915 li
117.297 427.378 li
126.099 427.378 li
108.492 409.329 li
90.4443 426.938 li
cp
.707031 .054688 .578125 0 cmyk
f
482.518 258.55 mo
489.257 258.55 li
489.257 278.435 li
503.073 278.435 li
503.073 258.887 li
509.812 258.887 li
496.333 245.07 li
482.518 258.55 li
cp
.374777 0 .428592 0 cmyk
f
189.807 190.126 mo
195.137 190.126 li
195.137 205.853 li
206.064 205.853 li
206.064 190.393 li
211.394 190.393 li
200.733 179.464 li
189.807 190.126 li
cp
.580392 .023529 .286275 0 cmyk
f
451.397 64.7705 mo
456.728 64.7705 li
456.728 80.4976 li
467.655 80.4976 li
467.655 65.0371 li
472.985 65.0371 li
462.325 54.1089 li
451.397 64.7705 li
cp
.707031 .054688 .578125 0 cmyk
f
229.83 114.858 mo
235.16 114.858 li
235.16 130.585 li
246.088 130.585 li
246.088 115.125 li
251.418 115.125 li
240.758 104.196 li
229.83 114.858 li
cp
.580392 .023529 .286275 0 cmyk
f
576.075 463.576 mo
581.405 463.576 li
581.405 479.303 li
592.333 479.303 li
592.333 463.842 li
597.663 463.842 li
587.003 452.915 li
576.075 463.576 li
cp
f
243.543 86.2514 mo
255.154 76.3442 256.536 58.8993 246.629 47.2871 cv
236.722 35.6744 219.277 34.292 207.664 44.1993 cv
196.053 54.1074 194.67 71.5517 204.578 83.1645 cv
222.517 104.191 li
243.543 86.2514 li
.707031 .054688 .578125 0 cmyk
f
132.07 369.529 mo
167.313 339.462 li
154.42 351.455 139.054 363.948 132.07 369.529 cv
184.195 321.807 mo
184.823 320.937 185.432 320.06 186.024 319.171 cv
185.399 320.146 184.786 321.03 184.195 321.807 cv
level3{
gsave
clp
[152.629 0 0 152.629 46.4136 319.662 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~aGQ6=`efp8`eTa4`.jF0`.X7,_Lmq'_1@Y"^jqFs^OD.o^3tqk]mGYf]R#Gb]6K2^\T`iX\9<WU[rdBQ
[W@-L[;gjGZuC[DZYkC@Z#,%:Z"nn7YA/S2Y%W8,X_3)*XCZf%X(6T!WFL8qWF:)mVdOciVI"KdV-S9`
Ug&![UKVdWU0)LRTiZ:OTN-"JT2]eFSPsJAS5F2<Ro!u9RSI]4R8%K0QqM3+QV)!'Q:P^#PXfBsPXT6p
P!imjO[<UeO?mFcO$I1^N]pnYN'1VUN&tGQME5)KM)\iHLc8WDLG`<>L,<-;Kecj6KJ?X3K.g=-JM(%)
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[152.629 0 0 152.629 46.4136 319.662 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~a2c6?`l5p9`Pog7`5BL1_o'C/_SO()_8*k%^q[Y!^V7Fr^:h4n]tD"j]Xtef]=PSa\[]/Z\@8rV\$i`R
[^NTO[C*BK['[0GZa6sCZ*CO;Yct@9YHP+3Y-+n/Xf\\+XK8J'X/i8#WMuhpW2QYnVl-DhVP^2dV59u`
Unjf]USFTYU8"BUTqS0QTV.sMT:_aISt2FBS=H+=S"#n9R[T\5R@0J1R$a8-Q^=&)QBmi%Q'@MsPEV2o
PEV/mOcbcgOH>QcO,o?_NfK-[NK&mUMi3LOMi3IMM2@(GLkpkCLPLY?L5(G;KnY57KS5#3K7ef/JqAQ)
~>
<~M2@(GM26tCLPCP<L4t>7KS+o0K7\]+JUi9$J:E&tIXQWmI=-EhH[:!aH?jd\G^"@UGBS.QG'.qLFE;ME
F)uABEH,r:E,]`6DJj<.D/F**CMR["C2.HsBP;$kB4kggAS#C_A7T1[@q/tW@:<PO?sm>K?=$oC?!U]?
>?b<8>$>*4=]ed-='&I(<`N.!<)cgq;c?Um;Gg:f:f'ta:JOYZ9he>U9M8#N8kM]I8OuBB7n6'=7R]a6
6psF26UO1,5s[e&5X7S"5<h=q4Ztqk4?P\e3]];_3B9&Y2`EZS2E!EM1c.$G1G^dA0ekC;0JG.5/hSb/
~>
<~Pa%DsP`q;pPEM)lP*(lhOcYZdOH5H`O,f6\NfB$XNJrgTN/NUPMi*CLMM[1HM2@(FLkgb@LPCP<L5(G:
KnY25KS4u1K7ef/K7ec-JUr?%J:N0#J:N-!IXZ]nI=6NlI=6KjI!g9fH[C'bH?sj^H$OXZG^+FVGB\4R
G'8%OF`hhKFEDVGF)uDCEcQ2?EH,u;E,]c7Df9Q3DJj?/D/F-+Ci!p'CMR^#C2.KtBk_9pBP;'lB4kji
B4kggAS#FaA7T4]A7T1[@U`eU@:<SQ@:<SQ?sm>K?=$rE?=$rE?!U]?>?b<9>?b<9>$>*5=]nj/='&I)
~>
<~1,:U?1,1L<0eb:80JG170J>(40.nk0/hJY,/M&G(/1`>'/1W5$.k3"u.Oceq.4?Sm-mpAi-RU8h-RL/e
-71#b,paf^,U=TZ,9nEX,9nBV+sJ0R+X%sN+<VaJ+!2RH+!2OF*Zc=B*??+>*#on:)]K_8)]K\6)B'J2
)&X;/(`4)+(Ddl'()@Z$()@Z#'bqGt'GM5p',)#l&eYfi&eYfh&J5Td&.fB`%hB0\%LrsY%LrsX%1NaT
$k*OQ$O[=M$47+I$47+I#mgnE#RC\A#6tJ="pP89"U,&5"U,&5"9\i1!s8W-!WiE)!<E3%!<E3%!!!!!
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
128.278 372.534 mo
46.4135 289.387 li
53.501 288.001 li
51.5356 266.79 li
179.38 266.943 li
179.38 266.943 191.388 277.935 199.043 287.211 cv
196.689 298.182 190.956 311.489 186.024 319.171 cv
185.432 320.06 184.823 320.937 184.195 321.807 cv
184.152 321.863 184.109 321.92 184.066 321.975 cv
180.234 326.94 174.119 333.13 167.313 339.462 cv
132.07 369.529 li
129.686 371.434 128.278 372.534 128.278 372.534 cv
level3{
gsave
clp
[152.629 0 0 152.629 46.4136 319.662 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l&`h>k`<V:k`3M7kDd>5kDR22k)-u.k(pf*jbLW'jb:H$jb1B"jFY)rjFP#pj+"`kj*nZiidSNgidABd
iHr0`iH`!\i-;gYi-)[Wi,uRThfH:Ohf?4MhJfqHhJ]kGh/0SBh/0SAghaA=ghO29gM+#7gLmi3gLdc1
g17K,g1.E*fjV-%fjM'$fNtctfNkZqf3GKnf3>Elelo3iel]$eelSsceQ&[^ePrU\e5E=Xe5<7VdnctQ
dnZkNdnH_KdS$PId7U>Ed7L5Bd7C/@cpjl;cpaf9cU4N5cU+H3c9S0.c9J*,c97p(brha&brVR"bW2?s
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[152.629 0 0 152.629 46.4136 319.662 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kih6oki_-lkND$kkN:phk2tggk2k^djlPUcjlGL`jQ,C_jQ,C_jQ#:\j5]1[j5T(Xio8tWio/kTiSibS
iSi_Qi8EPOi8EMMhr!>Khr!>Khr!;IhVR,GhVR)Eh;-oCh;-lAgt^]?gt^Z=gY:K;gY:H9g=k97g=k97
g=k96g"G'3g"G'2f\"j/f\"j.f@SX+f@SX*f%/F'f%/F&e^`4#e^`4#e^`4"eC<!teC<!se'ldpe'ldo
daHRldaHRldaHRldF$@hd*U.dd*U.dd*U.dcd0q`cd0q`cHa_\cHa_\c-=MXc-=MXc-=MXbfn;Tbfn;T
~>
<~O,o?_O,f6\NfB$XNJrgSMi*CLMM[1GLkgb@LPCP;KnP,4KS+o/Jq8K(JUi9#IsuiqIXQWmI=6NkI!^3e
H[C'bH$OXZG^+FVG'8"NF`heJF)uABEcQ/>E,]`6Df9N2D/F**Ci!p(Ci!m&C2.HsBk_6oB4kggAnGUc
A7T4\@q0"X@UW\Q?smAL?X@&E?!U`@>[1N<>?b<8>$>*4=]ed-='&I(<`N.!<)cgq;c6Lj;,L1e:esk^
:/4PZ9he;T91qoN8kM]J8P)KF84Z9B7n6$<77BX66psC06:+"*5s[b$5<h@s5!D+m4?P_g4$,Ja3B9)[
~>
<~_o'C0_ns:-_SO()_83t(_83t(_8*k%^q[Y!^V@Ou^V7Fr^:q=q^:h4n]tM+m]tD"j]Y(ni]Xtef]=Y\e
]=YYc]"5G_\[f8]\[f8]\[f5[\@B#W\$riU\$rfS[^NWQ[^NTO[C*EM[C*BK['[0GZa7!EZa6sCZEgdA
ZEgd@Z*CR=Z*CR<Yct@9Yct@8YHP.4Y-+q1Y-+q1Y-+q0Xf\_,XK8M)XK8M(X/i;%X/i;$WiE)!WiE(u
WMukrW2QYnW2QYnW2QYnVl-GjVP^5fVP^5fV5:#bV5:#bUnjf^Unjf^USFTZUSFTZU8"BVU8"BVTqS0R
~>
<~1,:U?1,1L<0eb:80JG170J>(40.nk0/hJY,/M&G(/1`>'/1W5$.k3"u.Oceq.4?Sm-mpAi-RU8h-RL/e
-71#b,paf^,U=TZ,9nEX,9nBV+sJ0R+X%sN+<VaJ+!2RH+!2OF*Zc=B*??+>*#on:)]K_8)]K\6)B'J2
)&X;/(`4)+(Ddl'()@Z$()@Z#'bqGt'GM5p',)#l&eYfi&eYfh&J5Td&.fB`%hB0\%LrsY%LrsX%1NaT
$k*OQ$O[=M$47+I$47+I#mgnE#RC\A#6tJ="pP89"U,&5"U,&5"9\i1!s8W-!WiE)!<E3%!<E3%!!!!!
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
369.946 251.856 mo
412.254 215.759 li
396.495 230.112 378.504 244.915 369.946 251.856 cv
453.977 150.324 mo
454.324 148.335 454.61 146.338 454.835 144.333 cv
454.998 144.497 455.16 144.659 455.321 144.82 cv
454.95 146.551 454.497 148.398 453.977 150.324 cv
level3{
gsave
clp
[174.512 0 0 174.512 280.81 187.357 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[174.512 0 0 174.512 280.81 187.357 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
364.911 255.91 mo
280.81 171.809 li
280.939 118.804 li
429.866 118.804 li
429.866 118.804 444.371 133.853 454.835 144.333 cv
454.61 146.338 454.324 148.335 453.977 150.324 cv
450.089 164.726 442.442 183.511 436.973 190.596 cv
431.824 197.265 422.512 206.417 412.254 215.759 cv
369.946 251.856 li
366.785 254.419 364.911 255.91 364.911 255.91 cv
level3{
gsave
clp
[174.512 0 0 174.512 280.81 187.357 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~or["KorQqIorHhFor?bEoVpSBoVgJ?oV^D>oVU><oVC/9o;(&7o:jo4o:jl2o:X`/o:X`/nt4N,nt"B)
nt"B(nse3$nse3#nX7runX7osnX%cqnWq]onWhTln<DEjn<;?hn<29fn<)0cn;u*amuPp_muGg]mu>a[
mu5[Ymu,RVmY]CSmYT=RmYK4OmYB.NmY9(Lm=ikHm=`eGm=W_Em=NVBm=EP@m"!A>m!m8<m!d2:m!R&7
m!R#5l[$c1l[$c1lZpZ.lZgT-lZ^N+l?19'l?16%l>t*#l>t*"l>aosl#Ffrl#4Zol#+Qml#"Kkl"nEi
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[174.512 0 0 174.512 280.81 187.357 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~o^qeJo^qeJo^qeJo^qeJo^h\GoCMSFoCMSFoCMSFoCMSFoCDJCo()ABo()ABo()ABo()ABo'u8?naZ/>
naZ/>naZ/>naZ/>naZ,<nF5r:nF5r:nF5r:nF5r:nF5o8n*f`6n*f`6n*f`6n*f`6n*f]4mdBN2mdBN2
mdBN2mdBN2mdBN1mHs<.mHs<.mHs<.mHs<.mHs<-m-O**m-O**m-O**m-O**m-O*)lg*m&lg*m&lg*m&
lg*m&lg*m&lK[["lK[["lK[["lK[["lK[["l07Hsl07Hsl07Hsl07Hsl07Hskih6okih6okih6okih6o
~>
<~XK8M)XK/D&X/`2"Wi;tsWMlboW2HPkVl$>gVPU,bUna][USFTYU7n9STqS0QTV%jKT:_aJT:VXFSXc4?
S=H+>S"#k8R[T\6R@0G0R$a8.Q^=#(QBmf$Q'ISuPa%AqPEV/mP*1riOcb`eOH>NaO,o<]NfK*YNK&mU
N/W^RMi3LNMMd:JM2@(FLkpkBLPLY>L5(G:KnY56KS5#2K7ef.JqAT*JUrB&J:N0"It)rsIXZ`oI=-Eh
H[C*dH[C'bH$O[\H$O[\G^+IXGB\7TG'8"NFEDVHFEDSFEcQ2@EcQ/>E,]c8E,]`6DJj?0D/F-,Ci!p(
~>
<~gY:K;gY:K;gY1B8g=k97g=k97g=b04g"G'3g"G'3g"=s0f\"j/f\"j/f[na,f@SX+f@SX+f@JO(f%/F'
f%/F'f%/C%e^`4#e^`4#e^`1!eC<!teC<!teC;sre'ldpe'ldpe'ldpe'landaHRldaHRldaHOjdF$@h
dF$@hdF$@gd*U.dd*U.dd*U.ccd0q`cd0q`cd0q_cHa_\cHa_\cHa_[c-=MXc-=MXc-=MWbfn;Tbfn;T
bfn;TbKJ)PbKJ)PbKJ)Pb0%lLb0%lLb0%lLb0%lLaiVZHaiVZHaiVZHaN2HDaN2HDaN2HDa2c6@a2c6@
~>
<~;c?Un;c6Lk;Gg:g;,L1f;,C(c:esk_:JXb^:JOY[:/4PZ:/+GW9h\5S9M8#O91hfK8kM]J8kM]J8kDTG
8P)HD84Z6@7n6$<7Rfj:7Rfg877BX677BU46psC06UO4.6UO1,6:*t(5s[b$5X7Ou5<h@s5<h@s5<h=q
5!D.n4Ztqj4?P_f4$,Mc4$,Mb3]];_3]];^3B9)Z3&ilW3&ilV2`EZR2E!HN2)R6K2)R6K2)R6J1c.$F
1G^gC1,:U?0ekC;0ekC;0JG170JG170/"t3/hSb//M/P+/M/P+/1`>'.k<,#.k<,#.Olnt.Olnt.4H\p
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
520.012 222.479 mo
526.735 216.743 li
524.355 218.826 522.027 220.799 520.012 222.479 cv
level3{
gsave
clp
[60.3965 0 0 60.3965 486.853 199.394 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[60.3965 0 0 60.3965 486.853 199.394 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
513.663 227.663 mo
486.852 200.626 li
487.376 171.125 li
533.156 171.373 li
533.156 171.373 542.967 180.633 547.249 184.915 cv
546.539 192.512 543.302 199.619 540.772 202.897 cv
537.865 206.662 532.163 211.992 526.735 216.743 cv
520.012 222.479 li
516.313 225.563 513.663 227.663 513.663 227.663 cv
level3{
gsave
clp
[60.3965 0 0 60.3965 486.853 199.394 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[60.3965 0 0 60.3965 486.853 199.394 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
626.428 383.595 mo
625.768 382.936 li
655.737 357.368 li
667.787 347.086 675.779 333.814 679.551 319.579 cv
678.129 332.042 672.741 339.486 668.494 344.988 cv
657.234 359.571 626.428 383.595 626.428 383.595 cv
level3{
gsave
clp
[113.832 0 0 113.832 565.831 335.263 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~PZ)TEP>ZEBP>Q<?P#-*<P#$$;OABd7OA0X5O%jL2O%aC0N_=4-NCn"*NCdq(N(@b&MaqM!MFVCuMFM=s
M+)+pM*u"mLdPhkLI,VhL-]DdL-T>bKg95aKK`o[KK`o[K0<`YK03WVJNI?RJN@6PJ3%*NJ2gsKIlLgI
IQ(XFIPtOCI5P=@I5G7?Ho#%;HSSk9H88_6H8/V3Gq`G1GV<5.GV3/,G:cr)G:Zi&Ft6Z$FXpN!FX^At
F=C5qF!t#nE[OilE[F`iE@"QfE$\HeE$J9aD^/-_DB_s]DBVjZD'2XVC`cITC`Z@QCE61OCE-(MBcKkJ
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[113.832 0 0 113.832 565.831 335.263 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~PEV2oPEM)lP*1ukP*(lhOcbcfOH5H`O,o?_O,f6\NfK-[NfB$XNJrgTN/W^SN/NUPMi*CLMM[1HM2@(G
M2@%ELkpkCLkphALPLV=L5(D9KnY57KnY25KS4u1K7ef/K7ec-JqAT+JUr?%J:N0#J:N-!It)rtIt)or
IXZ`oI=6NlI=6NkI!g<hI!g<gH[C*cH?sm_H$O[\H$O[[G^+IWGB\7TGB\7SG'8%PG'8%OF`hhKFEDVH
FEDVHF)uDDEcQ2@EH,u<EH,u<E,]c8Df9Q4Df9Q4DJj?0D/F-,D/F-,Ci!p(CMR^$CMR^$C2.KuC2.Hs
~>
<~;GpCj;Gg:g;,C(c:esk_:JOY[:/4PY9h\5S9MA,R9M8#O91hfK8kDTG8OuBC84Q0?7n,s;7Rfj:7R]a7
77BU46psC06UO1,6:*t(5s[b$5X7Ou5<h@s5!D+m4Ztqk4Ztni4?P\e4$,Ja3]]8]3B9)[3&iiU2`EZS
2`EZR2E!HN2)R6J1c.$F1G^gB1,:U>0ekC;0ekC:0JG160/"t2/hSb./M/P*/1`>&.k<,".Olnt.Ocep
-n$Jl-n$Jl-RU8h-71&d,pai`,U=W\,U=TZ+sJ3T+sJ3T+X&!P+<VdL+!2RH*Zc@D*??.@*#oq<)]K_8
~>
<~EH,u<EH,u<EH#l9E,TZ5Df9Q4Df0H1DJj?0DJa6-D/=$)Ci!p(Chmg%CMR^$CMR^#C2%BrBk_9qBk_9q
Bk_6oBP;$kB4kjiB4kggAnGUcAS#FaAS#FaA7T1[@q0"Y@q0"Y@q/tW@U`eU@U`bS@:<PO?smAM?sm>K
?XI/I?XI/H?=$rD?!U`A?!U`@>[1N=>[1N<>?b<8>$>*5>$>*4=]nm1=]nm0=BJ[,='&I)='&I(<`W7%
<`W7%<E3%!<)cgr<)cgr;c?Un;c?Un;c?Un;GpCj;,L1f;,L1f:f'tb:JXb^:JXb^:/4PZ:/4PZ9he>V
~>
<~*Zc@D*ZZ7A*?6%=*#oq<*#oq<*#fh9)]K_8)]BV5)B'M4)AsD1)&X;0)&O2-(`4),(`*u)(Ddl((D[c%
()@Z$()@W"'bqGu'bqGu'bqDs'GM2o',)#m',(uk&eYfi&eYfi&eYcg&J5Qc&.fBa&.fBa&.f?_%hB0]
%hB0\%LrsX%1NaU%1NaU%1NaT$k*OQ$k*OP$O[=L$47+I$47+I$47+H#mgnE#mgnD#RC\A#RC\@#6tJ=
#6tJ="pP89"pP89"pP89"U,&5"9\i1"9\i1!s8W-!s8W-!s8W-!WiE)!<E3%!<E3%zz!!!!!~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
625.768 382.936 mo
565.831 322.999 li
565.966 287.564 li
647.933 286.932 li
647.933 286.932 672.268 311.103 679.663 318.496 cv
679.629 318.861 679.591 319.223 679.551 319.579 cv
675.779 333.814 667.787 347.086 655.737 357.368 cv
625.768 382.936 li
level3{
gsave
clp
[113.832 0 0 113.832 565.831 335.263 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~UJmF"U/I3sU/@*pThppnThgjmTML^jTM:RhT1tIfSkP7cSkG.`SP"t^SOnn\S4J\YRn&MVRn&MVRRW;R
RRN2PR7*#MQpZiKQpQ`IQU-QFQU$HCQ9^?BQ9L0>Ps1'=Ps(!<PWXd8P<4U5P<+L3OueC2OuS4.OZ8+-
OZ/"*O>_h'O#;Y%O#2P#N\c@uN\Z7sNA?.qN%oqmN%fklM_BYiM_9SgMCjAdM(F2aM(=,`Lb!u]Ladi[
LFI]XLF@WWL*qETKdM6QKdD-NKI)$MKHkmJK-PaHK-G[GJg#ICJfoCAJKK1>J0'";J/rq:IiN_7IiN\5
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[113.832 0 0 113.832 565.831 335.263 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~U8"BVU7n9STqS0RTqJ'OTV.sNTV%jKT:_aJT:VXGSt2FCSXl=BSXc4?S=H+>S=?";S!oe7R[T\6R[KS3
R@0J2R@0G0R$a5,Q^=&*Q^=#(QBmi&QBmf$Q'IW"Q'ISuPa%DsPa%AqPEV/mP*1ukP*1riOcbcgOcb`e
OH>QcOH>QbO,o?^NfK-[NfK-ZNK&pWNK&pVN/W^RMi3LOMi3LNMMd:KMMd:JM2@(FLkpkCLkpkBLPLY?
LPLY?L5(G;L5(G;KnY57KS5#3KS5#3K7ef/K7ef/JqAT+JqAT+JUrB'JUrB'J:N0#It)rtIt)rtIXZ`p
~>
<~;GpCj;Gg:g;,C(c:esk_:JOY[:/4PY9h\5S9MA,R9M8#O91hfK8kDTG8OuBC84Q0?7n,s;7Rfj:7R]a7
77BU46psC06UO1,6:*t(5s[b$5X7Ou5<h@s5!D+m4Ztqk4Ztni4?P\e4$,Ja3]]8]3B9)[3&iiU2`EZS
2`EZR2E!HN2)R6J1c.$F1G^gB1,:U>0ekC;0ekC:0JG160/"t2/hSb./M/P*/1`>&.k<,".Olnt.Ocep
-n$Jl-n$Jl-RU8h-71&d,pai`,U=W\,U=TZ+sJ3T+sJ3T+X&!P+<VdL+!2RH*Zc@D*??.@*#oq<)]K_8
~>
<~Pa%DsP`q;pPEM)lP*1ukP*1ukP*(lhOcbcgOcbcgOcYZdOH5H`O,o?_O,o?_O,f6\NfK-[NfK-[NfB$X
NK&mUN/W^SN/W^SN/W[QMi3LOMi3IMMMd:KMMd7IM2@(GM2@(GM2@%ELkpkCLkphALPLY?LPLV=L5(G;
L5(G:KnY57KnY57KnY56KS5#3KS5#2K7ef/K7ef.JqAT+JqAT*JUrB'JUrB&J:N0#J:N0#J:N0"It)rt
It)rtIXZ`pIXZ`pI=6NlI=6NlI!g<hI!g<hI!g<hH[C*dH[C*dH?sm`H?sm`H$O[\H$O[\H$O[\G^+IX
~>
<~*Zc@D*ZZ7A*?6%=*#oq<*#oq<*#fh9)]K_8)]BV5)B'M4)AsD1)&X;0)&O2-(`4),(`*u)(Ddl((D[c%
()@Z$()@W"'bqGu'bqGu'bqDs'GM2o',)#m',(uk&eYfi&eYfi&eYcg&J5Qc&.fBa&.fBa&.f?_%hB0]
%hB0\%LrsX%1NaU%1NaU%1NaT$k*OQ$k*OP$O[=L$47+I$47+I$47+H#mgnE#mgnD#RC\A#RC\@#6tJ=
#6tJ="pP89"pP89"pP89"U,&5"9\i1"9\i1!s8W-!s8W-!s8W-!WiE)!<E3%!<E3%zz!!!!!~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
230.94 96.7788 mo
205.809 72.0976 li
211.042 60.5757 li
211.042 60.5757 211.596 59.1075 213.409 58.7842 cv
215.666 58.6244 219.385 58.5713 223.328 58.5713 cv
231.116 58.5713 239.779 58.7783 239.779 58.7783 cv
239.779 58.7783 249.517 68.3983 252.411 71.292 cv
251.543 75.3388 249.815 78.731 248.104 80.9463 cv
243.697 86.6538 230.94 96.7788 230.94 96.7788 cv
level3{
gsave
clp
[46.6016 0 0 46.6016 205.81 77.6753 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[46.6016 0 0 46.6016 205.81 77.6753 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
50.1343 290.949 mo
49.2378 290.949 48.4854 290.809 47.8779 290.528 cv
47.271 290.249 46.7827 289.868 46.4136 289.387 cv
46.0444 288.905 45.7808 288.342 45.6221 287.698 cv
45.4634 287.053 45.3838 286.372 45.3838 285.652 cv
45.3838 285.147 45.4165 284.58 45.4819 283.95 cv
45.5474 283.319 45.6455 282.686 45.7764 282.05 cv
48.6772 282.05 li
48.6348 284.965 li
48.6348 285.582 48.6626 286.098 48.7192 286.514 cv
48.7754 286.93 48.8613 287.261 48.978 287.509 cv
49.0947 287.757 49.2446 287.934 49.4268 288.041 cv
49.6094 288.149 49.8311 288.203 50.0928 288.203 cv
50.3071 288.203 50.5005 288.16 50.6738 288.076 cv
50.8467 287.992 50.9941 287.845 51.1152 287.635 cv
51.2368 287.425 51.3301 287.14 51.396 286.78 cv
51.4609 286.42 51.4937 285.97 51.4937 285.428 cv
51.5356 266.79 li
55.165 266.79 li
55.165 284.923 li
55.165 286.156 55.0249 287.166 54.7451 287.95 cv
54.4644 288.735 54.0889 289.35 53.6167 289.793 cv
53.1445 290.236 52.6079 290.541 52.0049 290.704 cv
51.4028 290.867 50.7793 290.949 50.1343 290.949 cv
cp
0 0 0 0 cmyk
f
65.6611 283.705 mo
63.9795 271.779 li
63.8252 271.779 li
62.1294 283.705 li
65.6611 283.705 li
cp
61.8071 266.79 mo
65.9834 266.79 li
70.4116 290.725 li
66.7402 290.725 li
66.0815 286.437 li
61.7095 286.437 li
61.0786 290.725 li
57.3931 290.725 li
61.8071 266.79 li
cp
f
70.9443 266.79 mo
74.6577 266.79 li
77.2925 285.75 li
77.4468 285.75 li
80.0952 266.79 li
83.7949 266.79 li
79.437 290.725 li
75.2886 290.725 li
70.9443 266.79 li
cp
f
92.5952 283.705 mo
90.9131 271.779 li
90.7593 271.779 li
89.0635 283.705 li
92.5952 283.705 li
cp
88.7412 266.79 mo
92.9175 266.79 li
97.3457 290.725 li
93.6743 290.725 li
93.0151 286.437 li
88.6431 286.437 li
88.0127 290.725 li
84.3267 290.725 li
88.7412 266.79 li
cp
f
104.871 285.876 mo
104.871 285.363 104.901 284.888 104.962 284.454 cv
105.023 284.02 105.114 283.55 105.235 283.045 cv
108.052 283.045 li
108.052 284.208 li
108.052 284.853 108.092 285.423 108.171 285.918 cv
108.25 286.414 108.382 286.832 108.563 287.172 cv
108.746 287.513 108.989 287.771 109.292 287.943 cv
109.596 288.116 109.967 288.203 110.407 288.203 cv
111.098 288.203 111.625 288.013 111.99 287.635 cv
112.354 287.256 112.537 286.703 112.537 285.974 cv
112.537 285.601 112.511 285.257 112.459 284.944 cv
112.408 284.631 112.319 284.321 112.193 284.013 cv
112.067 283.705 111.896 283.379 111.682 283.039 cv
111.467 282.697 111.191 282.317 110.854 281.896 cv
107.071 277.398 li
106.398 276.539 105.88 275.672 105.516 274.798 cv
105.151 273.925 104.969 272.993 104.969 272.003 cv
104.969 271.208 105.093 270.48 105.34 269.817 cv
105.588 269.153 105.945 268.581 106.413 268.1 cv
106.88 267.619 107.457 267.246 108.144 266.979 cv
108.83 266.713 109.607 266.58 110.477 266.58 cv
111.532 266.58 112.413 266.729 113.118 267.028 cv
113.823 267.327 114.386 267.719 114.807 268.205 cv
115.227 268.691 115.523 269.235 115.697 269.838 cv
115.869 270.44 115.956 271.045 115.956 271.652 cv
115.956 272.167 115.916 272.64 115.837 273.075 cv
115.757 273.509 115.667 273.988 115.563 274.511 cv
112.761 274.511 li
112.761 273.376 li
112.761 272.106 112.579 271.132 112.214 270.455 cv
111.85 269.777 111.256 269.438 110.435 269.438 cv
109.753 269.438 109.244 269.627 108.907 270.006 cv
108.571 270.384 108.402 270.891 108.402 271.526 cv
108.402 271.863 108.428 272.167 108.479 272.438 cv
108.531 272.708 108.606 272.958 108.704 273.187 cv
108.802 273.416 108.921 273.638 109.061 273.853 cv
109.201 274.067 109.36 274.292 109.538 274.525 cv
113.756 279.626 li
114.521 280.626 115.11 281.586 115.521 282.506 cv
115.932 283.426 116.138 284.4 116.138 285.428 cv
116.138 286.278 116.005 287.044 115.738 287.726 cv
115.472 288.408 115.091 288.987 114.597 289.464 cv
114.102 289.94 113.504 290.307 112.803 290.564 cv
112.103 290.82 111.313 290.949 110.435 290.949 cv
109.351 290.949 108.452 290.804 107.737 290.515 cv
107.022 290.225 106.452 289.842 106.027 289.365 cv
105.602 288.889 105.303 288.347 105.13 287.74 cv
104.958 287.133 104.871 286.511 104.871 285.876 cv
cp
f
124.35 290.935 mo
123.976 290.935 123.572 290.905 123.137 290.844 cv
122.703 290.783 122.269 290.655 121.834 290.459 cv
121.4 290.262 120.984 289.984 120.587 289.625 cv
120.19 289.265 119.839 288.791 119.536 288.203 cv
119.232 287.614 118.99 286.887 118.807 286.023 cv
118.625 285.159 118.534 284.129 118.534 282.934 cv
118.534 274.456 li
118.534 273.25 118.627 272.22 118.814 271.365 cv
119.001 270.511 119.249 269.791 119.557 269.207 cv
119.865 268.624 120.22 268.159 120.622 267.813 cv
121.023 267.467 121.439 267.203 121.869 267.021 cv
122.299 266.838 122.726 266.72 123.151 266.664 cv
123.576 266.607 123.971 266.58 124.336 266.58 cv
125.289 266.58 126.084 266.713 126.725 266.979 cv
127.365 267.246 127.878 267.609 128.266 268.072 cv
128.654 268.534 128.93 269.074 129.093 269.69 cv
129.256 270.307 129.338 270.961 129.338 271.652 cv
129.338 272.167 129.313 272.64 129.261 273.075 cv
129.21 273.509 129.133 273.988 129.03 274.511 cv
126.087 274.511 li
126.087 273.292 li
126.087 271.975 125.942 270.99 125.653 270.335 cv
125.363 269.682 124.938 269.354 124.377 269.354 cv
124.042 269.354 123.747 269.419 123.495 269.55 cv
123.242 269.682 123.032 269.903 122.864 270.216 cv
122.696 270.53 122.567 270.943 122.479 271.457 cv
122.39 271.97 122.346 272.61 122.346 273.376 cv
122.346 284.307 li
122.346 285.055 122.38 285.675 122.451 286.17 cv
122.521 286.666 122.635 287.063 122.794 287.362 cv
122.953 287.661 123.161 287.873 123.418 288 cv
123.674 288.125 123.985 288.188 124.35 288.188 cv
124.583 288.188 124.807 288.134 125.022 288.027 cv
125.237 287.919 125.426 287.751 125.59 287.523 cv
125.753 287.294 125.884 287.004 125.982 286.654 cv
126.08 286.304 126.129 285.89 126.129 285.414 cv
126.129 283.073 li
129.45 283.073 li
129.45 285.288 li
129.45 287.212 129.011 288.632 128.133 289.548 cv
127.255 290.463 125.994 290.926 124.35 290.935 cv
cp
f
136.415 279.15 mo
137.051 279.15 137.587 279.08 138.027 278.939 cv
138.466 278.799 138.821 278.563 139.092 278.232 cv
139.362 277.9 139.559 277.461 139.68 276.915 cv
139.801 276.368 139.863 275.693 139.863 274.89 cv
139.863 272.998 li
139.863 272.381 139.807 271.849 139.694 271.4 cv
139.582 270.952 139.393 270.583 139.126 270.293 cv
138.861 270.004 138.507 269.789 138.069 269.649 cv
137.629 269.509 137.079 269.438 136.415 269.438 cv
135.869 269.438 li
135.869 279.15 li
136.415 279.15 li
cp
132.309 266.79 mo
136.247 266.79 li
136.695 266.79 137.188 266.809 137.726 266.846 cv
138.262 266.883 138.799 266.975 139.337 267.119 cv
139.874 267.264 140.393 267.481 140.893 267.771 cv
141.392 268.061 141.836 268.458 142.224 268.962 cv
142.611 269.466 142.922 270.099 143.156 270.861 cv
143.389 271.623 143.506 272.545 143.506 273.628 cv
143.506 274.231 li
143.506 276.053 143.244 277.536 142.721 278.68 cv
142.198 279.825 141.427 280.649 140.409 281.154 cv
144.249 290.725 li
140.409 290.725 li
137.228 281.771 li
135.869 281.771 li
135.869 290.725 li
132.309 290.725 li
132.309 266.79 li
cp
f
146.995 266.79 mo
150.625 266.79 li
150.625 290.725 li
146.995 290.725 li
146.995 266.79 li
cp
f
158.528 280.775 mo
159.182 280.775 159.733 280.679 160.182 280.488 cv
160.63 280.296 160.987 279.998 161.254 279.591 cv
161.52 279.185 161.711 278.662 161.828 278.021 cv
161.945 277.382 162.003 276.613 162.003 275.717 cv
162.003 273.559 li
162.003 272.848 161.952 272.234 161.849 271.715 cv
161.746 271.197 161.562 270.77 161.296 270.434 cv
161.03 270.097 160.672 269.847 160.224 269.684 cv
159.775 269.521 159.21 269.438 158.528 269.438 cv
158.346 269.438 li
158.346 280.775 li
158.528 280.775 li
cp
154.716 266.79 mo
158.346 266.79 li
158.803 266.79 159.306 266.811 159.852 266.853 cv
160.399 266.895 160.946 266.993 161.492 267.147 cv
162.039 267.301 162.566 267.538 163.075 267.855 cv
163.584 268.172 164.035 268.604 164.427 269.151 cv
164.82 269.697 165.135 270.382 165.374 271.204 cv
165.612 272.026 165.731 273.026 165.731 274.203 cv
165.731 275.044 li
165.731 276.324 165.621 277.419 165.402 278.33 cv
165.182 279.241 164.89 280.007 164.526 280.628 cv
164.162 281.25 163.739 281.747 163.257 282.121 cv
162.776 282.495 162.277 282.777 161.758 282.968 cv
161.239 283.16 160.716 283.286 160.189 283.347 cv
159.661 283.407 159.164 283.438 158.696 283.438 cv
158.346 283.438 li
158.346 290.725 li
154.716 290.725 li
154.716 266.79 li
cp
f
170.692 269.649 mo
166.838 269.649 li
166.838 266.79 li
178.161 266.79 li
178.161 269.649 li
174.322 269.649 li
174.322 290.725 li
170.692 290.725 li
170.692 269.649 li
cp
f
280.939 118.804 mo
288.729 118.804 li
288.729 140.307 li
297.961 140.307 li
297.961 118.804 li
305.751 118.804 li
305.751 170.17 li
297.961 170.17 li
297.961 146.442 li
288.729 146.442 li
288.729 170.17 li
280.939 170.17 li
280.939 118.804 li
cp
f
319.344 124.939 mo
311.074 124.939 li
311.074 118.804 li
335.374 118.804 li
335.374 124.939 li
327.133 124.939 li
327.133 170.17 li
319.344 170.17 li
319.344 124.939 li
cp
f
340.637 118.804 mo
350.802 118.804 li
355.734 138.683 li
356.255 140.889 356.666 142.989 356.967 144.983 cv
357.268 146.979 357.559 148.858 357.839 150.622 cv
358.08 150.622 li
358.36 148.858 358.651 146.979 358.952 144.983 cv
359.253 142.989 359.663 140.889 360.186 138.683 cv
365.268 118.804 li
375.223 118.804 li
375.223 170.17 li
367.944 170.17 li
367.944 153.179 li
367.944 150.572 367.969 148.066 368.02 145.66 cv
368.069 143.254 368.135 141.043 368.215 139.029 cv
368.295 137.014 368.385 135.234 368.485 133.69 cv
368.586 132.147 368.676 130.924 368.756 130.021 cv
368.185 130.021 li
360.426 163.554 li
355.493 163.554 li
347.674 130.021 li
347.103 130.021 li
347.183 130.924 347.273 132.147 347.374 133.69 cv
347.474 135.234 347.564 137.014 347.644 139.029 cv
347.724 141.043 347.79 143.254 347.84 145.66 cv
347.89 148.066 347.915 150.572 347.915 153.179 cv
347.915 170.17 li
340.637 170.17 li
340.637 118.804 li
cp
f
384.004 118.804 mo
391.793 118.804 li
391.793 164.035 li
402.409 164.035 li
402.409 170.17 li
384.004 170.17 li
384.004 118.804 li
cp
f
406.739 159.614 mo
406.739 157.79 406.99 155.805 407.491 153.66 cv
413.566 153.66 li
413.566 157.87 li
413.566 160.316 413.922 162.076 414.634 163.148 cv
415.346 164.221 416.514 164.757 418.138 164.757 cv
419.781 164.757 420.944 164.166 421.626 162.983 cv
422.308 161.8 422.648 160.096 422.648 157.87 cv
422.648 147.946 li
422.648 146.663 422.538 145.625 422.318 144.833 cv
422.097 144.041 421.796 143.419 421.416 142.968 cv
421.034 142.517 420.589 142.212 420.077 142.051 cv
419.566 141.891 419.01 141.811 418.408 141.811 cv
417.285 141.811 416.323 142.126 415.521 142.758 cv
414.719 143.389 414.058 144.146 413.536 145.028 cv
407.792 145.028 li
407.792 118.804 li
429.866 118.804 li
429.866 125.691 li
414.288 125.691 li
414.288 138.382 li
415.13 137.419 416.188 136.668 417.461 136.126 cv
418.734 135.585 420.063 135.314 421.446 135.314 cv
424.634 135.314 426.969 136.387 428.453 138.532 cv
429.937 140.678 430.679 143.836 430.679 148.006 cv
430.679 156.727 li
430.679 159.374 430.338 161.584 429.656 163.358 cv
428.975 165.133 428.072 166.557 426.949 167.629 cv
425.826 168.702 424.528 169.469 423.055 169.93 cv
421.581 170.391 420.063 170.622 418.499 170.622 cv
416.594 170.622 414.909 170.366 413.446 169.854 cv
411.982 169.343 410.755 168.606 409.762 167.644 cv
408.77 166.682 408.018 165.524 407.507 164.17 cv
406.995 162.817 406.739 161.298 406.739 159.614 cv
cp
f
491.633 188.148 mo
492.453 188.148 493.145 188.028 493.707 187.788 cv
494.27 187.548 494.718 187.173 495.052 186.664 cv
495.386 186.153 495.626 185.497 495.772 184.695 cv
495.919 183.893 495.991 182.928 495.991 181.804 cv
495.991 179.098 li
495.991 178.207 495.928 177.437 495.798 176.787 cv
495.67 176.137 495.438 175.601 495.104 175.179 cv
494.771 174.757 494.321 174.444 493.76 174.239 cv
493.197 174.034 492.488 173.931 491.633 173.931 cv
491.405 173.931 li
491.405 188.148 li
491.633 188.148 li
cp
486.853 170.61 mo
491.405 170.61 li
491.979 170.61 492.608 170.636 493.293 170.689 cv
493.979 170.741 494.666 170.864 495.351 171.057 cv
496.036 171.251 496.698 171.547 497.336 171.946 cv
497.975 172.343 498.539 172.885 499.032 173.57 cv
499.523 174.256 499.918 175.115 500.219 176.146 cv
500.517 177.176 500.666 178.43 500.666 179.906 cv
500.666 180.96 li
500.666 182.565 500.528 183.939 500.254 185.081 cv
499.978 186.224 499.611 187.185 499.155 187.964 cv
498.698 188.744 498.168 189.367 497.564 189.835 cv
496.961 190.304 496.335 190.658 495.684 190.898 cv
495.033 191.139 494.378 191.297 493.716 191.373 cv
493.054 191.449 492.43 191.487 491.845 191.487 cv
491.405 191.487 li
491.405 200.625 li
486.853 200.625 li
486.853 170.61 li
cp
f
504.11 170.61 mo
508.661 170.61 li
508.661 183.175 li
514.057 183.175 li
514.057 170.61 li
518.608 170.61 li
518.608 200.625 li
514.057 200.625 li
514.057 186.76 li
508.661 186.76 li
508.661 200.625 li
504.11 200.625 li
504.11 170.61 li
cp
f
528.555 188.148 mo
529.376 188.148 530.067 188.028 530.63 187.788 cv
531.192 187.548 531.64 187.173 531.975 186.664 cv
532.308 186.153 532.548 185.497 532.694 184.695 cv
532.841 183.893 532.913 182.928 532.913 181.804 cv
532.913 179.098 li
532.913 178.207 532.85 177.437 532.721 176.787 cv
532.591 176.137 532.36 175.601 532.026 175.179 cv
531.693 174.757 531.245 174.444 530.682 174.239 cv
530.12 174.034 529.411 173.931 528.555 173.931 cv
528.327 173.931 li
528.327 188.148 li
528.555 188.148 li
cp
523.775 170.61 mo
528.327 170.61 li
528.9 170.61 529.53 170.636 530.216 170.689 cv
530.902 170.741 531.587 170.864 532.273 171.057 cv
532.958 171.251 533.619 171.547 534.258 171.946 cv
534.896 172.343 535.462 172.885 535.954 173.57 cv
536.446 174.256 536.841 175.115 537.142 176.146 cv
537.439 177.176 537.589 178.43 537.589 179.906 cv
537.589 180.96 li
537.589 182.565 537.45 183.939 537.176 185.081 cv
536.9 186.224 536.534 187.185 536.078 187.964 cv
535.62 188.744 535.09 189.367 534.486 189.835 cv
533.884 190.304 533.257 190.658 532.606 190.898 cv
531.955 191.139 531.3 191.297 530.639 191.373 cv
529.976 191.449 529.353 191.487 528.767 191.487 cv
528.327 191.487 li
528.327 200.625 li
523.775 200.625 li
523.775 170.61 li
cp
f
573.144 325.987 mo
572.508 325.987 571.821 325.936 571.082 325.833 cv
570.345 325.729 569.604 325.515 568.866 325.18 cv
568.129 324.845 567.422 324.372 566.746 323.762 cv
566.072 323.152 565.476 322.344 564.96 321.343 cv
564.443 320.343 564.031 319.109 563.722 317.64 cv
563.412 316.17 563.257 314.418 563.257 312.386 cv
563.257 297.973 li
563.257 295.923 563.416 294.175 563.733 292.723 cv
564.05 291.266 564.472 290.046 564.996 289.054 cv
565.52 288.062 566.123 287.271 566.807 286.682 cv
567.488 286.094 568.195 285.647 568.927 285.338 cv
569.657 285.028 570.384 284.822 571.105 284.728 cv
571.829 284.634 572.5 284.586 573.12 284.586 cv
574.739 284.586 576.093 284.813 577.181 285.265 cv
578.269 285.716 579.142 286.339 579.801 287.125 cv
580.46 287.911 580.93 288.827 581.207 289.875 cv
581.484 290.923 581.623 292.036 581.623 293.208 cv
581.623 294.085 581.58 294.888 581.492 295.627 cv
581.405 296.366 581.274 297.182 581.099 298.071 cv
576.097 298.071 li
576.097 295.996 li
576.097 293.758 575.852 292.083 575.358 290.97 cv
574.866 289.857 574.144 289.304 573.191 289.304 cv
572.619 289.304 572.119 289.415 571.69 289.638 cv
571.26 289.857 570.904 290.236 570.618 290.769 cv
570.331 291.301 570.114 292.001 569.964 292.877 cv
569.812 293.749 569.736 294.836 569.736 296.138 cv
569.736 314.723 li
569.736 315.99 569.795 317.047 569.914 317.889 cv
570.034 318.731 570.229 319.405 570.499 319.913 cv
570.769 320.424 571.122 320.785 571.56 321 cv
571.995 321.214 572.523 321.321 573.144 321.321 cv
573.539 321.321 573.921 321.227 574.286 321.047 cv
574.651 320.862 574.973 320.579 575.251 320.188 cv
575.528 319.801 575.752 319.307 575.918 318.709 cv
576.085 318.117 576.169 317.412 576.169 316.604 cv
576.169 312.626 li
581.813 312.626 li
581.813 316.39 li
581.813 319.659 581.067 322.073 579.574 323.629 cv
578.081 325.188 575.938 325.975 573.144 325.987 cv
cp
f
585.102 317.391 mo
585.102 316.515 585.153 315.711 585.257 314.972 cv
585.359 314.233 585.515 313.434 585.722 312.58 cv
590.509 312.58 li
590.509 314.555 li
590.509 315.651 590.576 316.618 590.712 317.46 cv
590.847 318.302 591.069 319.015 591.379 319.595 cv
591.688 320.175 592.103 320.608 592.617 320.905 cv
593.134 321.197 593.765 321.343 594.513 321.343 cv
595.687 321.343 596.584 321.021 597.204 320.381 cv
597.823 319.737 598.132 318.796 598.132 317.554 cv
598.132 316.922 598.089 316.338 598.002 315.806 cv
597.914 315.273 597.763 314.744 597.55 314.22 cv
597.335 313.696 597.045 313.146 596.68 312.566 cv
596.313 311.986 595.847 311.338 595.273 310.625 cv
588.842 302.978 li
587.698 301.517 586.816 300.043 586.198 298.557 cv
585.579 297.075 585.269 295.489 585.269 293.806 cv
585.269 292.456 585.479 291.214 585.899 290.089 cv
586.32 288.963 586.928 287.988 587.723 287.173 cv
588.518 286.352 589.497 285.716 590.665 285.265 cv
591.831 284.813 593.153 284.586 594.632 284.586 cv
596.425 284.586 597.922 284.84 599.121 285.347 cv
600.32 285.857 601.277 286.523 601.992 287.348 cv
602.706 288.178 603.21 289.101 603.505 290.124 cv
603.798 291.15 603.945 292.178 603.945 293.208 cv
603.945 294.085 603.877 294.888 603.743 295.627 cv
603.608 296.366 603.454 297.182 603.278 298.071 cv
598.514 298.071 li
598.514 296.138 li
598.514 293.981 598.204 292.323 597.585 291.172 cv
596.965 290.021 595.956 289.445 594.56 289.445 cv
593.4 289.445 592.534 289.767 591.962 290.411 cv
591.391 291.056 591.104 291.915 591.104 292.994 cv
591.104 293.569 591.147 294.085 591.235 294.545 cv
591.323 295.004 591.451 295.429 591.617 295.82 cv
591.783 296.207 591.987 296.585 592.225 296.951 cv
592.463 297.315 592.731 297.697 593.036 298.093 cv
600.205 306.766 li
601.507 308.463 602.509 310.097 603.207 311.661 cv
603.905 313.224 604.256 314.882 604.256 316.626 cv
604.256 318.074 604.029 319.376 603.576 320.536 cv
603.123 321.691 602.476 322.679 601.635 323.487 cv
600.793 324.299 599.776 324.922 598.586 325.356 cv
597.395 325.794 596.052 326.013 594.56 326.013 cv
592.717 326.013 591.188 325.769 589.974 325.274 cv
588.759 324.784 587.789 324.131 587.067 323.319 cv
586.344 322.512 585.836 321.588 585.543 320.557 cv
585.248 319.526 585.102 318.469 585.102 317.391 cv
cp
f
607.875 317.391 mo
607.875 316.515 607.927 315.711 608.03 314.972 cv
608.134 314.233 608.288 313.434 608.494 312.58 cv
613.282 312.58 li
613.282 314.555 li
613.282 315.651 613.351 316.618 613.486 317.46 cv
613.62 318.302 613.844 319.015 614.153 319.595 cv
614.462 320.175 614.875 320.608 615.391 320.905 cv
615.907 321.197 616.538 321.343 617.285 321.343 cv
618.461 321.343 619.357 321.021 619.977 320.381 cv
620.597 319.737 620.906 318.796 620.906 317.554 cv
620.906 316.922 620.862 316.338 620.774 315.806 cv
620.688 315.273 620.537 314.744 620.323 314.22 cv
620.108 313.696 619.817 313.146 619.453 312.566 cv
619.088 311.986 618.619 311.338 618.048 310.625 cv
611.616 302.978 li
610.472 301.517 609.59 300.043 608.972 298.557 cv
608.352 297.075 608.042 295.489 608.042 293.806 cv
608.042 292.456 608.253 291.214 608.673 290.089 cv
609.095 288.963 609.702 287.988 610.495 287.173 cv
611.29 286.352 612.271 285.716 613.438 285.265 cv
614.604 284.813 615.927 284.586 617.404 284.586 cv
619.198 284.586 620.696 284.84 621.896 285.347 cv
623.095 285.857 624.051 286.523 624.765 287.348 cv
625.48 288.178 625.983 289.101 626.278 290.124 cv
626.572 291.15 626.719 292.178 626.719 293.208 cv
626.719 294.085 626.651 294.888 626.517 295.627 cv
626.382 296.366 626.227 297.182 626.052 298.071 cv
621.287 298.071 li
621.287 296.138 li
621.287 293.981 620.979 292.323 620.358 291.172 cv
619.739 290.021 618.73 289.445 617.333 289.445 cv
616.174 289.445 615.309 289.767 614.736 290.411 cv
614.165 291.056 613.879 291.915 613.879 292.994 cv
613.879 293.569 613.922 294.085 614.01 294.545 cv
614.097 295.004 614.225 295.429 614.392 295.82 cv
614.558 296.207 614.761 296.585 614.998 296.951 cv
615.236 297.315 615.507 297.697 615.809 298.093 cv
622.979 306.766 li
624.28 308.463 625.281 310.097 625.981 311.661 cv
626.679 313.224 627.029 314.882 627.029 316.626 cv
627.029 318.074 626.803 319.376 626.349 320.536 cv
625.896 321.691 625.249 322.679 624.409 323.487 cv
623.566 324.299 622.551 324.922 621.359 325.356 cv
620.168 325.794 618.826 326.013 617.333 326.013 cv
615.491 326.013 613.963 325.769 612.746 325.274 cv
611.532 324.784 610.563 324.131 609.84 323.319 cv
609.117 322.512 608.609 321.588 608.316 320.557 cv
608.022 319.526 607.875 318.469 607.875 317.391 cv
cp
f
631.127 317.344 mo
631.127 316.66 631.174 315.909 631.269 315.093 cv
631.365 314.271 631.516 313.425 631.723 312.554 cv
636.534 312.554 li
636.534 314.625 li
636.534 315.896 636.642 316.961 636.855 317.816 cv
637.07 318.675 637.36 319.367 637.726 319.892 cv
638.09 320.415 638.528 320.789 639.035 321.008 cv
639.543 321.231 640.099 321.343 640.704 321.343 cv
641.29 321.343 641.822 321.262 642.3 321.095 cv
642.775 320.927 643.18 320.651 643.515 320.273 cv
643.847 319.892 644.102 319.402 644.277 318.809 cv
644.45 318.211 644.539 317.486 644.539 316.626 cv
644.539 312.124 li
644.539 311.269 644.463 310.504 644.313 309.838 cv
644.161 309.172 643.919 308.61 643.585 308.158 cv
643.252 307.707 642.815 307.359 642.274 307.124 cv
641.736 306.882 641.069 306.766 640.274 306.766 cv
637.678 306.766 li
637.678 302.359 li
640.274 302.359 li
640.782 302.359 641.259 302.272 641.703 302.105 cv
642.148 301.942 642.537 301.672 642.87 301.298 cv
643.205 300.924 643.468 300.443 643.657 299.854 cv
643.847 299.27 643.942 298.552 643.942 297.71 cv
643.942 293.449 li
643.942 291.941 643.648 290.833 643.061 290.124 cv
642.474 289.419 641.601 289.066 640.441 289.066 cv
639.154 289.066 638.166 289.643 637.476 290.794 cv
636.784 291.945 636.439 293.6 636.439 295.76 cv
636.439 298.071 li
631.674 298.071 li
631.5 297.276 631.35 296.486 631.222 295.7 cv
631.095 294.913 631.03 294.085 631.03 293.208 cv
631.03 292.178 631.222 291.15 631.603 290.124 cv
631.985 289.101 632.56 288.178 633.331 287.348 cv
634.101 286.523 635.077 285.857 636.261 285.347 cv
637.442 284.84 638.838 284.586 640.441 284.586 cv
642.172 284.586 643.657 284.783 644.896 285.183 cv
646.135 285.578 647.146 286.163 647.933 286.932 cv
648.719 287.705 649.299 288.646 649.673 289.767 cv
650.045 290.889 650.232 292.16 650.232 293.59 cv
650.232 296.091 li
650.232 297.251 650.085 298.282 649.791 299.175 cv
649.498 300.073 649.116 300.855 648.648 301.525 cv
648.179 302.191 647.647 302.759 647.052 303.227 cv
646.456 303.695 645.85 304.073 645.229 304.356 cv
645.229 304.55 li
646.023 304.82 646.762 305.173 647.445 305.611 cv
648.127 306.045 648.719 306.608 649.22 307.291 cv
649.72 307.974 650.113 308.798 650.398 309.765 cv
650.685 310.736 650.827 311.888 650.827 313.219 cv
650.827 315.913 li
650.827 317.786 650.558 319.367 650.018 320.651 cv
649.478 321.94 648.746 322.976 647.826 323.762 cv
646.905 324.548 645.828 325.115 644.598 325.463 cv
643.368 325.816 642.068 325.987 640.704 325.987 cv
637.59 325.987 635.216 325.235 633.581 323.727 cv
631.943 322.215 631.127 320.089 631.127 317.344 cv
cp
f
205.396 70.6802 mo
205.396 69.9849 205.534 69.4858 205.81 69.1841 cv
206.086 68.8823 206.46 68.7314 206.933 68.7314 cv
207.425 68.7314 207.805 68.8921 208.074 69.2134 cv
208.343 69.5352 208.478 70.0244 208.478 70.6802 cv
208.478 71.2842 208.342 71.752 208.069 72.083 cv
207.797 72.4146 207.414 72.5801 206.922 72.5801 cv
206.456 72.5801 206.086 72.4194 205.81 72.0977 cv
205.534 71.7764 205.396 71.3037 205.396 70.6802 cv
cp
f
213.872 72.5898 mo
212.73 72.5898 211.858 72.1211 211.259 71.1821 cv
210.658 70.2441 210.357 68.8135 210.357 66.8906 cv
210.357 64.3311 li
210.357 63.4712 210.42 62.7349 210.545 62.1211 cv
210.669 61.5078 210.835 60.9927 211.042 60.5757 cv
211.249 60.1592 211.484 59.8291 211.751 59.5864 cv
212.017 59.3438 212.29 59.1582 212.572 59.0303 cv
212.854 58.9023 213.134 58.8203 213.409 58.7842 cv
213.685 58.748 213.938 58.73 214.167 58.73 cv
214.627 58.73 215.047 58.7905 215.428 58.9121 cv
215.808 59.0337 216.136 59.2173 216.412 59.4634 cv
216.688 59.7095 216.9 60.0195 217.052 60.3936 cv
217.202 60.7676 217.278 61.2075 217.278 61.7124 cv
217.278 62.0278 217.263 62.2983 217.233 62.5249 cv
217.204 62.751 217.163 62.9692 217.11 63.1792 cv
215.122 63.1792 li
215.122 62.7266 li
215.122 62.0439 215.042 61.5107 214.881 61.127 cv
214.72 60.7432 214.456 60.5513 214.089 60.5513 cv
213.885 60.5513 213.708 60.5986 213.557 60.6938 cv
213.406 60.7891 213.279 60.9512 213.178 61.1812 cv
213.076 61.4106 213.001 61.7192 212.951 62.1064 cv
212.902 62.4937 212.878 62.979 212.878 63.5635 cv
212.878 67.4121 li
212.878 68.0029 212.897 68.5049 212.937 68.9185 cv
212.977 69.3315 213.045 69.668 213.144 69.9272 cv
213.242 70.1865 213.373 70.375 213.537 70.4932 cv
213.701 70.6113 213.904 70.6704 214.147 70.6704 cv
214.272 70.6704 214.394 70.6396 214.512 70.5771 cv
214.63 70.5146 214.733 70.4111 214.822 70.2671 cv
214.91 70.1226 214.982 69.9307 215.038 69.6909 cv
215.094 69.4517 215.122 69.1548 215.122 68.8003 cv
215.122 68.377 li
217.268 68.377 li
217.268 68.8984 li
217.268 70.1851 216.984 71.1216 216.417 71.709 cv
215.849 72.2964 215.001 72.5898 213.872 72.5898 cv
cp
f
222.722 70.6704 mo
222.944 70.6704 223.134 70.6133 223.288 70.498 cv
223.442 70.3833 223.566 70.1948 223.662 69.9321 cv
223.757 69.6699 223.826 69.3237 223.868 68.8936 cv
223.911 68.4639 223.933 67.9307 223.933 67.2939 cv
223.933 63.957 li
223.933 63.3203 223.911 62.7856 223.868 62.3525 cv
223.826 61.9194 223.757 61.5698 223.662 61.3042 cv
223.566 61.0381 223.442 60.8462 223.288 60.728 cv
223.134 60.6099 222.944 60.5513 222.722 60.5513 cv
222.485 60.5513 222.287 60.6099 222.126 60.728 cv
221.966 60.8462 221.832 61.0381 221.728 61.3042 cv
221.622 61.5698 221.547 61.9194 221.501 62.3525 cv
221.455 62.7856 221.433 63.3203 221.433 63.957 cv
221.433 67.2939 li
221.433 67.9307 221.455 68.4639 221.501 68.8936 cv
221.547 69.3237 221.622 69.6699 221.728 69.9321 cv
221.832 70.1948 221.966 70.3833 222.126 70.498 cv
222.287 70.6133 222.485 70.6704 222.722 70.6704 cv
cp
222.702 72.5898 mo
222.413 72.5898 222.119 72.5669 221.821 72.521 cv
221.522 72.4751 221.233 72.3799 220.955 72.2358 cv
220.676 72.0913 220.413 71.8848 220.167 71.6157 cv
219.921 71.3467 219.706 70.9922 219.522 70.5522 cv
219.339 70.1128 219.194 69.5713 219.09 68.9282 cv
218.984 68.2852 218.932 67.5171 218.932 66.6245 cv
218.932 64.4985 li
218.932 63.6191 218.986 62.8662 219.095 62.2393 cv
219.202 61.6128 219.351 61.0859 219.537 60.6592 cv
219.725 60.2329 219.942 59.8931 220.192 59.6406 cv
220.441 59.3877 220.705 59.1943 220.984 59.0596 cv
221.264 58.9253 221.551 58.8369 221.846 58.7939 cv
222.141 58.7515 222.43 58.73 222.712 58.73 cv
222.98 58.73 223.26 58.7495 223.549 58.7891 cv
223.837 58.8281 224.119 58.9121 224.396 59.04 cv
224.671 59.168 224.932 59.3584 225.178 59.6108 cv
225.424 59.8638 225.641 60.2031 225.827 60.6299 cv
226.015 61.0566 226.162 61.5864 226.271 62.2197 cv
226.379 62.853 226.433 63.6123 226.433 64.4985 cv
226.433 66.6245 li
226.433 67.5044 226.377 68.2622 226.266 68.8984 cv
226.154 69.5352 226.003 70.0732 225.813 70.5132 cv
225.622 70.9526 225.402 71.3086 225.153 71.5811 cv
224.903 71.8535 224.642 72.0649 224.365 72.2158 cv
224.09 72.3672 223.81 72.4668 223.524 72.5161 cv
223.238 72.5654 222.965 72.5898 222.702 72.5898 cv
cp
f
228.638 58.8872 mo
230.567 58.8872 li
230.784 60.3345 li
230.784 60.3442 li
230.98 60.0361 231.19 59.7783 231.414 59.5718 cv
231.637 59.3647 231.868 59.1992 232.107 59.0742 cv
232.348 58.9497 232.594 58.8613 232.846 58.8086 cv
233.099 58.7563 233.35 58.73 233.6 58.73 cv
234.131 58.73 234.58 58.8579 234.947 59.1138 cv
235.315 59.3696 235.594 59.7539 235.784 60.2656 cv
235.981 59.9702 236.189 59.7241 236.409 59.5273 cv
236.629 59.3306 236.857 59.1729 237.094 59.0547 cv
237.33 58.9365 237.569 58.853 237.813 58.8037 cv
238.055 58.7544 238.301 58.73 238.551 58.73 cv
239.338 58.73 239.946 59.0073 240.377 59.5615 cv
240.807 60.1162 241.021 60.9482 241.021 62.0571 cv
241.021 72.4424 li
238.531 72.4424 li
238.531 62.1455 li
238.531 61.8506 238.508 61.6011 238.462 61.3975 cv
238.416 61.1943 238.347 61.0303 238.255 60.9053 cv
238.163 60.7808 238.045 60.6904 237.901 60.6348 cv
237.757 60.5791 237.582 60.5513 237.379 60.5513 cv
237.149 60.5513 236.92 60.6348 236.69 60.8022 cv
236.46 60.9692 236.25 61.2007 236.061 61.4961 cv
236.07 61.6733 li
236.07 61.8506 li
236.07 72.4424 li
233.579 72.4424 li
233.579 62.1455 li
233.579 61.8506 233.557 61.6011 233.511 61.3975 cv
233.465 61.1943 233.396 61.0303 233.304 60.9053 cv
233.212 60.7808 233.094 60.6904 232.949 60.6348 cv
232.805 60.5791 232.631 60.5513 232.428 60.5513 cv
232.204 60.5513 231.979 60.6333 231.748 60.7974 cv
231.519 60.9614 231.312 61.1875 231.128 61.4766 cv
231.128 72.4424 li
228.638 72.4424 li
228.638 58.8872 li
cp
f
122.492 98.3818 mo
122.492 97.6211 122.428 96.9883 122.302 96.4819 cv
122.175 95.9751 121.985 95.5669 121.732 95.2563 cv
121.478 94.9463 121.169 94.7217 120.802 94.5825 cv
120.434 94.4429 120.01 94.3608 119.529 94.3354 cv
118.54 94.2778 li
118.54 90.877 li
119.509 90.8208 li
119.991 90.7949 120.415 90.7134 120.783 90.5737 cv
121.15 90.4341 121.459 90.21 121.714 89.8989 cv
121.966 89.5889 122.157 89.1836 122.283 88.6836 cv
122.409 88.1831 122.473 87.5527 122.473 86.793 cv
122.473 78.8335 li
122.473 77.5293 122.641 76.4146 122.977 75.4902 cv
123.312 74.5654 123.768 73.8091 124.345 73.2197 cv
124.921 72.6309 125.588 72.2031 126.348 71.9375 cv
127.107 71.6719 127.918 71.5381 128.781 71.5381 cv
129.185 71.5381 129.639 71.583 130.138 71.6719 cv
130.64 71.7603 131.135 71.8799 131.631 72.0327 cv
131.631 74.9575 li
130.907 74.9575 li
130.123 74.9575 129.467 75.0029 128.941 75.0903 cv
128.416 75.1802 127.988 75.3252 127.66 75.5278 cv
127.33 75.7305 127.096 76 126.957 76.3354 cv
126.817 76.6709 126.748 77.0854 126.748 77.5791 cv
126.748 85.1978 li
126.748 86.1343 126.701 86.9805 126.604 87.7334 cv
126.51 88.4873 126.346 89.1611 126.111 89.7568 cv
125.877 90.3525 125.561 90.8647 125.161 91.2954 cv
124.763 91.7261 124.266 92.0747 123.67 92.3408 cv
123.67 92.8345 li
124.252 93.1001 124.741 93.4487 125.132 93.8794 cv
125.524 94.3101 125.841 94.8198 126.083 95.4087 cv
126.324 95.9976 126.493 96.6714 126.595 97.4321 cv
126.697 98.1914 126.748 99.0337 126.748 99.9585 cv
126.748 107.652 li
126.748 108.146 126.817 108.561 126.957 108.896 cv
127.096 109.231 127.33 109.505 127.66 109.713 cv
127.988 109.922 128.416 110.071 128.941 110.16 cv
129.467 110.249 130.123 110.293 130.907 110.293 cv
131.631 110.293 li
131.631 113.2 li
131.135 113.364 130.64 113.491 130.138 113.58 cv
129.639 113.668 129.185 113.712 128.781 113.712 cv
127.918 113.712 127.107 113.58 126.348 113.314 cv
125.588 113.047 124.923 112.62 124.354 112.031 cv
123.783 111.442 123.331 110.686 122.995 109.761 cv
122.66 108.837 122.492 107.715 122.492 106.398 cv
122.492 98.3818 li
cp
.039216 .090196 1 0 cmyk
f
145.65 110.293 mo
146.423 110.293 147.075 110.249 147.607 110.16 cv
148.138 110.071 148.57 109.922 148.898 109.713 cv
149.228 109.505 149.461 109.231 149.601 108.896 cv
149.74 108.561 149.81 108.146 149.81 107.652 cv
149.81 99.9585 li
149.81 99.0337 149.861 98.1914 149.962 97.4321 cv
150.064 96.6714 150.232 95.9976 150.466 95.4087 cv
150.7 94.8198 151.014 94.3101 151.406 93.8794 cv
151.798 93.4487 152.287 93.1001 152.869 92.8345 cv
152.869 92.3408 li
152.273 92.0747 151.779 91.7261 151.387 91.2954 cv
150.996 90.8647 150.681 90.3525 150.447 89.7568 cv
150.213 89.1611 150.047 88.4873 149.953 87.7334 cv
149.859 86.9805 149.81 86.1343 149.81 85.1978 cv
149.81 77.5791 li
149.81 77.0854 149.74 76.6709 149.601 76.3354 cv
149.461 76 149.228 75.7305 148.898 75.5278 cv
148.57 75.3252 148.138 75.1802 147.607 75.0903 cv
147.075 75.0029 146.423 74.9575 145.65 74.9575 cv
144.929 74.9575 li
144.929 72.0327 li
145.422 71.8799 145.917 71.7603 146.41 71.6719 cv
146.904 71.583 147.36 71.5381 147.778 71.5381 cv
148.626 71.5381 149.433 71.6719 150.2 71.9375 cv
150.965 72.2031 151.638 72.6309 152.213 73.2197 cv
152.79 73.8091 153.246 74.5654 153.581 75.4902 cv
153.917 76.4146 154.084 77.5293 154.084 78.8335 cv
154.084 86.793 li
154.084 87.5527 154.148 88.1831 154.275 88.6836 cv
154.401 89.1836 154.591 89.5889 154.846 89.8989 cv
155.098 90.21 155.407 90.4341 155.775 90.5737 cv
156.143 90.7134 156.566 90.7949 157.049 90.8208 cv
158.018 90.877 li
158.018 94.2778 li
157.03 94.3354 li
156.547 94.3608 156.124 94.4429 155.756 94.5825 cv
155.389 94.7217 155.08 94.9463 154.825 95.2563 cv
154.572 95.5669 154.382 95.9751 154.256 96.4819 cv
154.129 96.9883 154.065 97.6211 154.065 98.3818 cv
154.065 106.398 li
154.065 107.715 153.898 108.837 153.563 109.761 cv
153.227 110.686 152.774 111.442 152.204 112.031 cv
151.634 112.62 150.965 113.047 150.2 113.314 cv
149.433 113.58 148.626 113.712 147.778 113.712 cv
147.36 113.712 146.904 113.668 146.41 113.58 cv
145.917 113.491 145.422 113.364 144.929 113.2 cv
144.929 110.293 li
145.65 110.293 li
cp
f
262.548 309.915 mo
262.548 309.305 262.497 308.797 262.396 308.391 cv
262.294 307.985 262.142 307.658 261.939 307.409 cv
261.735 307.16 261.487 306.98 261.193 306.869 cv
260.898 306.757 260.559 306.691 260.173 306.67 cv
259.38 306.625 li
259.38 303.898 li
260.157 303.853 li
260.543 303.833 260.883 303.767 261.178 303.655 cv
261.473 303.543 261.72 303.363 261.924 303.114 cv
262.126 302.866 262.279 302.541 262.38 302.14 cv
262.481 301.739 262.533 301.233 262.533 300.624 cv
262.533 294.244 li
262.533 293.198 262.667 292.304 262.937 291.563 cv
263.206 290.822 263.571 290.215 264.033 289.743 cv
264.496 289.271 265.03 288.928 265.64 288.715 cv
266.248 288.502 266.898 288.395 267.59 288.395 cv
267.913 288.395 268.277 288.431 268.678 288.502 cv
269.08 288.573 269.477 288.669 269.875 288.792 cv
269.875 291.136 li
269.294 291.136 li
268.666 291.136 268.14 291.172 267.718 291.243 cv
267.297 291.315 266.954 291.431 266.691 291.593 cv
266.427 291.756 266.239 291.972 266.127 292.241 cv
266.016 292.51 265.959 292.842 265.959 293.238 cv
265.959 299.345 li
265.959 300.096 265.922 300.774 265.845 301.378 cv
265.77 301.982 265.638 302.522 265.449 303 cv
265.262 303.478 265.008 303.888 264.688 304.233 cv
264.369 304.579 263.97 304.858 263.492 305.072 cv
263.492 305.467 li
263.959 305.68 264.351 305.96 264.665 306.305 cv
264.979 306.65 265.233 307.059 265.426 307.531 cv
265.62 308.003 265.756 308.543 265.837 309.153 cv
265.919 309.762 265.959 310.437 265.959 311.178 cv
265.959 317.346 li
265.959 317.742 266.016 318.074 266.127 318.343 cv
266.239 318.612 266.427 318.832 266.691 318.999 cv
266.954 319.166 267.297 319.285 267.718 319.356 cv
268.14 319.427 268.666 319.463 269.294 319.463 cv
269.875 319.463 li
269.875 321.793 li
269.477 321.925 269.08 322.026 268.678 322.098 cv
268.277 322.168 267.913 322.204 267.59 322.204 cv
266.898 322.204 266.248 322.098 265.64 321.885 cv
265.03 321.671 264.497 321.329 264.041 320.856 cv
263.583 320.384 263.22 319.778 262.951 319.037 cv
262.683 318.296 262.548 317.396 262.548 316.341 cv
262.548 309.915 li
cp
f
281.113 319.463 mo
281.733 319.463 282.255 319.427 282.682 319.356 cv
283.107 319.285 283.454 319.166 283.717 318.999 cv
283.981 318.832 284.168 318.612 284.28 318.343 cv
284.392 318.074 284.448 317.742 284.448 317.346 cv
284.448 311.178 li
284.448 310.437 284.488 309.762 284.57 309.153 cv
284.652 308.543 284.786 308.003 284.974 307.531 cv
285.161 307.059 285.413 306.65 285.728 306.305 cv
286.042 305.96 286.433 305.68 286.899 305.467 cv
286.899 305.072 li
286.422 304.858 286.026 304.579 285.712 304.233 cv
285.398 303.888 285.146 303.478 284.958 303 cv
284.771 302.522 284.638 301.982 284.563 301.378 cv
284.487 300.774 284.448 300.096 284.448 299.345 cv
284.448 293.238 li
284.448 292.842 284.392 292.51 284.28 292.241 cv
284.168 291.972 283.981 291.756 283.717 291.593 cv
283.454 291.431 283.107 291.315 282.682 291.243 cv
282.255 291.172 281.733 291.136 281.113 291.136 cv
280.535 291.136 li
280.535 288.792 li
280.93 288.669 281.327 288.573 281.722 288.502 cv
282.118 288.431 282.483 288.395 282.819 288.395 cv
283.499 288.395 284.146 288.502 284.761 288.715 cv
285.374 288.928 285.913 289.271 286.374 289.743 cv
286.836 290.215 287.202 290.822 287.471 291.563 cv
287.74 292.304 287.875 293.198 287.875 294.244 cv
287.875 300.624 li
287.875 301.233 287.926 301.739 288.027 302.14 cv
288.128 302.541 288.281 302.866 288.484 303.114 cv
288.687 303.363 288.935 303.543 289.229 303.655 cv
289.524 303.767 289.864 303.833 290.251 303.853 cv
291.027 303.898 li
291.027 306.625 li
290.235 306.67 li
289.849 306.691 289.509 306.757 289.214 306.869 cv
288.92 306.98 288.672 307.16 288.468 307.409 cv
288.266 307.658 288.113 307.985 288.012 308.391 cv
287.91 308.797 287.859 309.305 287.859 309.915 cv
287.859 316.341 li
287.859 317.396 287.725 318.296 287.456 319.037 cv
287.187 319.778 286.824 320.384 286.367 320.856 cv
285.91 321.329 285.374 321.671 284.761 321.885 cv
284.146 322.098 283.499 322.204 282.819 322.204 cv
282.483 322.204 282.118 322.168 281.722 322.098 cv
281.327 322.026 280.93 321.925 280.535 321.793 cv
280.535 319.463 li
281.113 319.463 li
cp
f
534.469 107.978 mo
534.469 107.369 534.417 106.862 534.315 106.456 cv
534.214 106.05 534.062 105.723 533.86 105.475 cv
533.655 105.226 533.407 105.046 533.113 104.935 cv
532.819 104.823 532.479 104.757 532.095 104.737 cv
531.302 104.691 li
531.302 101.966 li
532.078 101.921 li
532.464 101.901 532.804 101.835 533.099 101.724 cv
533.394 101.612 533.641 101.432 533.844 101.183 cv
534.047 100.935 534.199 100.61 534.3 100.209 cv
534.401 99.8086 534.453 99.3037 534.453 98.6953 cv
534.453 92.3193 li
534.453 91.2749 534.587 90.3818 534.856 89.6411 cv
535.125 88.9004 535.49 88.2949 535.951 87.8228 cv
536.414 87.3511 536.948 87.0083 537.557 86.7954 cv
538.165 86.5825 538.814 86.4756 539.506 86.4756 cv
539.828 86.4756 540.193 86.5117 540.593 86.5825 cv
540.994 86.6533 541.392 86.7495 541.789 86.8716 cv
541.789 89.2148 li
541.208 89.2148 li
540.581 89.2148 540.056 89.251 539.635 89.3208 cv
539.213 89.3931 538.87 89.5093 538.607 89.6714 cv
538.344 89.834 538.156 90.0498 538.045 90.3184 cv
537.933 90.5869 537.877 90.9189 537.877 91.3145 cv
537.877 97.4175 li
537.877 98.1675 537.839 98.8452 537.762 99.4482 cv
537.687 100.052 537.556 100.592 537.366 101.069 cv
537.18 101.546 536.927 101.957 536.605 102.302 cv
536.287 102.646 535.889 102.926 535.412 103.139 cv
535.412 103.535 li
535.878 103.747 536.27 104.026 536.583 104.372 cv
536.896 104.716 537.15 105.125 537.344 105.597 cv
537.537 106.068 537.673 106.608 537.755 107.217 cv
537.836 107.826 537.877 108.5 537.877 109.241 cv
537.877 115.404 li
537.877 115.799 537.933 116.131 538.045 116.4 cv
538.156 116.669 538.344 116.888 538.607 117.055 cv
538.87 117.222 539.213 117.342 539.635 117.413 cv
540.056 117.484 540.581 117.519 541.208 117.519 cv
541.789 117.519 li
541.789 119.848 li
541.392 119.979 540.994 120.081 540.593 120.152 cv
540.193 120.223 539.828 120.258 539.506 120.258 cv
538.814 120.258 538.165 120.152 537.557 119.939 cv
536.948 119.725 536.415 119.383 535.959 118.912 cv
535.503 118.44 535.14 117.833 534.87 117.093 cv
534.603 116.353 534.469 115.455 534.469 114.399 cv
534.469 107.978 li
cp
.580392 .023529 .286275 0 cmyk
f
553.019 117.519 mo
553.638 117.519 554.159 117.484 554.586 117.413 cv
555.011 117.342 555.356 117.222 555.62 117.055 cv
555.884 116.888 556.071 116.669 556.183 116.4 cv
556.295 116.131 556.351 115.799 556.351 115.404 cv
556.351 109.241 li
556.351 108.5 556.391 107.826 556.473 107.217 cv
556.555 106.608 556.688 106.068 556.875 105.597 cv
557.063 105.125 557.314 104.716 557.629 104.372 cv
557.943 104.026 558.334 103.747 558.801 103.535 cv
558.801 103.139 li
558.324 102.926 557.928 102.646 557.613 102.302 cv
557.3 101.957 557.048 101.546 556.86 101.069 cv
556.674 100.592 556.54 100.052 556.466 99.4482 cv
556.39 98.8452 556.351 98.1675 556.351 97.4175 cv
556.351 91.3145 li
556.351 90.9189 556.295 90.5869 556.183 90.3184 cv
556.071 90.0498 555.884 89.834 555.62 89.6714 cv
555.356 89.5093 555.011 89.3931 554.586 89.3208 cv
554.159 89.251 553.638 89.2148 553.019 89.2148 cv
552.439 89.2148 li
552.439 86.8716 li
552.836 86.7495 553.231 86.6533 553.627 86.5825 cv
554.022 86.5117 554.388 86.4756 554.723 86.4756 cv
555.402 86.4756 556.049 86.5825 556.662 86.7954 cv
557.275 87.0083 557.814 87.3511 558.275 87.8228 cv
558.737 88.2949 559.103 88.9004 559.37 89.6411 cv
559.64 90.3818 559.774 91.2749 559.774 92.3193 cv
559.774 98.6953 li
559.774 99.3037 559.826 99.8086 559.927 100.209 cv
560.027 100.61 560.181 100.935 560.385 101.183 cv
560.586 101.432 560.833 101.612 561.128 101.724 cv
561.423 101.835 561.763 101.901 562.149 101.921 cv
562.925 101.966 li
562.925 104.691 li
562.134 104.737 li
561.747 104.757 561.407 104.823 561.113 104.935 cv
560.819 105.046 560.571 105.226 560.367 105.475 cv
560.165 105.723 560.013 106.05 559.912 106.456 cv
559.811 106.862 559.759 107.369 559.759 107.978 cv
559.759 114.399 li
559.759 115.455 559.625 116.353 559.356 117.093 cv
559.088 117.833 558.725 118.44 558.268 118.912 cv
557.812 119.383 557.275 119.725 556.662 119.939 cv
556.049 120.152 555.402 120.258 554.723 120.258 cv
554.388 120.258 554.022 120.223 553.627 120.152 cv
553.231 120.081 552.836 119.979 552.439 119.848 cv
552.439 117.519 li
553.019 117.519 li
cp
f
242.535 359.188 mo
242.535 358.807 242.502 358.49 242.439 358.237 cv
242.375 357.983 242.28 357.779 242.154 357.623 cv
242.026 357.468 241.871 357.355 241.688 357.286 cv
241.504 357.215 241.292 357.175 241.051 357.162 cv
240.555 357.133 li
240.555 355.43 li
241.041 355.402 li
241.282 355.389 241.494 355.348 241.678 355.279 cv
241.863 355.208 242.017 355.096 242.144 354.941 cv
242.271 354.786 242.366 354.583 242.429 354.333 cv
242.493 354.082 242.525 353.766 242.525 353.385 cv
242.525 349.401 li
242.525 348.748 242.608 348.19 242.777 347.726 cv
242.945 347.263 243.173 346.884 243.461 346.589 cv
243.75 346.295 244.084 346.081 244.465 345.948 cv
244.845 345.815 245.251 345.748 245.683 345.748 cv
245.885 345.748 246.113 345.77 246.363 345.815 cv
246.613 345.859 246.862 345.919 247.11 345.996 cv
247.11 347.459 li
246.747 347.459 li
246.355 347.459 246.027 347.483 245.764 347.526 cv
245.5 347.572 245.286 347.644 245.122 347.746 cv
244.957 347.846 244.84 347.982 244.77 348.15 cv
244.7 348.318 244.665 348.525 244.665 348.772 cv
244.665 352.587 li
244.665 353.056 244.641 353.479 244.593 353.857 cv
244.546 354.234 244.464 354.572 244.346 354.87 cv
244.229 355.167 244.071 355.424 243.87 355.64 cv
243.671 355.855 243.422 356.03 243.125 356.164 cv
243.125 356.411 li
243.416 356.543 243.66 356.718 243.856 356.934 cv
244.052 357.149 244.211 357.404 244.332 357.7 cv
244.453 357.994 244.538 358.332 244.589 358.712 cv
244.639 359.092 244.665 359.514 244.665 359.978 cv
244.665 363.83 li
244.665 364.077 244.7 364.285 244.77 364.452 cv
244.84 364.621 244.957 364.757 245.122 364.862 cv
245.286 364.966 245.5 365.041 245.764 365.085 cv
246.027 365.129 246.355 365.152 246.747 365.152 cv
247.11 365.152 li
247.11 366.607 li
246.862 366.689 246.613 366.752 246.363 366.797 cv
246.113 366.841 245.885 366.864 245.683 366.864 cv
245.251 366.864 244.845 366.797 244.465 366.665 cv
244.084 366.531 243.751 366.317 243.466 366.022 cv
243.181 365.727 242.954 365.348 242.786 364.885 cv
242.618 364.422 242.535 363.861 242.535 363.202 cv
242.535 359.188 li
cp
.707031 .054688 .578125 0 cmyk
f
254.129 365.152 mo
254.516 365.152 254.842 365.129 255.109 365.085 cv
255.375 365.041 255.591 364.966 255.755 364.862 cv
255.92 364.757 256.038 364.621 256.107 364.452 cv
256.177 364.285 256.212 364.077 256.212 363.83 cv
256.212 359.978 li
256.212 359.514 256.237 359.092 256.289 358.712 cv
256.34 358.332 256.423 357.994 256.54 357.7 cv
256.658 357.404 256.814 357.149 257.011 356.934 cv
257.208 356.718 257.452 356.543 257.744 356.411 cv
257.744 356.164 li
257.446 356.03 257.198 355.855 257.001 355.64 cv
256.805 355.424 256.648 355.167 256.531 354.87 cv
256.414 354.572 256.331 354.234 256.284 353.857 cv
256.236 353.479 256.212 353.056 256.212 352.587 cv
256.212 348.772 li
256.212 348.525 256.177 348.318 256.107 348.15 cv
256.038 347.982 255.92 347.846 255.755 347.746 cv
255.591 347.644 255.375 347.572 255.109 347.526 cv
254.842 347.483 254.516 347.459 254.129 347.459 cv
253.768 347.459 li
253.768 345.996 li
254.015 345.919 254.262 345.859 254.51 345.815 cv
254.757 345.77 254.985 345.748 255.194 345.748 cv
255.619 345.748 256.023 345.815 256.407 345.948 cv
256.79 346.081 257.127 346.295 257.415 346.589 cv
257.704 346.884 257.932 347.263 258.1 347.726 cv
258.268 348.19 258.352 348.748 258.352 349.401 cv
258.352 353.385 li
258.352 353.766 258.384 354.082 258.447 354.333 cv
258.51 354.583 258.606 354.786 258.733 354.941 cv
258.859 355.096 259.014 355.208 259.198 355.279 cv
259.382 355.348 259.595 355.389 259.836 355.402 cv
260.321 355.43 li
260.321 357.133 li
259.827 357.162 li
259.585 357.175 259.373 357.215 259.189 357.286 cv
259.005 357.355 258.85 357.468 258.723 357.623 cv
258.596 357.779 258.501 357.983 258.438 358.237 cv
258.375 358.49 258.342 358.807 258.342 359.188 cv
258.342 363.202 li
258.342 363.861 258.259 364.422 258.091 364.885 cv
257.923 365.348 257.696 365.727 257.41 366.022 cv
257.125 366.317 256.79 366.531 256.407 366.665 cv
256.023 366.797 255.619 366.864 255.194 366.864 cv
254.985 366.864 254.757 366.841 254.51 366.797 cv
254.262 366.752 254.015 366.689 253.768 366.607 cv
253.768 365.152 li
254.129 365.152 li
cp
f
460.215 237.154 mo
460.215 236.799 460.185 236.505 460.126 236.269 cv
460.066 236.033 459.979 235.843 459.86 235.698 cv
459.742 235.554 459.599 235.449 459.428 235.384 cv
459.256 235.319 459.059 235.281 458.835 235.27 cv
458.374 235.243 li
458.374 233.659 li
458.825 233.633 li
459.05 233.621 459.247 233.583 459.418 233.518 cv
459.59 233.453 459.733 233.348 459.853 233.203 cv
459.97 233.059 460.059 232.87 460.116 232.637 cv
460.176 232.404 460.206 232.111 460.206 231.757 cv
460.206 228.05 li
460.206 227.443 460.284 226.924 460.44 226.493 cv
460.596 226.063 460.809 225.71 461.077 225.436 cv
461.346 225.162 461.656 224.962 462.011 224.839 cv
462.364 224.715 462.741 224.653 463.144 224.653 cv
463.331 224.653 463.543 224.674 463.775 224.715 cv
464.009 224.756 464.239 224.812 464.471 224.883 cv
464.471 226.245 li
464.134 226.245 li
463.769 226.245 463.463 226.267 463.218 226.307 cv
462.973 226.349 462.773 226.417 462.621 226.511 cv
462.468 226.605 462.358 226.73 462.294 226.887 cv
462.229 227.043 462.196 227.236 462.196 227.466 cv
462.196 231.014 li
462.196 231.45 462.174 231.844 462.13 232.195 cv
462.086 232.546 462.01 232.86 461.899 233.137 cv
461.791 233.415 461.644 233.653 461.457 233.854 cv
461.271 234.054 461.04 234.216 460.763 234.34 cv
460.763 234.57 li
461.034 234.694 461.262 234.856 461.443 235.057 cv
461.627 235.257 461.774 235.495 461.887 235.769 cv
461.999 236.043 462.078 236.357 462.125 236.711 cv
462.172 237.065 462.196 237.457 462.196 237.888 cv
462.196 241.471 li
462.196 241.701 462.229 241.894 462.294 242.05 cv
462.358 242.206 462.468 242.333 462.621 242.431 cv
462.773 242.528 462.973 242.597 463.218 242.639 cv
463.463 242.68 463.769 242.701 464.134 242.701 cv
464.471 242.701 li
464.471 244.054 li
464.239 244.131 464.009 244.19 463.775 244.231 cv
463.543 244.272 463.331 244.293 463.144 244.293 cv
462.741 244.293 462.364 244.231 462.011 244.107 cv
461.656 243.983 461.347 243.784 461.082 243.51 cv
460.815 243.236 460.605 242.883 460.448 242.453 cv
460.292 242.022 460.215 241.5 460.215 240.887 cv
460.215 237.154 li
cp
.039216 .090196 1 0 cmyk
f
470.999 242.701 mo
471.358 242.701 471.662 242.68 471.91 242.639 cv
472.157 242.597 472.358 242.528 472.511 242.431 cv
472.665 242.333 472.774 242.206 472.839 242.05 cv
472.903 241.894 472.936 241.701 472.936 241.471 cv
472.936 237.888 li
472.936 237.457 472.96 237.065 473.007 236.711 cv
473.055 236.357 473.133 236.043 473.241 235.769 cv
473.351 235.495 473.497 235.257 473.68 235.057 cv
473.862 234.856 474.089 234.694 474.36 234.57 cv
474.36 234.34 li
474.083 234.216 473.854 234.054 473.671 233.854 cv
473.488 233.653 473.342 233.415 473.232 233.137 cv
473.124 232.86 473.047 232.546 473.003 232.195 cv
472.959 231.844 472.936 231.45 472.936 231.014 cv
472.936 227.466 li
472.936 227.236 472.903 227.043 472.839 226.887 cv
472.774 226.73 472.665 226.605 472.511 226.511 cv
472.358 226.417 472.157 226.349 471.91 226.307 cv
471.662 226.267 471.358 226.245 470.999 226.245 cv
470.663 226.245 li
470.663 224.883 li
470.894 224.812 471.123 224.756 471.353 224.715 cv
471.583 224.674 471.795 224.653 471.99 224.653 cv
472.385 224.653 472.761 224.715 473.118 224.839 cv
473.475 224.962 473.787 225.162 474.055 225.436 cv
474.324 225.71 474.536 226.063 474.692 226.493 cv
474.849 226.924 474.927 227.443 474.927 228.05 cv
474.927 231.757 li
474.927 232.111 474.956 232.404 475.015 232.637 cv
475.074 232.87 475.162 233.059 475.281 233.203 cv
475.399 233.348 475.543 233.453 475.714 233.518 cv
475.885 233.583 476.083 233.621 476.308 233.633 cv
476.759 233.659 li
476.759 235.243 li
476.299 235.27 li
476.074 235.281 475.876 235.319 475.705 235.384 cv
475.534 235.449 475.39 235.554 475.271 235.698 cv
475.154 235.843 475.065 236.033 475.007 236.269 cv
474.948 236.505 474.918 236.799 474.918 237.154 cv
474.918 240.887 li
474.918 241.5 474.84 242.022 474.684 242.453 cv
474.527 242.883 474.316 243.236 474.051 243.51 cv
473.785 243.784 473.475 243.983 473.118 244.107 cv
472.761 244.231 472.385 244.293 471.99 244.293 cv
471.795 244.293 471.583 244.272 471.353 244.231 cv
471.123 244.19 470.894 244.131 470.663 244.054 cv
470.663 242.701 li
470.999 242.701 li
cp
f
355.814 292.103 mo
363.899 287.082 li
363.899 290.032 li
358.678 292.981 li
358.678 293.082 li
363.899 296.044 li
363.899 298.982 li
355.814 293.948 li
355.814 292.103 li
cp
.054902 .047059 .705882 0 cmyk
f
366.497 292.969 mo
366.497 292.083 366.674 291.446 367.025 291.061 cv
367.376 290.676 367.854 290.483 368.456 290.483 cv
369.084 290.483 369.569 290.689 369.912 291.099 cv
370.256 291.509 370.428 292.132 370.428 292.969 cv
370.428 293.739 370.253 294.335 369.905 294.758 cv
369.558 295.181 369.071 295.392 368.444 295.392 cv
367.85 295.392 367.376 295.187 367.025 294.777 cv
366.674 294.367 366.497 293.764 366.497 292.969 cv
cp
f
373.54 292.969 mo
373.54 292.083 373.717 291.446 374.067 291.061 cv
374.419 290.676 374.896 290.483 375.499 290.483 cv
376.126 290.483 376.612 290.689 376.954 291.099 cv
377.298 291.509 377.47 292.132 377.47 292.969 cv
377.47 293.739 377.296 294.335 376.948 294.758 cv
376.601 295.181 376.114 295.392 375.486 295.392 cv
374.892 295.392 374.419 295.187 374.067 294.777 cv
373.717 294.367 373.54 293.764 373.54 292.969 cv
cp
f
380.582 292.969 mo
380.582 292.083 380.759 291.446 381.11 291.061 cv
381.462 290.676 381.938 290.483 382.541 290.483 cv
383.169 290.483 383.655 290.689 383.997 291.099 cv
384.341 291.509 384.513 292.132 384.513 292.969 cv
384.513 293.739 384.339 294.335 383.991 294.758 cv
383.644 295.181 383.156 295.392 382.528 295.392 cv
381.935 295.392 381.462 295.187 381.11 294.777 cv
380.759 294.367 380.582 293.764 380.582 292.969 cv
cp
f
394.63 293.948 mo
386.546 298.982 li
386.546 296.044 li
391.769 293.082 li
391.769 292.981 li
386.546 290.032 li
386.546 287.082 li
394.63 292.103 li
394.63 293.948 li
cp
f
463.365 98.5073 mo
472.993 92.5278 li
472.993 96.041 li
466.774 99.5532 li
466.774 99.6733 li
472.993 103.201 li
472.993 106.699 li
463.365 100.704 li
463.365 98.5073 li
cp
f
476.086 99.5391 mo
476.086 98.4829 476.297 97.7246 476.715 97.2666 cv
477.133 96.8086 477.701 96.5786 478.419 96.5786 cv
479.167 96.5786 479.744 96.8237 480.152 97.3115 cv
480.562 97.7998 480.767 98.5425 480.767 99.5391 cv
480.767 100.456 480.559 101.166 480.145 101.668 cv
479.73 102.172 479.151 102.424 478.405 102.424 cv
477.696 102.424 477.133 102.18 476.715 101.691 cv
476.297 101.204 476.086 100.485 476.086 99.5391 cv
cp
f
484.473 99.5391 mo
484.473 98.4829 484.684 97.7246 485.101 97.2666 cv
485.52 96.8086 486.087 96.5786 486.806 96.5786 cv
487.552 96.5786 488.131 96.8237 488.538 97.3115 cv
488.947 97.7998 489.152 98.5425 489.152 99.5391 cv
489.152 100.456 488.945 101.166 488.531 101.668 cv
488.117 102.172 487.538 102.424 486.79 102.424 cv
486.082 102.424 485.52 102.18 485.101 101.691 cv
484.684 101.204 484.473 100.485 484.473 99.5391 cv
cp
f
492.858 99.5391 mo
492.858 98.4829 493.068 97.7246 493.487 97.2666 cv
493.906 96.8086 494.474 96.5786 495.191 96.5786 cv
495.938 96.5786 496.518 96.8237 496.925 97.3115 cv
497.334 97.7998 497.539 98.5425 497.539 99.5391 cv
497.539 100.456 497.332 101.166 496.918 101.668 cv
496.504 102.172 495.924 102.424 495.176 102.424 cv
494.469 102.424 493.906 102.18 493.487 101.691 cv
493.068 101.204 492.858 100.485 492.858 99.5391 cv
cp
f
509.587 100.704 mo
499.96 106.699 li
499.96 103.201 li
506.179 99.6733 li
506.179 99.5532 li
499.96 96.041 li
499.96 92.5278 li
509.587 98.5073 li
509.587 100.704 li
cp
f
100.881 159.524 mo
110.509 153.545 li
110.509 157.058 li
104.291 160.57 li
104.291 160.69 li
110.509 164.218 li
110.509 167.716 li
100.881 161.721 li
100.881 159.524 li
cp
.580392 .023529 .286275 0 cmyk
f
113.602 160.556 mo
113.602 159.5 113.813 158.742 114.231 158.284 cv
114.649 157.826 115.217 157.596 115.935 157.596 cv
116.683 157.596 117.26 157.841 117.668 158.329 cv
118.078 158.817 118.283 159.56 118.283 160.556 cv
118.283 161.473 118.075 162.183 117.661 162.686 cv
117.247 163.189 116.667 163.441 115.921 163.441 cv
115.212 163.441 114.649 163.197 114.231 162.708 cv
113.813 162.221 113.602 161.502 113.602 160.556 cv
cp
f
121.989 160.556 mo
121.989 159.5 122.2 158.742 122.617 158.284 cv
123.036 157.826 123.603 157.596 124.322 157.596 cv
125.068 157.596 125.647 157.841 126.054 158.329 cv
126.463 158.817 126.668 159.56 126.668 160.556 cv
126.668 161.473 126.461 162.183 126.047 162.686 cv
125.633 163.189 125.054 163.441 124.306 163.441 cv
123.598 163.441 123.036 163.197 122.617 162.708 cv
122.2 162.221 121.989 161.502 121.989 160.556 cv
cp
f
130.375 160.556 mo
130.375 159.5 130.584 158.742 131.003 158.284 cv
131.422 157.826 131.99 157.596 132.708 157.596 cv
133.455 157.596 134.034 157.841 134.441 158.329 cv
134.85 158.817 135.055 159.56 135.055 160.556 cv
135.055 161.473 134.848 162.183 134.434 162.686 cv
134.02 163.189 133.44 163.441 132.692 163.441 cv
131.985 163.441 131.422 163.197 131.003 162.708 cv
130.584 162.221 130.375 161.502 130.375 160.556 cv
cp
f
147.103 161.721 mo
137.476 167.716 li
137.476 164.218 li
143.695 160.69 li
143.695 160.57 li
137.476 157.058 li
137.476 153.545 li
147.103 159.524 li
147.103 161.721 li
cp
f
219.985 216.914 mo
226.325 212.976 li
226.325 215.29 li
222.23 217.603 li
222.23 217.681 li
226.325 220.004 li
226.325 222.308 li
219.985 218.36 li
219.985 216.914 li
cp
.054902 .047059 .705882 0 cmyk
f
230.352 206.853 mo
232.507 206.853 li
229.426 228.608 li
227.271 228.608 li
230.352 206.853 li
cp
f
239.29 218.36 mo
232.951 222.308 li
232.951 220.004 li
237.046 217.681 li
237.046 217.603 li
232.951 215.29 li
232.951 212.976 li
239.29 216.914 li
239.29 218.36 li
cp
f
164.967 372.488 mo
177.307 364.825 li
177.307 369.328 li
169.337 373.83 li
169.337 373.982 li
177.307 378.503 li
177.307 382.988 li
164.967 375.305 li
164.967 372.488 li
cp
f
185.143 352.907 mo
189.338 352.907 li
183.341 395.249 li
179.146 395.249 li
185.143 352.907 li
cp
f
202.54 375.305 mo
190.203 382.988 li
190.203 378.503 li
198.172 373.982 li
198.172 373.83 li
190.203 369.328 li
190.203 364.825 li
202.54 372.488 li
202.54 375.305 li
cp
f
506.471 374.128 mo
515.999 368.211 li
515.999 371.688 li
509.845 375.165 li
509.845 375.283 li
515.999 378.774 li
515.999 382.237 li
506.471 376.304 li
506.471 374.128 li
cp
.707031 .054688 .578125 0 cmyk
f
522.051 359.008 mo
525.289 359.008 li
520.658 391.705 li
517.42 391.705 li
522.051 359.008 li
cp
f
535.484 376.304 mo
525.957 382.237 li
525.957 378.774 li
532.111 375.283 li
532.111 375.165 li
525.957 371.688 li
525.957 368.211 li
535.484 374.128 li
535.484 376.304 li
cp
f
531.699 711.655 mo
547.233 685.776 551.037 665.036 551.037 633.385 cv
551.037 533.489 462.964 452.505 354.321 452.505 cv
245.68 452.505 157.626 533.489 157.626 633.385 cv
157.626 665.036 164.077 682.782 179.608 708.661 cv
531.699 711.655 li
cp
.019608 .14902 .388235 0 cmyk
f
261.755 682.639 mo
265.813 682.639 269.896 682.927 273.925 682.585 cv
288.015 681.392 301.185 677.902 309.756 665.377 cv
318.118 653.156 323.924 639.68 326.479 625.109 cv
329.414 608.374 323.021 597.225 307.448 590.49 cv
303.757 588.897 299.876 587.582 295.954 586.705 cv
277.08 582.475 257.997 581.739 238.85 584.288 cv
213.982 587.596 199.905 602.875 201.41 626.258 cv
202.096 636.908 204.813 647.54 207.629 657.902 cv
210.407 668.133 217.721 675.305 227.853 677.988 cv
238.847 680.901 261.668 683.177 261.755 682.639 cv
cp
446.709 682.408 mo
446.748 682.839 465.621 681.744 474.842 679.884 cv
489.445 676.942 498.67 667.726 502.393 653.326 cv
504.135 646.582 505.66 639.724 506.547 632.823 cv
509.727 608.08 499.621 591.971 477.104 586.016 cv
471.273 584.473 465.146 583.667 459.111 583.354 cv
438.984 582.315 418.893 582.739 399.986 590.83 cv
384.663 597.385 378.338 609.601 382.168 625.875 cv
384.365 635.216 388.067 644.25 391.59 653.225 cv
398.625 671.142 412.195 680.604 431.164 682.338 cv
436.307 682.808 441.525 682.408 446.709 682.408 cv
cp
344.039 611.541 mo
340.126 650.955 316.452 693.512 266.421 692.586 cv
254.108 692.357 241.52 691.754 229.603 688.981 cv
207.146 683.753 197.393 666.803 194.065 645.376 cv
192.579 635.81 191.837 626.125 190.145 616.601 cv
189.608 613.586 187.751 609.441 185.354 608.37 cv
177.009 604.639 179.016 597.759 179.304 591.537 cv
179.599 585.169 182.716 580.051 189.294 578.635 cv
198.946 576.557 208.683 574.147 218.479 573.603 cv
245.77 572.085 273.079 572.669 299.879 578.754 cv
308.143 580.633 315.908 584.617 323.995 587.359 cv
347.729 595.408 370.738 592.945 393.881 583.881 cv
405.037 579.509 417.18 576.908 429.113 575.41 cv
455.34 572.115 481.709 571.509 507.98 575.678 cv
510.199 576.03 512.404 576.537 514.574 577.122 cv
527.031 580.478 532.32 589.983 528.613 602.436 cv
528.244 603.674 527.6 605.437 526.645 605.801 cv
516.113 609.796 517.99 619.4 516.604 627.517 cv
515.016 636.823 513.963 646.252 511.795 655.418 cv
507.354 674.171 494.865 685.309 476.5 689.76 cv
458.971 694.012 441.08 694.442 423.506 690.669 cv
398.828 685.375 382.692 669.284 373.432 646.469 cv
369.422 636.589 367.567 625.847 364.481 615.573 cv
364.013 614.018 362.248 611.819 360.95 611.723 cv
355.283 611.298 349.565 611.541 344.039 611.541 cv
cp
.694118 .631373 .623529 .592157 cmyk
ef
261.927 681.965 mo
265.984 681.965 270.069 682.253 274.097 681.912 cv
288.187 680.718 301.357 677.228 309.928 664.704 cv
318.29 652.482 324.096 639.006 326.651 624.435 cv
329.586 607.7 323.193 596.551 307.62 589.816 cv
303.929 588.223 300.048 586.908 296.126 586.031 cv
277.252 581.801 258.169 581.065 239.022 583.614 cv
214.154 586.922 200.078 602.202 201.583 625.584 cv
202.268 636.234 204.985 646.866 207.801 657.228 cv
210.579 667.459 217.893 674.631 228.024 677.314 cv
239.019 680.227 261.84 682.503 261.927 681.965 cv
cp
.301961 0 .109804 0 cmyk
ef
480.278 676.314 mo
490.409 673.631 497.724 666.459 500.501 656.228 cv
503.317 645.866 506.034 635.234 506.72 624.584 cv
508.226 601.202 494.147 585.922 469.28 582.614 cv
450.134 580.065 431.05 580.801 412.177 585.031 cv
408.255 585.908 404.374 587.223 400.683 588.816 cv
385.108 595.551 378.716 606.7 381.651 623.435 cv
384.206 638.006 390.013 651.482 398.374 663.704 cv
406.946 676.228 420.116 679.718 434.206 680.912 cv
438.233 681.253 442.317 680.965 446.376 680.965 cv
446.462 681.503 469.284 679.227 480.278 676.314 cv
cp
ef
307.928 610.392 mo
307.928 623.091 297.65 633.385 284.934 633.385 cv
272.253 633.385 261.95 623.091 261.95 610.392 cv
261.95 597.675 272.253 587.4 284.934 587.4 cv
297.65 587.4 307.928 597.675 307.928 610.392 cv
cp
.694118 .631373 .623529 .592157 cmyk
f
446.723 610.392 mo
446.723 623.091 436.444 633.385 423.736 633.385 cv
411.047 633.385 400.745 623.091 400.745 610.392 cv
400.745 597.675 411.047 587.4 423.736 587.4 cv
436.444 587.4 446.723 597.675 446.723 610.392 cv
cp
f
551.037 638.106 mo
551.037 591.995 532.273 549.909 501.328 517.958 cv
487.801 528.484 471.335 537.71 454.807 543.374 cv
454.807 543.374 477.631 524.868 488.86 506.13 cv
485.253 503.032 481.55 500.023 477.711 497.226 cv
430.479 534.664 378.669 540.363 376.549 540.952 cv
398.286 526.132 408.564 510.05 413.114 496.174 cv
380.415 527.113 340.216 559.971 306.708 571.673 cv
306.708 571.673 308.586 557.478 299.912 544.459 cv
270.418 589.414 207.424 611.763 158.348 622.716 cv
157.893 627.776 80.8291 364.576 354.341 364.576 cv
646.563 364.576 551.037 713.069 551.037 638.106 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Aleksandar) ()
%%Title: (Web programming concept.eps)
%%CreationDate: 12/6/2013 4:48 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4NZdQdZBhUf0M6_$FbY$U]$<&,"R;%QQo0dI-_A28daHX?V7qbt80?HGeVZ8cL/1YfOS[jP4&Wj/V)X#p(DAK0HO\PbZ:
%2Z@#WXf0a,Vp(B<"=a$,+8>1dYO$u1_'VY*0T<g=cr-]Ga0qqWT6=M:;Z**QqrjJePe+9,hUua'8n#?&CK)7Tp1c)OX&r02.\>'I
%`RK[I>&F2&b#XFsF6\tBEfLKlC05/VC;irj9cFMJNk"]82YEdFn<r7ld8l5lqdHBiX.urIr*JgALR7Nk=&V`k=no??SlXR9<j>S;
%eA!Q/F_8g^dJ(Oj;8/^nUsB*jREC:4`GW(.e#)uDk[S6[Kcua[4&%uogriD0H9+FndF7tU5kG<2N]4TF$(oJ,Q*Otmh;(3U0Vs>9
%Uhkh#2K]7I@0/\0G`a-.6!.o'Mk,s_BK:7i8Zg)6`;^E,-8og1gJ;%>!P*.Xq;f-`K2(]VK0]1po/lkQ$3+1'4V*J4Ybg$ABm',"
%ruq)mX;GR<K5RpFXbNseoh("\BJV1N`k6&N_s2!Zljm'o(7Eo3XSHejih4pb%6GiENG98W=\\]]o\JhND7fQnKHMa-a\FXn+#MjE
%P)0<Zb"8S>kn1g4O9uC@A\(":6Td3M(e:>U0`\dT"++G,/d^Z8X)_CCYM)/R:Q+SG<i+T<=O0\:neYetp1+++d=6J9KQa7,et\K\
%o-j>_-Mp:/eNRU%XI"!f)E?-a5I2X+Fjc%[j&CN_rs+$D6Zee9'a>YkDGZ*\*<Z?;a(tLr5ME5_l-!_A7^op.5AC&ka$QZY3"AmU
%_G[;Z,2SVa43-7C+,d*%f#uQ/X&u)Nkhj'3l!gL"3+>.iZPB@u>O'E3V#NTos!Hu+)GBe!5Cc!XlT`:%UDY#\#:\6IWP`2GR:PgC
%C9_)]V>,u*f\;[`oM(H=efVR99/J1k:6ULPS[cqk'\>0tI?eKG@cr\$DHJR$H_\bKLDDPY,X_#"WZ=$uQ$08g?l[VlS8`VAYZ9S[
%b;*;Xp0$[RdAZaF+V"'FI3uEadV!#9kr$1k!r?qX#L=-ce]MU,fK?4!/fXhRms>^Rd5R1%Q'gj'brGJuDmG9a->B&BLc3Ek14E<'
%osJZ1s!i1aB4P>/>K'Vh*2/9umn'?NHZ!T5>NpfhIPkk7\8\GGZXOSUZn0.!p;_<9BS2+Z!%TRLrh36CH@1?iegct9[(i]>(>dX.
%`>VnY;[l?e1sTZ/g>0tP[f#;1TDnaurQd^6<n>KpXH=rB2Db/&/sFOj1-rq+GSrI#AF,8?0f(:h"GL5>a9T6u)e=OCn,k=_""1;T
%.kh&?(k0<Yo^dP"cTh?/TCE$@pH@F,*T-QB?hoFXn2@tmQh.Lh`X=odo/tWG4PR2)do2js(>MVCn)iE,RrJP^G<OQ#*S5J:5Q>[s
%=1O&aE&O9"PB4$)`X*XBnJp/#*8@_<E_2iV2A]s`HZS(dG+P>gVA5&]hbfEm(j<aP[.AIdcIs-tY^P94?/)W$gTjOXfnNM22ZN]m
%b$-kVCLo%@S`O(Ij][[U>F&i(ath1m\J\fhX_qNpKCj0[lPisbi#6rA\n%B%Q,_B)X6m#H'3f6g[=A0Al_P>cGr')F9bJ0s0R_D+
%?'C(Rg88HTGf+sVMu#0"k_Gbng[C.$(]e,7UL5&[a].oQ0F_$T5=?g*WUf[/7t4'_'oAmsaBA-M&PWj/'VVQ5),,mi8h!+F7Y1PT
%d[rZ#ajH_3rQ3D.EpjF/r\2/S:65g9^iD.]3\rZDFmga5@ML'tgf0:ApQ-Y[PQ;jWr#`PK%fJhf.lE)TGa,:P[Z,8i6No(d3QG1C
%UM(uk4%94"e<Hj#@1tK;W7cRU\4">HUrTGCq/ZMk1PuK#La4&75,VHG?gh?=^S]q>5NaOCq"ht\Y7Y-DV&''5<U9;=$JF9:jga%O
%aUq^RL7))C38CBQ<iMBh@@^ViWCL0'c$EaVYKeeg<;LWdBR"GMok9s%Xe-(]qH9nCFfW8,jj)Noc!WE>'eM\[>FoM=cGI`g=XO5.
%;8[CIPM&"><1@O>,;gC=8iZo=BJ_>P)B<A.Z8/1p3ao/Ln2^Sj"0KUtAJ4h9PlR4ZPE!FZb_r7cGONGJF\\B"luZIP?&Bk"iFkhS
%YE?ce%6bi!V@@/p.`]MO=D3CQ\qG>A)'*HV0'(7(R+8gVSPlB\1JD7Jif2!4;n]HnWDF9d)RVK46fKm.D?I#]KcJTX1h*Skh5r$W
%V5&bONQkI=<nFI!oMu\JN%u<V2.'/TYqQ>1K2G/tRUN6f&UskZoUCk6b4Ze1<[iDC8Y$"`doH/RpeUQSf:#>1.W[S*LH0O+iVZH?
%1Hl,pjYs;n?,k8"Ga&_7;JYl#DW6bG^/3+HLN;u_DN[h`m835H<?tqcqRTO<cV?0\+<<;8Z!7@r3031`Z.qI-S&]R@=Df2'c#>4H
%cVc<\#aoCajg*jkYe#<b/3!QsM8Qk=EsAA0A4Xpf]H]KaV]'/TT1fe+ZodAspp7ifm>7@qGk5q6F^4<?[8Tf)fDM`&D7;%7HM2+?
%-JNH6+E$9dk+hkK7&s!AM&e71d?#_SO,:>PNK]QLfXXHjVHDGo(q6Kong_:B'FC-$U=EU`=2ulpqol6YP2)^J2`=`!!@H'qe?'Kj
%\OO9g.Fs[gh8M!V_p:l6i9&qA7QnBrK)I=^681]r::o7A.@.jL;DFS-%Q'g4o`#4,#g,p:.ZsQD%/Qc&;[U,"s$kJt57'mNT/"?G
%.N'.g*WeE[YkVj@i8<X+lo$?dc??Lhd.6X0`kL:K[^G!HPtoZL*=3uL`"Tn^gb<;\P;@d3k013O4?#@`Qo#24?s>V*.X;S<"r^3T
%FE;=G_82RV*0TO\q&!*oM(Dqdk5Z!,HoMgEQ-NMalm+SfSuS?$edflAYgZDGhH6n%piVSlk4h.QJ("&ARq-h`U2T(&kc:q1)M4,N
%l0T`t[+XN\DdC>pb3,Df"kC9.k:19pTZSY6BN2=?0`4^uo:_!onbKq>Bk&HO&5ITg2ZXDp?,rbh$*JF2;3l)4d>T!(MkT5>T!4a,
%3-/+mbnAt(hh5O(MT\`&X0HuaNE5WZ07P<&fb53Wbg"eYS$?*M?GG_3eth:\2dZNI00K]NUpH`N$-nL,8&,)_q_I22n0tMlS\^6S
%M'QlbFkoUJ0i%!#rWKX2o@s3^[u%WNJ".d1R@9*_!A`-0nP&`\"doKBg>#i9?4X+6@?l=s,>#oK6C2\Kg0TC'mEP15fO\=_>ubAL
%[rt>]-]Ik)_CYHjM(IEB(WRLC&?G'KD%[sI/\=`kdV`*DV%>l;oW$Q6at9MlUu;rVGtpf(e,Q\[e:irui8\L(q-t%u1ho"t)E%&^
%3^HMXH>MA$r0ZS*D4LN=hfVCtZL(j??;.qR,e:TNQ1',HaF$[BegE`FT@Wj1e$bHn<FI8?C,K/Y<-<QsXZ,MO:aq]&h-0QA"5l.*
%n]'TUWthqhRK0[7\Ur_49S-?Ll+!ri@/o5b7?bJu,Y$fQfR@'r<\*jIR%TbZ<32DT9=kKalSfh#;@1QZVi`7sBT*IW@eHqaYH*8/
%_9K&[CaIl]Uug7]OoV%nOpA+beHEKZ-`oiia_&K9`YR8T@)m83R`LcEmD^&I'^M#fU-3SnGHG6W*bJXHkERG/&YPD$W=gK`1=ME#
%Qrg"U;LUNdA50Y<ch*8&-@&+!?AkOtRtt74dO`qC,XH$G[[qarasDG'f:r1Ipa$1TVPFu=-G5($Q>Q2.;+e/oMin42C"[@c[3u\(
%l\m5WRE\p"6lIrQVL"PC;3E%X/N.M#CJb`7@a_Yo<bkQ)ZW)jG"IWuOqLA(#Af>H"'(PMs<b%Z4SF4Gh&lj2$3AGrC;bR]HId8K'
%\Up5q^G*!:Piju6NlI/hQo&7taV`90qAK0_A\[>8m'.J[S%UR5[qdq-C[Tu\,p:%ZY0H@fgoaA*?/'0-AF?VFQFdoaWH5*u[qbrP
%XkMQ5RjhueDUmlMmJjOnMk:7qNT#83dR]OO"TReMlr4u*cIM.@C?3Xi-ijY:C,B"e!L[qdP`qbj:QXF+<5TMf4"bH1N5KPpn$'B-
%/cIg-LMm9T"egGE8"QU*rjBUHj3#t;VX<o>9"c49<9dQbnE)u==#2CNnqeDDLp\6>C@cX`VW_<S;3l_.+/N[1nLVpuoVUnNRMgM"
%74!4GA-uXbq)pC)N/&].[:U=+jj;mSMZ-hTch+tfoL8'>>RMEV"EK\B?RF#TR]YK>q\K=in^Q_KqP!GY.H4-XcMtj=r\6hU1NqoD
%:qe:4Rbdc&B_!fZ2epT,RmP_tmT"GqJ$`kK1^(>p];`.=$'K`"=.RCMR=Rh;F#t&nE)de&!"RRjj,c[Vcc<!I8S%'849oh%@gnT+
%Q-NMalm+=!;me^DbQq"d/t"\NRArF@2a+l7':\&>*^neF[o6361r&965Q@:goA>&m8\Y#rn"cE.q>'LWr-+)iDY*JWkrf!:aWDgs
%TE!3_J,^h`&LYAkZ'Nb#S=fUPBZ=T"o0;h&ht`]/r64o4m._;rX,Xk`1Se274mPpsPnK[e9Yd1W%V'PeP3U>A_RIAe>#-hQjiY\:
%[iOTLF`P[j8PI$U*b4d[&t&6-l\&`HUeD_D52iqgdW\kH-Sr+Y-,sWLDhuXoAFg5_4@Ah'kDp8N:@g<q4AGN&q2R9%_m_Fd-Bfio
%mBdU_oel:Q__p/[.]896T9Vl'm&[V3nlhegXC$7U4jTa[j2mhpg!$Zms%8YsMR=IoD=A4s<;]Ogf'Q`8@tOkF;q,j3BpsF',MI!N
%`+,oDa\/;3XZ_98'`0/jT\44;-1W?d2on0flnZ9a1-'rUIlGIa^Cc(r0&q#ZY6ncP,3(UX+&-kR.+3aQhYifuUH22`bS)Z$`61:5
%1/GR,'//sqbJ1Sd+jD3f(S-9=r6%4m1;ORd4RmHU`67qahV"n"R@"-*^(-a33eK81%o(h-Un.8\IF`;a:.2tXG8Z)0@hY5US<$Ai
%_-tb6Rn/.KUd$c"jM?fN@hWA.;gup9?VG^`i8j?feOjJ`=Lmu2CVDf(YYh"ac#N^qdq!9To9YgkG]QPrJ1#eQ]O<'J21+B]"fBt!
%Ja!AdS\MlqIsl$9@[bt2g-7*R)h6+^Uuq^",=Sq].mLl)>4Yto'B9^!rH7f:58787b3BDb=8Y3Fd7T!XJmVaD7['qq'5tQ&-R\;c
%")V_*jb+t+g2qe!EW!Qg"8k+5S]tPMdPs%`5F+Hnct4ms;mp[a["SEY.4;.Mdd>&^h^L&^11t%$18nNsEM:jBT'&oIrYNuR=Kl%-
%:')#$ir>%drCr#7P!J*sGogH>+ounZa-`TgB'St)rX@jBP2J%?@n^^74)I#CcXY2j(mDt-GogIea-`#P#%H[h0i;f<4Aqc)F68Ze
%Z.(4'?T0H+b*]$_8Ab"R*t(];J%1q[4I)B""Rjq^(Y`Al(&mEOohlDEHDpePE(fbD<4uMj+i4)EkUL_fn[O[\2tf=u:?eeNmQcL,
%m1(Vr7(<]5*h,bJaIH#M1XAXSRD87HgCWNY%F#t5RQiWn-r#q64.a2CF9uR>IqQhn-huYn:*YVagDD"J1\b/%X?;f5`19,,2/5]@
%>AfbRnb>7=O./6NoXb`##MmsN[n<N@3g5.Op\IH*[sHK?mbdg'aZ*5,2nS-.:R!3J@E_Wc=!D1PWSjhl3?2=IYC)qaT!Y5q,XOKL
%-!s5?R-fL/c7$/<g5Zi*Zn]1lp]T,-o1Zg:D'Cb*:p8QQg6p!%P827ePHoHj2]ch(7s"98mf.#YQbX?*7s"98DB@'IbJUKAk7TnZ
%0W!`5!mKfcgcV*rLNE'+DB@*J_mu0EkF>Z^k7Spo:#Xl9UJX3l'pG$<Gq:ldZ.t5*JS6YR'!iV)c.W[^,RAYW%l0+Db!j/ToMb<:
%E)Ze>`;G&-q7@8<po_OPOddBOp!5a^0qMotPl_3d(%9]5C9_lpQ4d#h=Y*Q6^K)#EG2&QpeKe:4h/6J<Qgi&<Vac^[i\N0$<.Nn$
%V&%<\Fu-+.c/LWB"i$Tae)!B[*u<,GQ>N,Zhoko_/C?oUWrD8LQ0ZXaS2%o%`[,Y^ItMLN<(uB:%()U6XRqQjjr/CA(%roXh/JEp
%@@*X%WSME^'MDk4V@>GU#I+4A)Mrs`F_^WHj?H="it%]j$/QR-X7WTKl/>b!Z'e37JN51YVc)h-3o952*#CfOZ&[d;T&8WnjX\!u
%CaV<+?2gB&@3`"Y*LEbtjq@Fmd>s:D^bN@OASfMZ^ck2fh>Fn<W/!;uYhs"s#gU"C5'QB@g9nQ?0+n5e3m1)NWcP(O3h2qT:\9]$
%A7+)DWHO/2/qnemhi",r4m+cT.8N-OVX:P'F=4[6Cujb\SVbCTJO\Z4Y9Z)4on^oo%b>1NO@7F@a/J,,6LFBFg'lo4`eQpd<U$%(
%_F-Ur0NC3qX;1.M:Jajdr`H:EG)MV9o.op^EIs2@Ui28bN:Nc_N_+2WoZ]+I/Bp,oM)W3`^G"Ft&t\QOe%[h:@g75X@tU!1o_]b7
%3'I37XfIg]M3u+<HtM\G`Fo!tg%fR":"tk",9QBB@\7M[+""!&Bt+:!9MC-L="-N:\a36*1)aBrQpeW^L=;eu'>J6EUYbBR.[m6e
%9(6tp=4c]jA=JG/nr@>TM3$PD,As#42"bctXN\O+)(Q!pMhup0j7d,Q`e)L]^N:Q@SD$3HO%dc&D;>X@[@,O8.6&Th;$)h?R*!s1
%Vn7cCB"XOV%8ocHLit9Hkr>FNga8OL/Xh!@HC"7JaP-NTYZ7X/`gHdn1_+_ea%<d&("l/7Q/LSP&Up''rA`/MbgrT:XdAaYdYuD5
%OJTXTOd^DIHSu\HEJp6RI:JQ`CN0W834NUNcmmW$-V8bY@01"hk#*9[F42Jmlb)a.OJtcu#Zg!YV!"_<bIGG9Djb?_*o[%+niAG/
%r&l?l^M*j1r"5`OR4VtiD:ZnD+%'M)"45H]7X^Umi?rA@1cu_K<pK3nrqtf!o=s],aEO%QB-0oL[n0D&ef0+hq-T5LKho)&,3dhu
%_W`q[T7q!o;JT=N?6^]&K>6Kn3Blk"s&Q+cp_Xb-]`3\8]qA0Y$2.Fm)6$]::LB&[q+pj-&(F[[pLTeF$]mZJ32ltP(gH??XETTQ
%YgWni3P3<e!WFWtg8",kSJJ+C#s4Tj%=ADsJ,Z]W)Sg4KO<5^)_\L(qGYMG\(NPQC1&C>@rV,lf15r/!g@QrNo$K+-g8=Fh4`'Pk
%l00gt9mojH'_Uu)c`i4YBu@2]oLM'8Y=tkGePjuJTrsD?eCF,+cguBBg[q&Pm.IWXl"k.6&'Y_(-Dn+4_[04CJE-P*Y)]*5VB,$f
%pkBN&:Xa>XoJD!Jo_Jrlot>Zf!ln]AlYa/WbT=rF-G/$N[/kQd-o'02^JkqG;uUh;=7*Lp`DHSA>^_C#=3[BSSSsb(2=gG3`D2QR
%7unhoe-Z-pfSg(IgSlh$qJ*W<NI-ukh\tW!RcQ"$IIHCR%JJZ+_YnfXk\%0N?5pGe;Ib)/10X(IVEO_#W@(]:6I$iUW]!K4iQ-e+
%GU659jbZ7l\5LANWf=.^V7%X*qdJYFA!6o?Gk6D_./nFb>jK;_4%_u"$IU_e1a<=)a"@WV2[ZTMPFD`_SIC&SSu$>:e#5ukq>79<
%]%SdR%E0A\HC.r8rscZp+'lJMDm*f^<4RGJf*'1h'NjpL[8NG61[Z-0g3$+6b?e;P?A!Eq?fpI(oRE?S!mjjqm5h[?'"qhje]TJ"
%rEA[b&R<^#=sGaA=]3JEpbaLF;9Wg7QHG?/hQhe@6&P0R2B(3+F55u@UTki2FEUiQe'Y-e?HgA`'B<#qZ'=T+ruUcB3#/gP9uK)-
%@Ad3SDsJKI9^k8"k"]'W9G5HPX>PWh86*"H0J#R,ho,f7TPBc3[;Qi(jo-*k*joJSHrst6bsl?U?*RRi"PPU>9n@>kP1DlgK1_,<
%X2";N<[uSc1fA\>Fsh*+rY#bPS(U[h(#bK?Y>bATk]Tk%X[]dFIG7B+;(Zt.'KLsh-!tI/Umf87fLiP%[;NBZS_9>V1b#joa,OQ/
%SEdkahR>(Md(tifZe3,XE`uP@9]Pg8E(o$YY8f-*dd"E#gRbjjSrAYFh!1^b>fX+>X.--a)Fh/pY@1u%rYh#:q,X\5PRu%RlT^<p
%rB@dA!%W7t@68<($r[Dihjr8/\^DoJ=/qN\ZnF%ZH;;)%C+gi-GBKdpV_1(u0Cq^X6FW@4&=5IeSQO0)G>b^D"q.Q3!H<<![a07t
%ag)MJ-X*W4fOq,:Bp*:mk[jD-E,gH``VO;XGT*H&)pOt%44,%oWf?%JFY@QSX6kK.@bSO$IjhJfK3o]WRb-8FTtP,(X?J:\BT_&/
%;R$RD[CO-84'/UCi>8r2ncNahh]EtU_pf8CQ('*B,K@FgbZ:EAX[_As(UeiKI2gSPn):ZIh_dbfj(J.G[-rf"Yk`L@D\'$c%-'=o
%2Ju4De4EGDMY0^j75h=$^8.G7CIm$U>,d:VG,NkM&!OHiOG)qsG"e[<^k*hM\j_F(C-2>2<\NQOQ<fOphFF;P*po0=QCGLGE_kSO
%=HiNk=tIQA5D`@8aWu!t^6O+48`P5fOh*H"L92e_#21;JPcBuq)%.]Nr[),p8hBB8WJ"HSd40q5911Z1k]NXVpjGQ=D-D3S)ksH^
%cVhC_bEZu4C0P,DBIg[>4q%c&p+8g'"qo>@>iLS1LcJk1dhqK^@!JC4Ng>Ct.j\i$fg/tU4=A-^Zk3uDkaeq243YEi[QDC^)JrM6
%GP?#@/$p?d//e$tC)Ig+O!`Id],83c`*QUnUmN4o)?C@HogW9j;O'9N\1Ven,ftID5O-8rO1mQ5dnSO7aP/Zp?J'sTR(?D%NbI!-
%Y;D:HdISN&1#/p#-E#B(Z,G4LVR5s4l+5g;%_%@$KpuH`onhe8[$q%^^M"U*eP@*_fX<Pmci`J2Q`UtSKKMXr\1_&u]2MFjALq/)
%O%u%&MrqTVb`ff=D6mIlUKsuL?U_:`E`>W+pKLtDdq5q_gKcTg)X2Mlc]ChYhO90<`\UM!E+QA,`/\h;X%J@.,$h$>4B]j&UH*XS
%d^0aYs-e(&@u:%,qaj[S#,dtPrftX8aO=g.+^XA>+0_1Mk9pegm-7WH8LB'Io]>+1_[X)e^is\9iQhe1:_)6Fds=-n19]1"A"B1#
%G"cf,32ol4SXmsK8,KgEW>1mI%FZFa/tuTfV/(MZl)H),7\/2g6(E<C*ba9^.ZV'Zk*j;lEk9YuOK2Qt,aoQfGsYa"=ekY^U$-j5
%)/i38`"Ek65##B;J\"^#<2ba+S+.f6hIn,QrZ$K']@<pJIU-HTUf",J^/gQ!;29bHGb3h#/;[fc@P\$FFMmDUBV*f#dpX9ed'[I&
%c.XT;\Q46kR@*<-@U.BJ,ed4AoMm;V3gUaGZm?(j5AJ7T?,"fu`$;#qQ!010W&F-i.^Z==C=e=X[Z-dn6-sVVe\7&pI5K"RNo"1K
%>'JtNNG9HjBA>#,f8?^%p<ZDE[#XNtUDq6TEg[u>e2uo8FbKFO7a9LUUOK?06b@O9\>PPAA__#6\c^@JAPJ18E:C#K;\)Z^M#"5m
%"\5+mRJ$n(6:9IQl6Ad!.Z@Hq+aCPgUPA0B,!"65FjraYY_0a%:@%6;kgK!URX(7QrkFre_4\N7ZQ3f3C0aAW3EJ%#^!QD/L3e3*
%,s<lE[sg]dV2T([)rC7o,)&r8$ph(1fk?\SZT-a7I3&3q7Cem=q_6N>KEjgu;`hgU_9G`dp!S!",)p[eh\2C#=2o*8om/:_Ind83
%&OWN5pS&G[VYAQ=_sj%&IgR7?WQttLLHE,?(K3QCX!4kgq/p]GmkTZ])Bm,#e?>&k*_?uGV:r+g*O("97d"Su-nGkkAL]EL9,NI3
%&fC%fp6Pts"2f?;@D5UuPi:_tF=-8j&#SBD'rR\5hQ?\r<d2I48_@h#p*%S999/7>X&t,>ROZn33jh.FQ\#(Ho\)dg-I\,aHj2:!
%QXj_A9K&9KfDQ=UGN7KWkS1s9[G#3<V9qp6;s=Q=D`;#_M@NHlF5Rad#0msQEgBT0YMCRDO;>QX#Dnc;W_m]!c<?2GakgBI.;lc=
%QHKLe0n:7Hi+/P<fbN$B'm:PH9'NqC5O*aF.Q3c9PBg$+U:!H<-&LCE%0kZj&qSO#ftQWp*Ue;7`WU/?S@<NU+tm\8+;U->I9-aT
%9$hmN"F=k!ruOI`Ctoe32tC:"q?dEX!I?cnQ]Z/4&=!,'l#3gAEI-U%N0GGbCkX;ng*rSj8s)1=4_Ubm3Xb8QG4?reX]S@b<>N,P
%Um-tJ<3_E91ZcV2l$'kg4(V0bhR7];qR\?X"pY(WkbafE-)j?s'oM;H11\b\@\oZre>6M%VPVHbR^b:AS`lO-1b_`T9N='O>YJ.U
%ddJ!t_b%:.&*1[6h(>1+_-?Rpk?[q:aio&p@O(7CWQ%MZ6'ZVn><g.KWUpoP-mCF+>\[9-,@%p<JHr;L/HN1p*a*DUM'[%d+?$i8
%m_su&`(oV3=:O7Bmth;>e:?enf1^jAI.0Q"i3E!@1Ctj(.[Y8Z[d6&/GQqYOT$kGX[ru"0<iQa?8$+;nO)SE+lIVqi#7YUS;(ku`
%Z?oYNgYhkC5f)"DL9\KJ`7B)`)$m!14,oK\LuRq\X"/34__QTVca$kAOhP],.pcd@_T^E-#"fl<+S2uge(9L*PBob`YF&n>61q(G
%BlEn.jDf`/I'VIU2+S@+qrniXE:O?nRn]CnktPO<FY>JMYOG<d)[4tGdhn@68h[ui4Pme=FcuT#=#snOd(Pf(dFAQTG8sm8ELifQ
%ADO8PBU^!MQ?FH'0/nAP4QoJ<eMo1)[Yqo;T(cic=*VrU(oJr*'4m1C58.8=.uAWOZpWhlESbJbBlMId.:2"&`s?Kg4"&[%F$_0(
%,DjC6_mUm`L"FSn7EcFU6-<i]6)!bDTON#%B?'.q4P9n?:tLG4qqYb`^JXId!W@HsJA.6ojE^ji`?`6JnRqWS4R!2M4Yq185:Ys3
%CfM1_<83scWR:*e4Af-gX+$YWmGiFP@\N7Kb?AnOd9qa:4^?\3U2c^WOg!bE.Z^m#BSDlQgt%e[jCsljIKeZ$rH.6%Vks((`t-aY
%n!@B`pNKZD)m*b\ZdmP$XVZ[qb6ni$Q"%=Qf7!ODe%N*!nb1Y"=8(+nmEZ;LD7$l#YHV`To'\$^^1/#Ir:g-RZ>k(um;)RW`qj_^
%^!V:C5,)aLf!]M)U/ip.g!f,&[Pue)E'IELr1oQQV]VF8Qts>3JL:$[KmTlWa(Lt@pFf\Hj2uD>f%=jR?TMgm:Y\%f6JfG'R/L?>
%E(JI=:Q-+1Q]?7@$Vn?YDa&Tp*9>Q:Y+@N-DY;2mqK_&C`bIS@>KSVVlP:8-Ptu'3VH;^qm:c<Z08ElB\l!mjHBLGWjNbE!C4IMc
%mcR5Xqo?_Qdg(X`&1tJaqg/+H6(dTFaD[?QDIloImrpSb.sL9aM"el/Q_k)'0.`AH9?s#\gmNSt[[t$Bh-\==?N.C?OaHT+O:/Z2
%T=fMjkA78".\>[!ASLaHqb3kf`hT9[WndQ]>5A#hS?:XpqI$/-oXUIEhS9'm#V9kp]f<?3)L(T)Q]4\PoUrYbpsn(CYP.d3`Ub.Y
%:TR6j[&')6=&j1[;Z9,^*Dt+/&:0+t;-pBc*YjORlIFpKQ/s](olb,&_h[W+)nE*D4,9<KJV.SVnlqaA4&<Loj6P.i]CMk"oD$TI
%*qr8)*hi5EI<Z!5q;`U.DsAIqPO/+>]:oK$?$Y1$?gbSL5:Whn0AKb-fYTHt^A,jGE"e\[353(;o08P4'\;rTou#%@dQY.Qq+X=7
%5F>Y#_=*A[-VlXec2?&>a*ODra6RO&n#sJ]2g['PnTM351_$k8^?@0-97I7_iUIsmKf6i=>M8odPFL@tVmcKMrEdVdjM*A0:EI4I
%YurVA\=7W%hnBD?n%F4?fu[fLo-aF#*udGYXIdis=o6+QOV%/[>Q2-XUmBkKmJ!$>6N6l@;6KKGIC+/q]6@H"SNKk>_^F>(Dm.s[
%:[%9IW4gFACd3;Ma=iid$?[OrM[D]P3mI;dV5Nd>56Rf1Y$]sd46YJF*5(KW0-W>Cg__=]B"W'<MMBh4%GJq_d>#o,ja3of\+QYE
%U[WQH@Q@Qj[U.%=N'(?Oau4jT_u(DuDOe6L1IQV^T!c1(-X[T8eVig-RA1RUj^rq?\b</0E:PcT1"Hk!RYuC)Y00EA.H5OFK!;Iu
%^U]^nF8*s=QaY@s^:]UMHt]ahg#">J:cCqWCA/%F4,^YuZd#qf<dMBEnNNCs_gL*b?@=adq!D^`/'GuLAS_[u_j<BP-?J[V]L9d%
%8W_89IlP2Z^"bHqmb%j6KTp,u1sBV+X,Gudfe"cC<n@\(kG,T[jOlISCXGY3n1'tC2Y2rqF]WbCZ0b,`kO4^^f)2:]c%k!@ST6;d
%XhSX^%aNqgV(l:/o`f)I/iR++L&3CWVp+#>f`UO5jaPcdg-3u_F"r18i42MHD4HGSgjJkqH"><:L6l6WXMW!Aj7fePht"h]fjX%1
%]i'3]h>PRS_5F=5]t1Mpeuc\?@%)Os`X?9>HbRk.'\8nUKp\k>\G*3E-O];n1"37`j6l'Hiua'TSS..j#kUI(4/E+8q\L1Ghj2j%
%g*^FG96Zo-l;g,\p:n;^l#23u[uL(D\MQ2>p5\LUpAM)hfKICDG7X'>\(hfYN?GWg<b_6@YUlrUO$9X0h9"21mq)$LnY5Vh_g&^g
%gSDU,=lZ>.BB7O"&!$hho_o05MApQ&3mD[U9G;>Je3..kSE?Q;hs&U!YUc8dpLjaK84IA1W85ocqXcp(9m#EmSu/t^[#,C4e(!s+
%A&O\jlg`uISCbrH2.:Vi$8$k-&PRI@/8HuP0/,O-j2KK?q_4:]M]SI4HX0R*`Y3/P4cOT6dFh[#<c=VY?_9)nC@_91?T0/qY.of*
%5tLkB_<Yd!YF.Ro1!LiM0'D[tR5)X:r\Wc>B+_gjWOi&+-P<<^-mJ'TrtM/8n\N]k(NC0J8_Cm>aJW]BrU%Bb+WJXp/&^Hdg%]f-
%4-!BL?7sZa^YifYUR.Xs`/#fS_]"LfV(2pE$u8ST51,)sVbVQThACmgM.s"5r9;>=X;F`FIK)_-VU)P6edD4,UpMLY>c'8[1XQYX
%&/S?<lau9g)VgS4,DClOra(\E8Qq2PrD')JVn)h"(muro@3HQT1hL*:GG7ll&eGX[++,.%#p3ahhS$!,2BIMV'F1.qnbj]Re7nY>
%h(F)%ojP7IlX:^dRLpUEqN2#eEgQ]lr;"@kS[YN-b1EDJc-lEKqm*]MHjlpZHZch3pI1AX3SZp-2AkuR;Y-e:Mbh;>gtc03gu%`.
%i\BK=`k)H`611hdpG)^=jc=3tV<h'HfrO:[2YOnoNoAbo2em)HRO&Fq<aQfrU\0mjKuWVkO)?V"U-SBWF0i6$n0mTTRk(bj;Itnb
%oARU3kC&\T*N0e1TMHNoSUL3U@aSK:Z_7(.!H:je1etu+].h$IS%>^Y*kg;)SAE)#5`m_gI/I?'QNWEY4&Gren<+o7M;5q=TWS8T
%$*4@UjKIbF#fa'F>L,/KhVL?GDU\J!=nZh3V!8IJF+FS:gJPo^r,_jKepTe>/08H]Cj^PrI<4jMLL"KO`A?U]6E5:/_UAJ&I@8B!
%IJ8VIas$6SnMCV/p#k2DlLmMUkNtnTHW!e)dJcb@ME-?c:L*X&:Cj%.X7#4"NX]ZjIX#gOWSpVOg%i=Co^'g`dN9e3[+orX]R:b&
%95F7e_/ZrfLgejVBOgWbZX;NjU@+pD<,(gcNk+]R<hR@`K81VtleEPD*&'UKhoVF;^9pQ`5!"Qhi(KLM:;[ELcX/8$TX&oRpCq0R
%EPpDp\bZ#$s,3Jm)lr((eGuXV$q/N][]mLA3SbXn.t%<dn4mDuhM$9EpO\heo!Nl>d3mg%D840+g"k:<(I-DUl_Sbhgrm?U^&JQc
%H1])7G>".1ESp92]>qP'Fu*EPf%p^;6W6M?3AgUt4Z,s_PK^m5X*+-e?@?tkP\4)ST!!K/!15Q;K%sCCn==1bH.MCq%CQ,BI;=?D
%T>"oh[?iDW0+R=jkt4F>[E[fmf'O:"$P+&?D),CP'EB_Ola0sb'adHh\'BN)[BY2Y[D$YUB'K<[g!Y>'G/N6"MgNZK?V#<%?cg&r
%4oD0'm@rCkg3b)=H^[&N=u%rnh9:<(&ijS\8s?B+T(71bNi`G!9[R>0,Ze\]>Y[MbHm5Ito1*\3a9:1HfXPj;d:OH!Z)+&R?<4VY
%Wq()AL)!hgYhR:4r1M3LbJu8CQh0<BYT/MX_JKYCT,RO\o/j6<XYaoY8P?ocZ>GAXS^m5arD8^Cq<k"o28,o$d/?$&+uG;'q>.5n
%Ab5-O]hc$5dp!bUZ<nDo>M*(SqT&lQGOH+uJh?=TVjk_f5#qkN)n+Xr35jEQq"?-V..?Y*F+8-nQ_rWN[2Ek2h)RYCO(Ad/k@AS=
%Zt+R0fF,M7151Ltp]l+old!NHe$o)C>IDVOXRkk.3qMLmmV-;%@&X.>\bGHKQT\F3<nr7g%Hd2Ur77e5L[[S&\-^jRp&3("miU?"
%]3dP/F8nW,KLhE2qKJ:t0,><>f]D@%!Hp+kn"#YQ"LluXmd?]Q194.(l<\gYl(NG:hs\@ak#(j<`k/jR:2fE7@e8h9\$K@*:mcA8
%dOPFW4h,'>I<r?)a67BNSC`2^rT%Lso&.bCo(A;)L&?_h%kg:fTUiDWe#[t3I/84rX*5)ff;5mGTdFR6f>VgV]</e2?)qco2a/]H
%PE*fP4,#?6C7U+jd-c8,fNaN74)N\U?Ccq"o@/3g/GD4"mcfg`kd-?$X\\"Us4APkDu>F%NHuut9b]e0A$^Q3EX<i9Uo5qPpMo04
%oC[KRgZ^f@RZUtGgrc8UIr"*p\*l@'htBgBra`'LR345&+F?20;DWQ?njm>8<]=B'XC[l@[p6+RI:8nY&p.QU2_s6Vo'?3FnEnWc
%a09W7Lnql]eq4(q"hoH,1sU7cJnTc\e+9=/T:c#(Ve&$IMM]K>a0'QQPQ^0;c%Crkm'/d#PWsHB`[39<6a-7[SO+t#jg:-(38Jq1
%pT`Gp"HUhaQT*#Kr4_^h@&mC3cZ`jA+hN-bp;ZB+Ge2im>=Y4+]O[I*F7CFFMe$Pr/1Ia]rsb!oriGsr[e.Lbp)NtSO,n&uHJGgI
%C2UJBidX<No)8R-]9@kbD"&h?Mf(_l='jQ^IJs+,k./rJ#O^tG4f=?YH@#H5A)\m\>GM.9J-?I`O3YVGh]d)rG+9c&GImV5?eauG
%no8)ZIIZa=[j7(XIUm4U:Rm>0oB%rJBBLAiJQbt[AG#58jMN!#b+BZ\-lt3?C,&`DC4H'QlsAZ%bDk)DYFYS_UQrP]D?JT_:D\"1
%oY-DKH#!$&.#Ms$0mH7HMX+9Pqu1r]0V.gAr3IdF6Lm2>=#.7]G9>SQERtO*>NJ3TTV#XEhWMfLY6ZDb9Do^4G>)O1>ZgWhf%M9-
%9@(=bG#[%eB`.,j`qkn]S[_Qeh@Y/c5Dg'$BJ4jWT=hQj1X=.d2_Z-7P%hE@0D0+s4LfKs\m<skDjHnS9tc]r]S'T%1>`#2!qG6e
%DPiOV=h%oZUAdgcW\G:1WA74M?S,Ef[iX>>Pt5HkUgN`U.L#%tm>VUTo0GNLQqn*.8@6)KS#$WI-bo2aq'0Xegjl0_MDRKnYYjNB
%a2m@EHMld_M\q"Y)u>`"H5h&gda/5n/l!b+LL$:-^"&C3oi;UTGcp&Vo0jm.XZ!p'`VD5[Mf%RrS&`PFK=HE7LNMX99XP_s9]HTm
%H]60TA%Rq3hYC$/*2rIHDqP6i%8V%pZZOt#6BTQq<ajJ7HTpeIr-5rbc/J<K8aZM*MXJ6kI2D,\YM^/Kn'*[F*7J0QBWN4l0'tc'
%+rYo9\ZXbP=/:m1n']^>oOUtM1qhQQ2qG$``OLOa4PKeb$4'r:OaFbZI,bZJkt1b^co71CS\XO\_OJLTLgXORWn^`_f=l.PWc1pc
%jH@?$WuKpme'3jOXPL]YqFY2T`QGf_H<Y0gKrar`K_=22I-N(DC@#94Kmm24#>Jhiiu^3U@ljg_hiD]5ccHK0(i(MTYVg6Q)\;P$
%@Qf$MbUbcqEr8bM4uq[#Ku1hY$2]2GTKHD:?&jl3&r70,OUN8!jJ8llb3Ud"&8t;ced&'\);QidD]`QgQ1Sq'MXHRfdJd)UZhA[T
%m(RiDjdkj'brsCDI4F,D#^1Q)rJgJ-s75:JmG>DFE&[Q+L#W'UNO:EXaWpK8//dU@NtN?/O6<kZT/8?N<Te>:,T#?VZkqWWcG+a8
%On@PQ2D;D>;%^V38+5B7>=[Cbs%`!%rmYq+Y:k)a=55/f*c=lCo^G@Z]hm-Dfs=[A1DQ<*D:@3"k1IA^oQ\9cS`aGb>03,$[pO$S
%_c:X3rOUG'Lp!&eV1VdSpi&/r>u:jQhLBo[-f/sNrVW9EH2[EG>PRogH\Mlf#95k.e<^\^Ak&<L#6-`7E9-*-artd)m6[\!I+n#A
%\Ubp=RPiq:@s&^mj1ZbQp1p".pu*9^\2W7C[p%2i1C%j3K0K*_o8W4nKRE0++O(3bIljGhX(eps`qo"5/<S*Ib!&ola?Qag.]k@R
%GaZhOb?GhPIKeB.f(T$;X/I*p8@s>?jC;aoR@T\jEUJ/L!L,8Cf(A)_m1nTX[GkWT4$q^mS)<ZL2M4J1oBZ:[[q'hd5$ZP8S,7Bl
%ds#YF[L8_2*5&N.=_hi>gdNUfC2pN<e[OBdEPOc.`dU:h^oP<SP3TY$2ci3<VcioD>)A)$jm2JOjriQ1kl,g0I/93SkQQjXf%&]3
%]hoh7L>EoRSj1MMWI22h'=Zg`*<+D.<4clRlV6e`UV)cIWoaeHg]56>oD)-iiFURFDg">t2e"$LaIp..)c8n[l>.L`CcZu#3AC+r
%3"sW]SEZ&s.3AXe^MkH8)<J^4bj&g1g\9f'rTUH?_RG4P-C!M2rl(uQUVFTXn>!1&><C1*gsu.;NsV;[TRB<C3,LT\(e>4Us')9:
%50*9mmcp>rM5ll3i+QireP\Zd\$Si?FO8kq4aBdi]tN=9)nb#)F>l0B6mPKBH]FVFqJ56OXOP'9s50#hD;JZ;?(R\7PfmUoi1!^9
%As^4*2uG;_I_@^gRs2A6L-P*,MtQ$a8Q9mD?-[4`X(ni>n7"gqlmI%4I_OkaIK0O]r#,AD's7Z,s5&e6:l^\/Js8%hPj.*r@2qPA
%O8o,fJQo&%@VWO#FbcAckH_"`heqOSX!qb27'20]`Xt(XgO%$N$U)@fo47@BqnK@k9JcO5U8r`ok6=.K,`bbPQ!0;GL7,(?q$0+b
%C]p=G")l5rr5#9+[UV[0$60o@j=5ap4M0#@)]HoVD\\\+ST\l!9s%N`Rs+>f5;e!)iarU6>#s>^;&I6drWA8B>)n,tX5$[7qO.Ge
%.gQ,TBa7aW$WQZ-!@<`5;ZN4$I3=W6<e_tEht5<R4ukpeVFjr"I[Q"i-E%M)Opr>J;SF_*jUqUpq5.p7aE'J9=$r@"6,:[P#U`8G
%A,5oQ+XL'VDW!oZhcG+FcS^7tIILK)O)GWK`\/+\VKB4?64Z^7.%W@1lj+&<kF'I+&?hKE8gnOS7n9c/+W;h)6V@TsXMd]"JK5$G
%Yt60j8Dngn!)"s60#t9e<`k;&a`:;fMlHH+bl!7PMnd/@g.pAp*6-YVqD^,!T:i(EfJ0==gM,R:!Wa11lS44k9-?1\ftL;":)gnh
%#Z*OY`U+?bPs@/Y3!59*38=k5QkU$%R*TSL0&`f3-A>s-$%GI<[UZp'%/A4"JN2/0+e!Jp,9e(aQf8QF"2bkPV]=>'-F*ddWK/g1
%Y@h%oMF:&39L[F-T`[gF7Y=gU(kPpp5%u&n&h/>>_6$5,$R?IqR"W0D!`/%<\0Se]2$i.1Os2;>Q52kT2$a>\%-7i;+Q_cd.\OZt
%W17s;P;6R3o[u0JmI\N+_('u&;i8Z\Qn!fm[`@s</F#j+J7M%r_e$M*.'s-hjon*l_]tD&FLE.Pd1f#RUA(h[Q<$PFAgpT(&e*B3
%"\@oM!tpD(cI/dQBj1\\J?k)`OS4ol>#725fa^%UGmoh'*hb2_<0Q$9CrA2S,ZLGDCCh)Z4q%GGj4+a[Es%.F=WHq?8Np7<aJAVa
%PM%33B[^E1D.<i>lKuA,;I@TZAglq[nm]\MUhsII-&*_lg4M"!)0LuDM4i"gYlP2b+Ts"_d/#j>aZb:NkM39[Jd/#!J.aXI&m,?0
%=(8[JH47&PAI6FZL@E8A$,)-G:>ias(a<!gZG<Jr8Zi]t)l(q;75^nJ=!=RUd/"34.1H?'VAFjd6mgb)ODhoW.Mtl1&<Q:AaC(!\
%WZc1:LnGkKenC/iKGc]N,!9!t!1;^J+g^Rg6pZp_[?Z8EmRo=,k=A[8,g&Va><'Hl^jn!_.Ok:/"S[$IRXt.T'].8A]X1=9M!,Y3
%L+L\aBa)9boccd<=mm&Nb(`.mQUiIWAW"/6)E?)Z"ciB?&>]R[W[[>G"?2SW`[0b'WP+lE7o4_,:JClCXoc[9MiAm9+ql;T7*=XR
%V@_:_4N6\=LE%ro")fdl"cb>A6oIglO&&f4\-T#V[,)RsQp/t01p)0]Un2!$88.C;>56L3BoUXSeF>h*1JhU^aDNe)5sGAWBGEX7
%TE9""`&(0HP=P=0d$164U12W?p)*llAAJ7CJS,FSC5A`RC]u8,*>U:``h(<L,,!)$@R(im%#=-ULh'4F[dUMDOZLVHV?hHfMEjV&
%XIegbjoMI`_\T1k%.\cP7(VL]6tUuI.gGg0a/r&%ZYTiE+%`0&"A6sn7l)Z("bXl'0uOlW&qm\J(+,cJFrWb8_fAFJ0bOpcf`EI'
%5Z*I]QRreToX0*O'?2/%7M\@l<h?M:J7g#k/"_%C(pP\)<Jrb0-p%c<DOIBSCFma?X;DXli-Ij8+QZ],P$K-7iL:<1#a4;5.k+:m
%;Gp'f"V.",&lT018mNGsekCObCaKN'BVoT9TIp?Ze=dV(.aYP&-8Yg`[\:=17mp2i5U>CVW^=!2==dVaX.dLQ_ob@k@2ZFeb7oaS
%ctIq4YU8.jFrj;fRZRr%OF.jM:&Kkqn0!;UPnK0pgSRJfZXJ]>K2o!&5#"N7(+kU@?<?0fI&tqW/0U.4[R*jZ!;=Y2"<.'$\.o,m
%]Tpj8X;%X0!%V[e"!"nf9!(t)pAK5qSnGD*;BWUcXdl'bfrb<[K2rG3m.(,gd["R2%EBt1.*7<!)FZ`KEeUYa#>tT^N?ML2m>5.7
%cFa3-?08alj<F&\AJcD.=I!/?2>;h%Jpkjb8[\[5$:Qe\9j`O/qgnC9,m5c:"QdT&'F:rM7*>m].@(4r(a+"R9!W!N[s<P#JNg%i
%rC)*CGp,qEZV:ujdirR2Ss]d8$aPQs,]$\8&ue/\%.\hW\&Xss5U:34%#Eeh'p0ZG+_r7s<(^li,H_)]QpDNJ.4hn9(K/6<1"fCS
%!:14F5X9!UoEA_![X]p$/Jl#SXs:do;or5SHU8LTKOPG;22,.-5T;6M)@Bd`HnF??ei?MrQ_:`V'MW"#2%;s%6ibs:Lr#B4FNhQ2
%SK5eaZicellOJTg9Yp0R37K6=8_+$+k:&n[_O@tbq$*FoTsc.BADbhu*RMds#UC&B>WNck,&'Qrnuqg$PRJ)U7p[s"+$q6<m&-0O
%@[??b*m@\n7HbZ(VA*_ig6&OB/>t_C&$ncAVFUKZfFK)PO#I8V-Ae>`4TY[oGYpO0IRo?0+Q(UlOQ=R06q]38S&km[9tR!;i<:rc
%.E^ZV9L8@(3nYX?07)\G_:do(O?^%8!-sGr^.mb8`uYPZRUZt\>U1A8>,&/T2:T&L'OC6I/kK,?!1L52hpgu2Ar.Y&2@gEfdpc9>
%e)9n^55Wu)i>Ml[k,bV2:\l8]']C9$#l+^U3%r'XU)>\f*=W7o)UW(ekUmp6\D+a@%4/1iU\Y/^BPg+UkHSJ.9`s+,=ksA+)65q8
%TLa=dOO3J&g]@Z"Q9f+.]Em#T-NnQ_Bgd3ZLc,si.ILueULfNqMYkDo0hb;E$UFp4F-BlNMY?GQ<X]9sB`rWQp*l$T%7]%q:WMQC
%_c:?E9d#?<es$=(]N&*R5qG/NII/91"k6!%%o?Z<;e70tEu75'^p;^PF"k0Q"j%/uh]E,4$B5qF,VKHS-5m,@Cgal$`O&V^JL7[4
%Z%X;Vk71@;LcnqtBQjd$)mE%.S(.X6,36_9b&ug$m!.4M<s.O9VP$B[j,;?I$R'D[L$dS]4"&GfM_m9[!sW`p@>4Dc<a+<ZgKak!
%Na_GlL11D;,W11T![N=85ZT#^(3W)uXZ-D7=YT*<3t)bXMEiIRf&7lOX<D%%'s0l,Sq&@bYF,#XeM@fC(d\\j&KnA`+q99;)%;2b
%M`(VFD3ighY\)ODAPKE]JKkjU;&3EYcMB[f&H:(Q"r(%0q"[&W.F0#BfEKPiWnQ5&O[aKW;b]Vr2A?af6&LX`K000s^S)j5(1(A2
%65XCG-E@PlLUnMFGbRWXCMHaMN`&_]_e&l!18#GX>M@(>SP$IS!$Z#8VA]&dTO_[d`ttR,fZu8qC8U!9`JC#Y_07hoZs;?NK`lqh
%E`^LX:;()RK3!$Z$BS]N4Y8&*5o'X-MDdj16ebIF#Osc=Y$N)aYs\YDqN_r=qE3h=!0XRX'1b%R49g\:)hZ"O+?Roe"g4_on*?fh
%X:HdBn@*L@nr,Ce-tY0D*Tnc)pcU#BI3YF*O(TfC!//om67LB@5li`G;)!Mk>o7)jNWto&'BuRYoDs)'KH6V`#JjM?!7K%Kfbnq-
%^<5Fu=Q,J4M.0]%Eqi,nI5.qoE$T&jn5d5olI[($(pGBBc)RN`/49<N:epE0)9Al`B!eCm!J&W$e3&gr:LL[6O?>*[5&#MBl=;l>
%/<1\u;:iTm`sfuBZ,LT?RWLTVf'B^Gp(E3Wln:)&_PK6FL\MO^3pE/o,Qjs$?uKc]2.=;s;!]>d,G:.gJqJrG\]d$:2XQNJ['T$3
%KAh_G_\T=t#.V`bL3TI?G9$3P+PBg9905D[V'1BqLueZUOZ`#E.EUQnB[U>%'fcB1"VZNm4g9or[ksF-"DDJbddsn[Z9s=NJZU+r
%[p3@="m$D=i[E[ZM3X[Y].Ft9Q67Js8?9=]9FoUfYmauUJtWK^qM*WB1-W,nBB0Ep,+:#C60F&@ZHWEM?XQ[j"=pUmL6=?kRK2:l
%p47bH%PQ-n#N$/d;Kutj;:)''LjNR'$TqQ%n(:_&A/"lM%gb96:J`l%4>V#N-"KmfYUb@D:+NI$O^nUK+/S)JB]SQCj9N@@f&0LE
%TIPK$N+ggt(6Qp8k00)5eqFu-,7DV9*Q)'nT`aS2]DuqXE/!mbO:d#-m:"_a&8p]G#u;42>,Z(kcg)E30A47DE'Stk4JNuHOVKk5
%JRN<(Ki*F\mTS0Qd0Fq1ko)!!7n5&5-#_,@7`<9[h1l'-Ctk*6n^O([L#]ul1-ms9`;ZVb6(#Sei[@QCXWV.tI)JnC'6CGeEOnl'
%OKM.+Z+_>RLQ*2p9BMlaT=lqsY6LnT3E'@3;4QqrdmlYC!^J+^W+AI0c.M+K3Xcm5_+)&aJo)c5<tLW9il)fsb6C-k-?_jV-!M)=
%'LU1BJcOAD"NoCNDAW):M`qBL8pbi@dsZe),#sCC4=2caG_Hiq2*ga@b_Zrue=!+)a@AFq-]&to,#5Q<TM,c;fDsne14XTWB93ct
%!!0#ARU?GJaL"bXC^MunfGBMqDHB.h=.-Y#WEiO?J"/EIO;(]i0,!=]B0:R4&/4=#7883_7E3\Aaq4(h;RJEH$R#"@;G\#Y"R,0.
%;$W<rh&%%QrPBZbjoLp&UG)&X8PG-PrFj<E@(l\"B!Gt))^:E+FI3;"biN@oLdLgWNR5'nI4crq>+Uf!\mZ)qr;qVG1bF`%>ZYP"
%,Pdcn-25rBihV+,L52FVo8LaF),*:s4:P%^3r8%RpsF7+E;IrEJ-6"^>`r_[8cW"uKpuNq!@30?';uAG!@7J4%PRV(***H&]IRr&
%!lT[O2_<6:TU(Gp4ODsJQ,$*\*5\[eK@PSf84nmDOTous8M8.%E(Ym1!7,V;Q*fA_6BDPCg_X\G?5coh`:='==_EPJaPr;_V'K,Y
%C)S%R,Dt8=QVRTRs7/2#luT0L7eR5fM,#kbeN$6&c"Zd<5V:HC6_ULm6nkm.`s%8DFU#BKDc*V1T&tnrL4L9N\_'K=_)Rlr$G$jn
%_jN2H\6Kte,+Q=q:A>HRUl.Ktls\hY"`j`B:Hlj@oG38,)@SO:7u-,IJ1(PB(rReq$L&C3$OaU;0k)cX1OO:ugWW@/X9##RY2Y?i
%f+_Sl,R9B]Dq_L'g5dgL!qFnd!F?B^,I)-$CA@Yd&O=NN*I!W]@#]>Vf_7pcJN$ce@.a5=%Pq<]4@qdYPP$tgnj*jLL]Ei&*s+uO
%>-<&:pqSQ0+W)oo&:q10apNf0m-PuWkSaJ#T,@"[1N:u&T+.V!6YX[41cs+g_Ej`UK4s-WNjsH^a'B8cqZ>g+"f/P[J1/.9E.lq<
%\8`a!N;tEip_=H]652p-9!m#4fS:,+S,\fml+mTRa[)_:#h4OZ62D"rDMU+^9*6/sqiEV-V'UCfmV>>I4!YMO#/2[7gHh8=0df!m
%8&h,\N(btW:m7)McCFTYJ<9_M1d-7,7\Z%gd+Hc!U<ee?$jA23%[XW6gm*Op':GY!5UaEVK!MnPUcQHFC1PL/`.>0@EtA]\_ieIB
%;q>PQd]4YD(S"9%%XcYhC+XfcDburM`<!\%XQ%'\Xb@1++I4PqGqUIL[F(e(\=OidK/70@nPM:?<J[pa%A/S$Q_2&XAaEQ.6!u\^
%"lYt:*)Jn+:P?r)1Vs((03%5aquUdndp1Cb=IO]#Lme=siTUB*Q=kjRK#/baf(CU'd4Bp4;*B#L,.Ai7%8@N^%?M8\?-a5k0gLU2
%*&q?m8)nqEKF%k8^?,shN]HPX<l@;BTq\]16:;KLl\`T#!r5/3pc]60)V)6D%3kOIG9uY9ZQP3^YaSM8>3]dI$O&o#UQ6EaFF<>1
%*Rot>EWV'a;B0,cQCS!u$KWh`D-,=2TJ,I[5s4#60T!hM5CJt2ZUV:FU.$IlU)u^+/mLdohm$Zfe-1/Gl3$nQBdH$IGkn#.YNoq"
%Xsd$ZiG9[8L>bZ14\[Q3K0_]O'WEd^%[-_#3q]355Yd_-6gM$3'?FZZ_8]'3Y?Ugg/lT*IaMeA5L-"(b\QTRRp;e,g@1j=lKj@rE
%jpQ15;C-CGV$R:c,3t6\HaK>Y:e;#e37Jd[kf3HK!BJ;]J[d@iM8Y+08N,h!Vb72\bW\Y>OSIi,//IA5]HG<k"qfl(TF5(PSf6P@
%"ni;\+25G$^@CTH'%e=-#^Ju^U^]CqEIFC536pRn/YE<kD%CA+D1_m.#/OIE@QE)(BS-r>c_7D=MhLl`:@Sq-c*_#RV?IbNGq5AD
%3>[34Dm4]l`-rJS\6c4h^8MD!69M(2OI<F8EPn''cl;=J!(dY7I4[red(i$>m?S\^2AE2HPs3M]>Mk^o1dH3^/rr7mQ#38Hb1:@h
%ZRp2MUDbB&2MqhBlM+WG92HG4PRM";(PL]\&;CPqj$:6g?6\cgX?iL'LZmIojc^i!Rs,^B_O/>GEe/GFS(>F0VN9_7?F_@S=;.VM
%g)cK_f-dj(\L:)NaRU=%0Zf^s+K7%l9*IS3DQ)A:FEK,XUQXn.d"9RuE7ARk3Lgd?;%QCG*=EAdY_VW^;I6T#<jVr27%A?&jB7Yi
%UB!m;p/l8;/9D?^>a$:jGTu?$rdr+,RD\4a[M_VH&+')<CKl=ZIq:%S!a=hLeip2g&60QW)dZ;NoH?k%TNj8$LB>CO`(V7*O!J[D
%ZGl"#((Y/"&BZ;DN[]>"2P;=95**e>(_S?M/t6JbmE"K?GoI,LhU2E@U+;"1MP)NX[XjB$(QAM2OQ+n,\^6YBqmq?CO4d!qrA0AL
%(TBD"e?QMF65,m-!G&fIG_t]XS:oP9@WQj]AH^`hfS<X[K1ekjE@34<A4gEZS6/-Xe`=06U_BMZ3#gqe/W!VV5X<D=dn%AGgGU."
%=rM&*'2q:qRrdg0cL*h>)*jAPZYZ?rN&aAfga.T_O:/uMp2G"%5uF[qMd_::U8/3h2G5$6faqN!)jW++,>k2<[dHan7+!!EX`LTn
%FsVh?!4a:22Ol-n5R&&!=BN3\<L"\cA7:"[M4]1J(9"`1JF^5N5h\9lM04BJ3\-&;R<9-"j<t23#uG*<*n1NV\RGo%Uaoi7j)^>G
%b/ul28Oer!CT6b."HM8<!7[/]Dql=OaU;L<a7fURr#;"3d7)$%ImB/6()!$_n,Xp^B_e5`0F!?6&c`97baX?^SOY26F?j@K!SGe4
%776US.6u2*!ht'C+F#/>&@tJf-a5C@nY0_m<0@bIE.Sg-LqkhPLc%k*/_Z!^'jG?,Ns`UE9qY)eBEYa%nalP^5U7[7K/?Fg=6^VO
%e0"fs8t]G7aWPba5R)B>\Ke"r5V16D&f_i+gou&QVUV3j0TPM\,K@.eSDMV(rLQ!b2Y'RIT$2oei/3KsMHG!7QS(hS!V2$adONE%
%fgpNOd<N`_![@;b\@1=g[*!QeZ]a0f"?ilWb2F7s7ihphf&h#T>a5U0K62OE&BU"06<AP/?,M4:KVA"uH;BU[(HA2_",Uq\](Zj\
%I9mR8.rQM%5r&0HJ\Is*-!WX>3d`a#_C&9BW_`rBV%%f2"ner4asuMaP%i$t#KsG"S')U234e(_<j2;SQf8]s-nO=%,oguOE0fT$
%MUsA#_Bb9M!gI>W&lRKn7LL?<ADnc;W([WAAlnb\N4bo_K/Y?*)3Ej_OMg0i9QE+LYB&796>jg[=l@^.QQ&D'CJ_NOq[=[uofXVQ
%Q<45cK<)6XQ(1'6'BH;lTC<XVUpZ3N.'QQ<+sE%?0gOE&pRsJebK>eSeDS\g!Ktqg5Z%Yo]2;ijQgN]d#!e^RPm]U\bn..N\9VOU
%l&+l%\4RTN94id!U>?mo,r\Er$Fj?)$NbJ;A&EHPllSu&CmZ,k]RVpp'J/eZL(c+>b4T`_-ZohUlG+qt^B#iS>l^$;COjL_RLIWR
%MK%EDIU:N*`tM(*ZnSU_*#6$RN.n2"Vd3%nMqg(kcfCW6'NL;P*i/ZEK='(#:euZW*31!/*0jq^fhiumKd0AD!`=4#0hBa8I'LYT
%F+"EI2WXRdV`,4;?]*[ZaVXAU0M'J^iFfuT6=2@pjAT/#%(OB*@lPn;^blQl0'9P]Y#k`r3HArTk5pqaK*o[YLI%NekD8jiV7Iu0
%&CIMWY;bsQ*<?>kRZW9NI7YeCEXJ]O(0B\)P_8GGgPCu#ahmE\7j#V^PgA7^i(Ti#%VA4KQ66e'Ze;VUAH4oK_nh\J:D+ViiLHrn
%I=]S+mrRjtHR"Mm,ZKl;+Gfc-)X;Wl$n<BC1'U"(TVk(,Lj%j(o'I(9B-DHo0RsZ[kZ\)P.lOu!-RX5<b?=Xo83;;UW%ASo5XIrS
%%"_)$."E%'=hZ7T19D=h<#)+HfbF+!q*kfK^&\D[4IWF-o5P:1b&&".p3-8cMSdC$7@=dI7Ku78&TlthlDe-dNK:+J$Nf=n`H*0T
%)JCC0cW1,jNGVG%8m[Z0"1NM:K$*0_,_6M9o+pK#_]0QTAu+9UB<lN-`[QP/L2qug"9_-<-Q.Sh#b8$/^:juL4P,IT4-1p#>f)$O
%CiQEUQ`14;GJOl^jcUP;j)KH*dSDl#i2](IY/1@NL;&@nX#Q2U?*]8!EmsY)23HB"Q`14MhK\-C!GWAmACu%\5XiZY'M1l'(J"!N
%+BK"U>eJAt(q9Y*n2B],)**=/J$6>$>qb;DOre9/'R&t/'15$rdM.IjJRq=9.E7h&$Nj<YMTZm\!O<6@-W3aj'49g1%4g./Fa6ac
%"c2Va0hB]8bI_4k7+Y5U6Oe?*U!;,k/>MQ-lDl=<p[+F9'\ZD]+fZ_,\P`P@OHZjr2YV3<&.nAY9W;miSuaFNYpBbdcW9%5PI!Q$
%;I,7aGLj)P=U-$R"6:t"7186.-="-b?o*$D'C'r@\.r1!Se_#nH`\)u^YBV1#u$rtAO_R<o<!&d-RE=,:is$uG>Cta0GOC'5e9@l
%:\P5*MDWV>8sqi5%^-1<h\(g>!,9+IL^TYR7(Me+#\\,t?E>bLMf8[;P.F/"b6A;EE7IZtR6`-'f5c,LRV-Snli2BnF.#lb\CAp!
%,r\1r-0-Q?n59[qM`^5QNq$C\^^5hVd:ahBN8u1]p*Od+P)VSe'dfq[(rSatZraH3>ZeeL$b2Y\f9QQ5gmGo<$W\g6Fq@7L+bN]e
%NEf0ke$+2O.XdAoLN<cXc1N+[F<=sg5@i7j"W8o<ntM5.D]AAC!(k$:+Gu*l7t.c:!i5IFToEPAiB!l[9Z^W)qkP30U+`hLClWI(
%B1NI<J>TJ&GGH2h+=ZHgh00Y_IK8&udY7L-(KJsd.eNKi$(I2iE8:]sD>;1Hj!97KO$o^N7L9`FHQAWTF,]F#-Nht)9FLYB>YO+g
%d<pkgOcsn*\8qESW2DVTNP&),S?"6OYJ+@TamQ:K7QFB[Ek2`>Zn/&.Ld&bJ.'3QSbh$Xk,GCPk/R&SN2:Muo]`k)lS8gfi+q,U7
%Qbu9XFeuS-$;ggJa4V)e+c-F=h&6F(%)(Bu:/l':7L,^k81a<P?l[fJ(W!Uil>fI$-fDWIkOPj<)#E6M8R">8`77`AD/EBq:^6Za
%UoN-'Ue70S''hMH2#3f)o72!`eaB)l!Kf>+dqmti1s-MH5m`Ba9/m'-LP-Y,Xt4_&#D<MM.lGJBSfpZ45fmZjZo=)a!N7Y,Rd_+Q
%']gDgSSR?kftO7(9mrBI!<J=8GD7N/.8DDY-;)=_85fbRVMko7bXR&=Ds[q+M/>-l#SEhA6Y3+,caG$Q`V--S)%_W-!@"`(B99hS
%AY\NmZd$o%Zn)&2"D7`)ed%i;n08K&"8lIE,ul'iS1hjc[OWL[EprjJM[e]sTU1kIOf2rR+mCD4$;H:\Eb\L"+!>M!P(t;+eM=t-
%C3<nFC*75C,;WFGTFnkmfqR/RlYgeIg"(um4q!:S0g-pMEX^$`b\&XYX-@t?\6rmhoa*nVbr/e`_+.j-<%s,hT`C8I&Z/MMeQOr[
%de@3f>b6Y'6pWN)?3)7B;"69(Y#)SJ\U^^+UQjOjN1a7(9`JR/fjssHm-)#7fSb-iJ-$2>gAp#oTNp\,pX;BU*\FrDKd-Vdeb15L
%<3?<\;fnA"0^?/=`7;F!EMa?gOutJj_U0D6^UbQIN<^sBBrDcUca4)8rC9Xa00NT.TqWE1ZR8a.`Qe(OCpO@WLa3!%6Df<">UUd=
%WNJ_#7)>mPomfgf4BJ\-ar:><dkY1"_J]S\-t8:E:uhVd'EdHPS2T"8Dc"m"&qaX$#=tpODQBPT'qg'fD"qb[@E2hRGltk1a#HU5
%\/#;W-oU'uODH=XJ'j.;PZWpKFP7$tRSHU#OM(1ZHhT)KW)FFXL<;Rc_5a\o@1ZN+@PN=R9FUQ<=klh?E<dp$O%49ep^T7"<?To-
%D,46VK7X:7CUSpgSf^6YM??Dtc>gQ-nQ06nV=MJSm5/3/Gk%7"VHf#g4?;`bQ8L(W/Hq.Kn;tHZV'Be`/$hB!b[2]UG3%o(Gqeng
%0.5bRLF!e[8I3_.5fl0%Rr^EH%egAO[chh-P33Mf\J`ZF7';;8$*(l^20(sr7%&EU?]KGP%@bO_8U/4.h%lq6GOPTDo?E=8R(Au$
%J.K@1h8f2N*gSimL<;RrJFXHV&0Hof#T"!OdW[;E1*o##F*Su,W4l",C^\a839,`a#u=c%J0>Z9&f)Y_\%/`,j($U&3BBgV:Hn8J
%4K_iu\=Jjc,8n;[[i!@#4<8tD3Ai&@lbY#EZJ`9rD1Tih$-it<7Po)CY8N"q!g"f[2rp]K6lEPnO06.Io>UJQcbstc!874^'7ES/
%-UQibaN!4JC?=Yr`sd)RB!YH=`T667_!-goV`Gk0lK\[oC'#-B4TZgHf"SYTHT.a[!6H``i#dH:P9<>A1FS)M*6s>?LmTJ$$D\(L
%+PBZfL'Pp9JfVB\$o;;f3jK(ad3ClRJtb0um.(2_+9<hrPWmMa=*C-T'%b;53i>e^XLBM5YB.;5)Hg(cA*EeG/;gU#@du6C>gogY
%$$0^rFS4ZLZt>pLb/7(2>$[f#&DMcn/\X@ZoE&'?#N`YiSkK7ja>&t"3C)7;5WTM\dLs,OL;%RR:NPGL/jOg@0?G"u+m>qI$D'AU
%5g+/O/^)C7UfFeQ"3QthF:_6?*5"3VQPWLQ6oL>rQ<`+*-NOW9P'=DcOr8uNo'j%,IWn'*3Is<B#*ACYd?%.U9O]jb5:d<=@I.iV
%;\8SYib)'XVuTCp8rQjgW#A+XG'#G[=Zp,03<O#9oir#b83,V/!<=!B+G9_`[V2IkIAt]&iFL,1.&a_qOX;1$41]0fdi;8m5Tk>Z
%#RLac<hli.IZTkOWa]dGf;/PkL4fF^8O8`BZ\Q_`=GAb6f+bEQ2%<!$CeHaaC5^p1kN-NNRBS8,#0!uC*YAm4"YTqnQC%qQK:5uo
%*<#(?dfG5G!#]$L*M_0hZ>/pllg^Jfj1874C&i"kis?=I_9&JU.BY6]-3<,C(C%-)@$*c*cdqW4J=Ig9jCJSJP1U!^=.V*dOeS$r
%MduH%T5\VWr!nk+!ON\@/k@>Z0o<CehlOaXIkGRi!(B[Pi(-1p=rk>Db`i;(OH'<3?5,c2m\'=eIA>CQ4A#@S[KX8=Pi(!sUs9EG
%;d;/Doch!LC?bWMI;3%1CD>5I.Dk+QQQJ8g$.P3gU^1_i\0fFK5"ZB*[0.W(Yk;cU<Zj<C[S2*ma"LmE:U_oPWIa6"'a[s2Y8OZU
%F81P3'Le9R7t1>%Hc_SM%j;OUE:t&C7d;,AP=qen4Nios*`aSe#59uINB"GYYUs:r.7XOiB9qK)da+8"@_bH(A=NGPN61sW4ts7d
%kd%+]lbmVREprl-[(8M%/`!oWc.-o6%NU@I>F$mDlTkR2aG`D+Ko6(k%dj>&"1b$5W4mV=EbRsW%?QYd[8)egE5^[;_%C&>4NP[f
%O\\4(,I*:>+Aika&WIcZs&8-]HMaZDq9YNN*/@J^m=5UrX5Ci<f@a\rIWPXdk[OsWnflhF;-XW[q2r\\_#\@Gkc55!0o@>k>n4W%
%i']jfMT?eg]!fP/"l_S/IKbWYj`l)X'Ej7-6A>f3l2YP)&h!SgLU<d@TB5_mgZfTI&N"h%6:4TXl-%(YlXLbaO-GkgEYYIINbuM"
%^mcM\.6_2aZPOZcY1sr(EM_LN6of"=*IS!MB*6(F"h.biAMp2VRk)9g'%F_^P<2FBG&UM=g'CN8K"$?A$<BJI'M8K6[SUkYc3&sJ
%US&#a4(;tV8"NDZq/Hjh21S6V^n8ZJZ[Mhq[=.,,jL>q$I]J8<<8rK9MZ`CIhl^E7209mk9H7+C!G^ZJ"OLGH7.oenJO*K(OQ_j_
%`pi%B:3p[WPrDNd:kstZ=Ml[qal_5Qr=)$9Bbj'+f5,sIcs2?!cK-noS@pE:We4XdEOSsg:D\_PS96%cGO29hPFlXkjd`9$Es9$V
%%"5ei:i-4%1+CK+W5u_=.5G3:Ec@q1"!;g$<3uk?>qooh@O>e^!@/tnHuB4WB5Y\4oCu4A-V%)tLONIDQOE7aYhY"Dfjhp.HdU:S
%\G.3*,_5_s+OCTuM#ceU/5Gg\mR6;$?`:6H=)g@5)8VTfqG@M-jgo0?Ck@B4"qQf[.@U2*X;5.q9jp\S`t!&VK<1RfY<'IkE4N.u
%NtCp5H@G^Lqt=j5Z?/MUIr4JK,C$!$E1Wk%:_)G%:,K.\+MTX^bQZi;dLRT_Sg+5>dXuLtUMMOOO=3Ba]`cREbG.o3g4O&JSe^eW
%]c-k;Ou<n5rsO;84Al@1>8OdPjVa55<:Urifh_:Hrt%RTk0b@Rl*JDofe;hbl^MDMMAh\NBQ6'$$E.4_l9PG+*BO>]eK07*fk[Fk
%$\u>-]KIZki!MKrmksUj#)FSdQZHlN0ZFXRQ"4(cE&">?`H,];C\Udai&JE&?ej>a:M9a.2g`H.ZX3t#.@.*.KQ*'!!6CM,!.au4
%ceEdb#fde7jD^J/jWT$&!SQZ-.N-Lq<>D4.]T$ggV)Qn.?k+46+nS'CK>Z;s=Duj.25:oPU(R1,W#Z(5r1Z1(L\MNsS<_Y9FLZ_/
%MtP>RSefa>S)<k"f1U4Q!0AXeL&:k`(-ofh'(-u*jcaC`_j<:oOG(M_Jd?t['fagGHck_)>Wp%86ABF\R'64(WA]O"Hu0CL4j*+;
%O7cdL>f"FR*8a-B?jIl,cB6#\+FTO`m?QH-^J:Kt;N*1diYf\N1$^gb,j&\.d=&S'F9NIh%8ghDaN7Neb1.&!,O5MFe<>G1-[]bo
%W?I>=kdM"/6M)uI,fSA>\T/mXNE6j"D9q9o-NcXXU+^s(RDT5Jd#Jb2<`C`iHo2TsPXc&VX<&"18AV(n2ErH+a?^YReC<q@BIJe6
%glXpt%JQn+`)jeW5+Hg@\`F'^KZo7m*1cca(G(eZLu-:\13b0sn%3?=QWNkMP,<lP-302fEqnWY3/Z\Ur=>i?Uu&&EnT6S-B%=\T
%TT1(PK/S8T1(8e_bL?o[?3B1W7Sl,T&AS7c3&&r$`&/3eXK0RDY>jsE<G^NP4aiX@[.><+=.ZnLjCIO3eD[HPI3O$cjh:cB+G1jI
%\)dZ156A\\pM,iG#@7h]=0agTAWY#h27DAR)5M2Wo5uZ\=p"!+1-sec[.kM6P[^s6OW144,Mo?dlf^iFaA_0S2iuq\0`[,Yi^nNC
%ZGMb52"u*7@6D<[BHgZ42u,F@!6C25!(grU/uFPeQ[F5+MP$uc'afI.8"PB="A<nsG1lD_",-bnZldKU.DHsWrK=A/$1%(?MJ("%
%(XL+R\krf;3P$u1T0(#uPC+]*%irRp5K'8pY%k1:a=hr!l("4/N8cbfT\(1Y+u7V$5Ucn&nt%_&eMlj9[<(Ce2lHHRp,f,)KAZHT
%3HK"D^Fdcm+#ngpJ:2i>M2/NYs,YoSBa5bcY67'e75#/?.2)B6IMr;bPji*ZIH;@6n2M:d-;GUH!2s6c";^Q_,<tH)+KYYTK'tIG
%Qi%g\Dqb,L1;?9:\j:7E<.ZW&k_b(VB8i4EL>EfEk_uL?bN%8si<p5+75Z]E's9J\oaC,Ci^Q9V\*!uB]I7SQU3D>K&<9j(oH<.#
%##`,;LhfC"@A&6BH"kY>O3igAr8?"Fp?MDuR,:2.d;c=_0C&%:!dOQEXt]FtLeKj%ME/[Td2i.VlYJV.014`Z&#rp+N9ACCYg3RY
%V=7Q+_G=f<&.\#qeW.:a%Zl-t!f9D(1\Co<\]V!(n+<]%VhSQ$E:eiY\YY1m%W'WqnkDp;d4_#OG:a:d@UJhm5q%b9qOr"ll5,g$
%KoB2RH",o89o"/24;OZbM#01/cgNj_'d\BH\M0#D,>JsJiV''TbZ/CKAa"?[3111LY^HB`0Afg^cX1`kL:qcEc]'m\ORnQl,.L_A
%7j-Q+U\ii$Xns;LVP9R60Q@N\gnM+I4#H0eE.Ki2[P!l^]Lq%Qi`Bap,a&5"-NGP[W<GQX__:3m4UDMW%!af:d4LrV"A&!i[_>$5
%:geVG>'dBQV0ug`PKdC(BIac]h<(Y5ic5<B02AabhI?[Z#1sQVas6jJDP41^4G\:Fke=2Pd:6<84c/*DO0E;@?]YYtj[cqlSpk?<
%.4)AfQBF20qbSP$HnKL!k7.4/"tm@Rob`4Ra.'W6a7;)e%`$=3HJQW]RraDC:^P).4im(\j[#chALgMr(m5msjCK-<p@.Z$\;)TD
%TbT=<;8E^Oc3LA"g'1O%nteO,5^8ClG/K3[r=io*qR:OVgm4W<l?875p;EEXB7o]0K&+TjW[P>YdWoLi#fOA\Q48rNZHC1lL+U;3
%'JTE=NNZ27%4o&'@g2_;$m:S6*!Y*ea9Q'soJNIahn^*q)-hc)b:i394Y<1_0K%rT-:bhlVJ/_DTWe/>6rB'Odc^<-Z%s%/VQSWQ
%r0W'`]/c%blr6G>a3pgQ=EVCs.HKO-og'2?s3KK4lr^Q(=(8q-6P<4]gtlX1h<\R/>*-NK(#:&Pb+sOlRfNIpB0E]6GspHIX[3V7
%'Mu<Edf$\f4h'h!>$]@<L_ts,*=_TY&?dOGpK0l!i3:a<bInjgcsbt%"9O+s.&hh!WQ7$7%uJ^p5cXHIL%TqaXZ6VF&H(u6J;p-J
%T"s7k6f\lAaRO4LR497f(e)KX@Ll5oE+YHsSaDIqJfM@rdQKR-)>7PFe+tB/N!hlZ\DuEU9c>q?I;^j@,LC/N\g\omG5p&V&MNBD
%$qls:,(6Ls;)grP<p"W5)'0i$41)e2k(OHc&liCI!VZfRC6aWZj>&2Z4NNKYl..1!'&L4,T>&[H3,<B#JH@&,DD_Rb\E\)tEQ7B]
%O-QkBK!2TseWl$dRMUPgJ\cIdEk1m@NN'g)l74Ig@UQoc!+Ap4Zui8CK+JKMGDAo3onD73rI2A%HT!1k0mHiCmna'<^NKbK;45S,
%#*d%2\=<G,mmL+e,#!G<2l9p``S\F-5g7J^P:l2&i#u_:&!/f:5MX?P8UC_A(-\f(b!j)<V4e8UNuSiF?#*(0AFN`WP"[Y,bi#h?
%:C39:9bD,dLko:OOQ3IE78BLj^nINW/*R4'hi!P4ehFp?2"PsqCIe/X>e:`8Dgi:II2<&-]9^P^Nh;aa%8.6,*?3[jBWP[7i,"F3
%aRt\:Q6N(cF_-FX#4Q">iNT,gG;f9'CHU!`N"FMN[llGN<sEh^JHX-L%acdNH2n^#egn?m.Jebg__c246"kdaWHuK^PhA0?J>@r(
%-ssYVb(_C[dE:^*;i-2JS7sZT0?b6&2n2+b;pN*IH<;nZoauue7<BoX1Sut$nGCgnFKF^o"unT2'%Y;$PARR)QK;-j9[\Ak*g`u^
%`2/U/b2a7k:cZH*i'IOhp!'?bG.mF]`FT`3bMl>51K/S+q5;MXYJJO.8i.%5U%NESaor&=M-#;5=0>AM,%T-0$==-u[+RrO[$X[d
%'aOm]=lsZQYQuHb"FoU3$SqK(0[!2"mk#=568LF3IR7EK(crrsd&L(3o@L#;UX#bUik*u!BTt.`BhnEiCD5RdWo+B@Kr-cc-C^M5
%\Rt!CKWa+LA@<@\Or1#loj]`r@nTuH>l=Z10PV\Le6L.K1IL?Y6Q^XFa+#@U&b>4_TMl`/P\Z.):!/GN!KWY=KTHA1S30J76/CUI
%;*2r0GKaDZap!@TC_a.sZ6llpMhJUOkrWn1V8M[pW0e<>0P*-E"`$*^R4M&e5:6E]-&DNs/e5\B]o#KM+QH>E>0DLO5?Qj!%0Lfd
%POTg0OLFe**0Q`3CPaf`rj[,ZLE[WDK_u!IGY0&DZpKjsbHPRlTPogL24^A`Do:eSF`O7O&bt>76DE"'?D&_f0$8Goknm.9(u^r\
%je&gRflL;Vb\(R;kk-$IZ1dA'-Ek=TItBT'W`u=#FcB:INB*>I),RFH,rH*o!K,5Ao.!V,p`0hG*`8/'M<7QV?r:8=hK2(HAc31X
%WAGq5M4e)49pDW2&NZR!JV)I<"B_)6?5F1X;&S`!()=AR3VK";>hGSRnPiX/.]g9]gno2ef<jYC?3AXC_TG-e?a4X[7LYN,gdmVm
%>O#.NrigWSG"+.&Mqtb%a@5:3Zr)][;8l"rXX6T'Y^j=*%_(`>lRnII]Euj&R#hcM+?KB?2&N-7@Q##c*oIT=M&s5<"p4a$A/<$$
%+QKGar.bj6Ds=[2^6a/MSFsiU48=)h6,Hc3]nXsV9VFj>n561N&Kem'@KtB`Z$b:3.7Z3'cRGsg,O`Ls<hC<'LP;\(1O](U8>Z)-
%N?lnfDj7%/1g<AQFS0RHE.HUgMPY-4mqu8aYUn2h$E14<],1[njZHU2ft(9.oiIErRL8>m$1+`V.hl"-@]#Jn)%_)b87,08)UshO
%Z"`XJHMJR$<FkbJ7(4h,]I[l1580`q6qW5X;.L9r`b']6b&e9)!?;k?P`'dne>FYdaDO:Q`Tf;H)o%&4?-Qk9S!]BF1K9e@`gSnQ
%-"MNZ',[IbNX<I=6Bt"H-6S$j=VsZ38(=7fDbm?;ACD[#]9h`I>YBhZ2.l]IB9R<M6LZ=!hhTdF=I?[SFq9uQ<:dMZ8d*%E;u=)m
%LdGFL40Cm>c=5/Rr-?ObM3OC(8],`8Qc3K:I^IY'7eOiW)jaD8&i!gi_T:#lVCPJ..TRb\'(WL3.=\NhBaD]lQ8>f%OQdXZmT@(n
%1ug!tn6RDJ"![UQ``#H@^;I+bPd*cmCN3*D-Ye2D8MtI;=A0'^+jnG,&m"R'GZ#g!%jO6@O[4dp![o:jIL1_@79Y9WEkP$#oNE[.
%6+Z0I)N09[!#au)o!76+US0lZW!E#Ci@LqdQjOh<e1^-AN)K.JeLsHRLHbm&H&?"1.dJ#fRGqgE<HG.*qAq-3rf.oZL,s!59S*#"
%)Wm&*$p^#G1*D`I@46]2:S_81F9']>jK_0BK3[j1P(pNqN`^M>/8Yd(^m`ZRU0C#4TX9)sZ:'g(VM.6*<=%59/;md43;1J+IaF%8
%BEbK&BIbn$h/2ha;*D/B//;A/b!M!6o79LKC851#18,=1gej&/k`NQ+0:gK19q/d/K`?j,&X'g"<##KH[]hf(BJUpKS:mSk=64J/
%fhos&1hH;<!Pk"<\s@(ODPBfG"(N40RNg8^Ymkbre`TL7iiU[&-Ku]sXi/_1Nc])d.)3g).\\O@26$JP\[(UBQ:<cH+X%p2W\LXf
%IkD-i'K6\rB5FHag2V]Rp+dOllo[e5J*NRHRtd9:)^<Pl1K\m9H>Sbd8DM=SgC@)*GeBDdM%?<YJjBNp:Zau04s3B/j2fN9F)["o
%RNESSc!jd@eYKQ3j[i2calteH;_kui+X0[09Y&<8K/;jp*:e?!#:_S3S/F_Q"e&!gXWWaeF\Vcof+9(p;\WVs)!Y>)kY9&q%YdYP
%4`]>_Jl&$Rk(8I6%>N(LiG^Z&K"?/"6N/NV#,sKtW:HoYRXu83doiII\XWP-ms),]+I5D84-V]%9;nY^2@=1do.kpM"(hek%aFOt
%`AbmN\987'm?iE'"%U43j=]@s"\A\k]bU:)GF\:rh0N)Z/lg_#!?hJu.VVM_HQeW"=`jnQ;/m;XUAWEeJeT)!LJ,Chd*:QMfeeNS
%[JD%Hp#^Lf3LH8g^Nn@u_2;t30g)6Yd>0Dt<+.mj,b=(1,o<QW]fTlHhlF=T[NJOMR&`uR]t<AjFcg;Vp+%WXi>n:IM^\mJ1[39l
%$HP&PXik,\kRqMEAM#ck&^)KP%pfZC4&^0[1dcCX$k4(m%&&jC0rX;dAohl+KP,S$.IjG(S+197b@=6R%SAi`LG>IGEMj'[KsM/N
%QocWZ\.gP/91JQ1T0^(2b98Zrcmm/-SOnM\aQ[5GLL#2EXjmKtij^S*f/5:!U"BB#=o=`QZk.Cu_lk%"o5%oI;$)W`gWf_sIq$i7
%ZdcH<.9%!tbu?&LMF"2*#"#g'O:<U'QYFrQW"lS03)n-W$EZHF?XWA\//K$Dh:fC62,[8LTlFC(OI+`bfFPp;M'+I:@6f4nCGBtd
%V$3CEQRj3[UqA!=FNe2<\(XP(b4J]jRk6K_hGM5f$YuapF-\R[JWNPh6oGaWj/jjE`VYd>L?il<iPO0^S#EKX/WeD<=/NbfRu*r'
%,j(@dFLV+EmdYs'dfC0:):]B13DqY(0SqQWPS&/o)(6aq7P1[U`@!]/#Uq7G),ZVH852/:18aqL6Q+Q5$D3pROF%@3f:n^>=@S)i
%1Dn-eB&g.a<XmO2V68aQ&gmr+d6W%,>"(^%ihl'O1Rf`I>uY)DTe<7^b^p[1a&C5<O3,^a&os3p4ol8W(8$*_`!K/;VT-;9l#\J*
%.VU\s.GZC!ac\`GQ;RCY?F3"'g9:g#\[fSA&(hIR2`D?2NZI<,>?b#hRs:KLXREn&1akK0H[&]`.<AP7EZ>obNuTQNTLB=U;A^UP
%%#<#TMYEYi$btBA0J#1>AbW+!Z2p!B`Ku=o+^%JLMb=_qAlEt2+L.,]2R?8(&G(N8<e,cfKTst)Ue%V_e7[\2oh!h1Un\\A.C/Ti
%SW+7T0nH\*0tGAk<;dE%iJ++"`W<g(e3l]-=2[Q/BeFk9BlLuKe@q2E$$&t%AVSI4*V=7-A/`K!d%bYkN\<2VLro=QR`$9?!<St4
%Jd?0ODKp'o(DHsBc>j47%S\dl+K-COH8$-HAr<>I[O)4P=ZJ@$ONfp8]VOHLK7Wn.4/Jmf;7c(.++QO<?cB2VGHK(,paLGQj?[+*
%W'r(FDf$][Ar//NC02ZROc",Ee7N?WrG$gSa'L;]"$D/X/AY9H[R0(@f>]EJAkC;+o_YXj[]gI>BE]:9,MasNWFo[%S\_FUREGMq
%[m]B6C_V5h%hS5K_6FBHb"m[;F^>%W`tY.Ni,=6B-Y<GUViseQf=iF'j6/<n-aW_%M@fBj`9iC:BDT$q$r]F!H#$o92N(a>Zg)XJ
%cANf8#r:(FY)oNP'Gr0>ijVcj!>HnTd&-J$7hke4oEp:t=f.qT.3Ook0q)H5oQ+0/c]B3aK`a+H&FBZI[5[P/S9rdgQZ]#ZQ(u_k
%ohLmX/a>roR0nGs/5rB;TR]KA84PG*U8I`C?QWN^kdn>5iOLjX^;Ydn6k?q&6o`AY>s:"J%gn8Ub[[9Dj%2!+$!*Qf[H]J=2#"7N
%H7[R2U)[4e3hT<A>1T9JVCZDM"dk'R<Afs<UZsZu`4eK7%uR+B.)ge-.h9W[DQ47a>tTOC?M5#:$qeAK1!&<b5m-VdmSe!AU<],u
%"4p+J([cJHe3PhJ0#qGrkbX/c*rN=r/r`aCJ@QDF87W$_g1d9PWRaUp+%4)(doAVd[JRr0XXs4%Fls*]GUTZh=IAO/9I%D;#R:Z;
%N_f3j<C4f$&n$B1IP,C,B!@VPH3TI3*g16S5DslrV)#]nT:6Si&9S1+i[P;#6j/'UEDS!7)h/=Sb:i%l2<sBj5Dg[:4Z?tGFg`J:
%EtH,YeSGH>?+(8uT0^L1e0S4k`-MHU5uZ:!9qE$lJWkk+1M:ZL8jVeU*<O<)<p[9WHS;_iTmIFhV^nXcmd\Uj,MYZB>6Y1qW4)OK
%a+rZ2)[4`t#\B08=$WX%Rs)s,nIb[?j<gdW`3k4C4\<;M0h:c)GiB/#HWc;*7?5bG(`,5VH5+k,?',7"c)UuY>_U9Bi<GJk/!S#@
%3KhZWRFuYUTM0Aa]h;pnoJgC:@#'h>9^Bg1e:B0n<c'$#JuMkGWI*C\F2>+P_5Cak#o9XAmtjLs,AFEe+lca2MprAn$^k.Y-B:@b
%1&tm:O_$C%]5a#srhM6A"-*UQ<g857':IlobgNB#-M%*a!Th-6N<1CF]uSsXT8#aYJ;69/RCrCI"[JsLX="?'kWtXcBIJF?ndLJG
%)W??!C6u#:-Ai#s[$f$B:+c8"Ci'`]e7k6`(/Pd6!9G)pYZS6!SV=I;J.r.D!b]/i.!LK3&[-[*I#&C]1F:YXi+,=[`IBr0dAM#<
%WcUPpJn]aFNJfqk\'/g6N2k&e`>7,.AHoV"4K<?*'3\i`WNnD_h(<d+.i01pZr["F=Z:O`qksFM#[e!;M(\DpQbXl0'8'gH'_r14
%I4D*RFm5cbm&Xa'0<dVRPW.Nl!2:;:g5=<0J0ZrXBUcg,j,'4UA2%tJ[@?Re'oS<bF$VSGDS(&X^m&O;=,EonM-%V>"9/R[DVl.G
%r"6'T5SZW4O#0A_<J\_'JL;tn1&SLi]u.:[01@LZb\q>'0.pgnF-F(9mFEJ[R5_l9lu&3D=OY;M>Pr!O6kJmo'7ih<8Rc=3$kS7a
%TS6fsZE\s@V8Ed;c>F:sN)T/C>d#.PigQ//chU?mQspq.KdCEL<CTujs+3d`*^QA*%P?>4niUK@HkqF.V'SY2OL=O&8K(2=E(8b!
%`26#!IgHJ]ee&7K"VmLh/S:HSn/=+\I[Tg&FY6N.e8,:JjsDm5B@APj+p\r$2*=",Mo=IsQ2-f)C/0.0j,e(>>53Kd'm)RMeN\/:
%-Q9qXAi(6<#(HqZrTH_i!S'>Vo3a<YEWg&t_?8.)K':Yj"sR;T\r_i*=Bn_`:6':u_:'8c,"4j#,?[pJN>Z!(\d-2/$I(=6'Zm-O
%:VH(XPa[l^nP^$+A1j*Y+=0^$n=;S:/tUFl3!l]#d2A[>.pQYY9,'BDU'6NPD</fOMF!Mb(>5f,l.-\D9KnS.,6o.RC+QZ&n3Li%
%]A6<7V_+g9F;>DqFO"Lue3BOD:cN%uPu!tu$V,4NF)s5H8BFSXQrT<^1,\6#i-j/^;XnA96tS$=+_aK-KZ`!8!?q"qQ]d5EoM'UI
%8m4;oT<V=i]U**'#Lp4sFb!1Y%d1$`>lT1fgTl=l.iNQ5Q/mtngS(ointDp\(bHs]2\)876cFb$06%8?1$\fp@rN4b-4n_VF.F0F
%:6W.s(bI@%fuY.n0)Eq]5Q2o!4)(#PkZ!n4k8gUeB5aPuR"c`^$"E=b&?@@L,b,_D]4emA%1j*(E>YWQP0,Nr%@h6rm:(a2]SXq4
%UqRY97jPEoE\nr&Yp+acaVok2V9FI[%,^;G'/apT#egulkI*YZ=V,]/1Kjg8=V*e;_W8Ku=u-Q2hrIFm`)`]MRdurX`cOG!Q,[q=
%0Z/Tia+`K4DNYOcb"Nm==HjiCO(3>A-3MG*8LTEh*sUB-ZN4O4cO\&R);7A$EfYRrMouE+8P9Q:$E#f5^cjjOg$:m%deliE]bun7
%h^cD%G"%=IH)"q$QN:R"R1=!Yr6D\FZf*`U8u\@.(+)E[E1N:?_7ciSX<?fs$9K%R=Kia"GdcH3lLY-m?"X+6J;@3RKUCYO1eG!B
%;;K'W]@>NlEM%ORdpbN3XAfOO@.YT"cE%rsYYJc!p;lmH(LosaZeq3(2Y-=R3<i$P`hTe&[Ak$g<!/;@*\G2hs'J*Xl`j=P'InHG
%\hFU#-`UPX'QU[:;RuWjM]TRrN1cq$Kss*!40hkn:p5E6_^$[730M`O'!-?W&N_@8o/Jm3aIGR:R7@B,;Wq.Zqu;c86T(biY@'N0
%S%LFY%+3U!XT@M\@J5/9@n&S=)C%!4ZcYJa$HjJ,)-i62qTu0YD3Uge"HKsmG".I^ZY`P70[.B!B%@/3(H]AKbS(sj+EST@RNh^0
%AlfL676(co!?#p`_Sq8<JI@Psr+&Y^;_<%BA0BBp]E=r\#s]2`VXPdfC2koMT("X/+]iG(hC:6LEUQ_/JP)e1ggV0&#Zt6L`bC/-
%6?0WAVX7+A`HWqh"6MZ9_mnIWD=t/*j1'UA#+#RZ^81"`_s*W2N<3!`&0R-GiT0;2Nf4K.OFQJmiQUOuSP(<K/gUhSO9;CW+2^RH
%J7DacdKV\4_&G'Jk!J-]%N<jeZ#6r8g.[Zd@OGR[UP^(\Pq2Y[b>Aoe3g!7&F"A:7/;Y:8;3u(`.=oBY()-f3ifDj9@sP&RQ6egF
%*<@@)VFOR5B[\&-k/,7'fV=2D3Ij0T4\uD_9P'QB5irEE$PjdaCSg'65ZFjBCh1o^;lHZQeI^N#$TFL5(7[G>1NQZtkh,[T$Ob3`
%knKlKOp2%e@jTo.WF\gr$eS@Dmk)`,7``BCRi<bg.MHL[-U:ZUX"'KNX&S`VX:o[ils$U(jH<,9paoP,@k5@*8nA?0ADD%pWDVL*
%S(XmK=PQ(f0^c!O,#AD)F]&4X_A5DnoI98^K,/*$M*eG"gGL"q'k\3g.!]P-.;W@^J]I8=RLt2We)sHh#HEjdDBJQoi`N>gR6H3H
%]Dp$fQbLB[3gMj?*fZ'Yc$9M_VRh2@5tSet;Y;WK[MYrB/I23t/p@>raB>?rM!.V[\0$_'WE"H']$L"iP"QMD:?XktLMN[7I:bMN
%)+NT+U$hO#5fkK2i/$ZA=ocg[ea]4!W.V")#Y;TG,\(tV!Mq9Q;DQGfOr-7sddO.3#73?RWDmJ,>d=5[8t,,#Vki<?&F2"r&I:O:
%J0^&0>>nR#"%i6oCgtkjL]h50*:NN%P$Te^=&E'qZ,(YS%>jXO>2Ub!o$Rb'A_;.Hc^,C]-!$2$M_QFqW`ki^<?9kocZ]?86#hM4
%[LlFPZdKaWDQWFD.#pejHQag=L<jQ`iBf:rGPHBa..JG7")EV+\ku_;`F;KY5;*4#;05ehPsrNAU10XeK*WU]1m&.[[8se=qON/(
%K#W/B:*bB-[u(c`,(phB.u4d/n<mmL(KT6GbIZVZjB6He$!-gecrE3,l<gBJ0qcaD13>77=;e\om9S6M0_eE>)*mr$[-VhGWd"Oe
%Yu2S/ri(O!C`XVcTkICVcG+s:-_Df&BXAC^dh]"6;XfGu1O^E<PVcgmPpEaI4f)s3dD+A#@9))8A'].:AkS'@[?spYjGDf@6e^Cn
%)BgZLY+A/*SS!@L>$n+\1=%/dMNi@uM[GZ+$K":JA#g7?E29MPk:f.paskmIPFJ"HR7p6B/g;=8?*eZm,,UM26e*0'RBMbnr9(EW
%r`HFELrC.keaW6sB[>Mu+*tuA5&=Bu#:,2&CDZ/>11p\X3M"JY>f9uV7=dqYW\NVY4sRR@36Y<pc3NV-koR#"Rnf5.9'2dQD2Zgr
%3nmYA<0\&LW^h1l=;nHf!E(bV#/d2XlF17]_J9ZOLeq6)J7oDp@PIq5T7gG;.OLB]O2X`\jY(/Ce!Ng3$,,gB8We]iBgK1$[<7qX
%83"FNj+TU'Tp:]OYX35mlgGRh6]i.@;!);l*::2(r);Lk>ao>s7uMDU2qN%ld@='!ic57A)CR?b?ZFUZm\<a3I0=Hh+=6QP?+B]M
%nFB>eNbQs5="n8DEu4R(8WBYPG&bMQPPJ+mh50-c?sO)hZnmhb=Ll]"4J*n[+g3o/\oLX#^aI/bn470-3p8\:kg(A&_@;W#%3F7d
%:U-1"#%!Ykgf\Hpo,Is@U2875HR6G@`QGKN#>C@U2^CV"L=r?P5BMr6)hpNK*E\=\<A2Em%(aYAMM)Ebk*0H6!'jM7-rFp^mWr=`
%nI)aWi#J@@;Ysn"ldcN=8gpY]lU6NV-PYHNWpB"ld-q@E6`LJUa)bPG;/,&h(73'(k_:m'PLEZW#P08B`Vai_i@MGS=3?X"[?A48
%9Vi2lP3Zj7mWHP,['`\#,q2Mp5pH()RG9:['oJ7bb5`WYr+'?F>l6Tm1,?h)S-W2ReKl$^]oDp"c>SX[IXEek)r-LRa.d1"GbV-q
%SRu@qqYSaWpp#+Fd]WC\TkQnlHIe5_b)rY[9%#A3[Oqq\!MWB66Wi]_BPdN_3'3Dj#epZ\',`]/8Pn$sn6B$L(L.`ElcTm+636-7
%2c9-U#i<;]Q!95W*?HVCO"FYWgbSq>GJQXF\'cfSEDkoFV-Spe"\V!`n(H$e2Lb!-2?Zh_I77M,"mW6!K6*'4X;&ci:9P<Tl+7nf
%/F=OA8,pM,T.X8'9?=:RqFhqf84:-\jO2-D@u%Cg4Gk[j%i5U[Ji_9t=<VZQ/cdE"PO$/dPF14,-ee5X1FU.;42`$bN,c+6([+hc
%MLntm>hssOU>qc9<NoG-'G7KX?::*uGM*PQDl*jq9Cd/"3PnFAY2gWOc#R>LPd\&3dQ8/c#'Y"Al8I]I?t2Wua5r4bCU'e;`%Y>p
%3#LOW-=B!+rR!Y"[[NH3hj8*HIX,^6bR=pp#+uG;JEYnr1gGqR8T_=2)9q4)_CnB=#H]7K!EN>hbF&A[b[h-[lkht7b`0WRln%q1
%Ui"@"MnqFndh'oI<6dIe3NF2_U3qW3",\$G>89G"'@W)bL9#2?VTOMK^dI!SaTj4@Ll*?>.$bURF`KlY\8c/WZ\Q5m(S8d%,8AYp
%bf-3t%=C_s5WVG+PCMke0OWjWB;K&np#[o3Ah'hh'ThW%R9,hkR^q,UiVDc/VA59*,m^q=DLLJ?r=^LP=Cb'N?WTG,BW9d_aksjT
%e5UE\>p>lVq+gaT#YU/iim?itJ4t/XpU_XF)Hg95kM+cl?\0De4XE&no:W8g:u5n<FVj8WM2S^F$7k*$lAhgKZCa2o,tee??]i+C
%(g#,4fS/&c=&(-Kct)1[1sqf`#d)g5ZcPH(NFs.BYZ2adR+*t=nVVq+5frrI$l9--i"%+)054Qk2)m1,S@[0jnUXBu-[W%3k=>uk
%jEQe+K,$ts&tEp]W2L7>"PnuT%VId!4TS.2LIn!nD(9Z'U4FXS,fP'3?O:<E\OK2U4jd^)kISO#I#VFMk6u276=Z,<>8i_s,cl9G
%O%+.BGR2MrSjd2u_Y]#W$F5hq!N\7uc]F.G>*Rei5$E+je/g$HQCX(nEEe$f2U6Z'au(X6W%!'B3eKqO)Uk]<<&;@_hGhsi[!^Yf
%\jp[g)A_9IC0"A)GLYnE;P"o>^]Y!_LX'UaW.>1E?;*W9CthnJ;GGM?_D_cb"kg90:$Qbi.-:fR-d?[cQn`BfEBI_l&9I1LdNTc^
%8L^YlDSA!(.ODZ]&P1r-+-=Fs!+kqrb%C!0N><hThN^\i<>\<LiBk;`lV:hHTlPb82mSL,i7BOT%Q>iS@Z91n];gSX$N<NE+p.>u
%UZOLMCbVg/qo_ku14E1Mq#Xu,$h#E&/:N(mp+rS^/lSh/nl!2Od7@mF#JJTe],OdMY/7Z:@e.d?lRl2IhHg(o9SE/LlWh9#/=pg1
%fn7I1U5d%a+LY0Kc-[2I[5c/?9*tnEN(UntZX/!C(6AG]DD\d%@k_u)GK]T90FZW2`=P>!J20MapUZ<=*[K?3i"ot"A;YIQlk8CA
%L&N_0*(CcmYWm`?oa4Q2L4:s<W%jMQX\)^OA8[/age^l@VZ!u_0WCde6GjK9>B+=!@Oibpi@HHDpV"K:gh9LZlklVXVJs$@VsaAc
%dfnuW65q[$ltjM<@bj9eeWU0*]p5leNF#2*EE=>b@4C%iRMK"rW6n(E%MXoT0UR59Adi^a3C=Ri*FsdmOWiDafKD"Q8BZtn%HiBK
%<PCo,dDW0PD3F#:99(L7,XuRp7E.KXesB[R$;(EfR$=%3%_C7)'p-Sg%Hf[L8#FIHo<^i.ad/+0]8M:J0:sD?^keh&hf.pt456uc
%+Mm'W6ZS(?l"p0.&%UkBG*"3t1SgiU&/aVt*c@3t,l`kNGaXR)'-\OP]AhVgY$it;nJV]Y8RIuFIUTjHH'Z"#dkqC:2g6"/?4rQ7
%]NNN-9(&A?+*8H,Rc$I);jk(l$G5O@-TluB#7Ag.17cE/7iRR?$;("IOu@NMND9`:jk@RUTGG5B/%d#c9>JVG;\P4&&d/Z`8=PAn
%fa4Y[WCtdD<OmpupG1b^)XhECS8h0L$p:$W6f5E&?spK<2lZGu9IR/2)$M:6lQW)hF=+>pcLSBJ0,6!ojFh:a)knd8>h\X[0^>2_
%=hM7A/Leu.)EB)T[jjae-H]as.H=>%LF_R'"uEqZ;@^Kd7gLX@&>[1:HW`EGEnl%/Wk4d]nL_J612:#Ic2jA_X?/44nbp2&:e'tm
%NM41IPe9tCHV&gHq])+sCe^3u]rU7_+f%$9;5Dup3d7o[l5t6*\6PJs-]@!oW,cr;8k@565T-U4Er37$!D4uYl.m(<r8qdoi`7V/
%m%u;4**C0$)a`o#"``p!R=-ua]QW'oP`=!1Qo)#g:`*:>L_>^nVLnS#l5]#!ij"791@^5khirh[jNQ>eUUK/#^6#olU<R[ho?6XS
%2F+s!&sFHV;7W3-X5.b@+j5[u@jA*X.*@@aYo&01llls9)^"q?6YHDn&#Jea#(=,M?=K#gQVg]"(^8t@JP\6mraA.eM$"Li5>aE7
%F,Epk3`m<hD5O\[3m5G5&)8+HAFSjuKQZ.)?6UJAC'_6Z5UmsE'9XgLd#_C^XL1bdJCl?f9=_acK?O+QbL'YWjd2W*MVL8`(<FBm
%78Wu\l<u-H/&SR_5j;;0m;N;HN=/!6St][s21Z_g-1*a*Zdn!g8<er/TS.*=':.1o3o^\XY5JnJ6l!&[E9[+dd+a=HMCj44kYWGX
%q4Z\qr5D'qN0_X'1c77A#o./?J=0giP/MH4NlZT9^3)]qWsLjgr$RS&_+'r=q%FMi."2/YX:13O(iQ9%RO^<:PGj+#!Nf)YSeP9k
%T]WK;]@`_W*Jsq#nmb8:Ef#NB]'rD[Fd`tD(.CXoHD!$8YDJX^qGY!KLB8BG\&osb;/P2,<[e!@E`Y9=]Jlh&\(gjLiA&rsjkrga
%#OaG"Q0L)k4NsJ:!?IeZUW=n'=dS-63o5(IJEq9eJ&&2<?%%j593Bl40\%q(,in>U3rHn2Y]C9l0r"8,D_=-70)I;?'WPkF!@P&a
%"tH9cq:6Pe@`<^Rq%3dBWS_n'W>92;%LDH`ZL9@h<#&7B$l/\Fp4]^1X^=J4l6KB0/igR2+d-Qi/D%me;MU0B&t7%^:@Ub=gl%qj
%aQ[)K5`5iPL6l?ae,o[c&gF>ZAfBd\I;a=T6_W!QT@"n/!QQFUq1Rn.YMEm,R&%dSdt*Qr31+PBm:iamZD"BTTJCkV?CCVF)2DjH
%`p3E.E,PE@ZiO-P=6s+$m:GE^D+MA=BioVmi4NN6VPX,K=7*&aA#"QJPsYKbW/A^=h!D?+R`tl',.It;JrIQKXH#%QiIKGg+XL5O
%7s!QLM8L[*oSD:B,W<a0&oUM(C*mA\fb1etc#D/fetq]r7"p-"_I!Z=TBnWc33Ln.V:@i>Tu7*g"[u[unjV[\R;[I>)Ok'YDNc68
%4s1K[-HBIgWnCHr55Bt'&E4iMge'CEH**OA>TU$HTmQc^`enpYP\a_o,5JL<*qj%krUgKPJtO=)CAmT]?#n!bP4GcU<2ej/W)&e/
%n::'H,nPq;A#*jNYn<M(,RXf`mHZ5UgCC3X9LZ'[\m[<Nr+OF-*#NRO`5!*sOM,R(^e7T8\`mRc`0b2^kRWJ4<$ekIO1.G-oBj_>
%HXlAjh1U:P*<et^Fo2&Ss6K^a0E;!crUW7%qn(a7qqp8fs2V>Cr;Zc>5N:\;s7X2IXo7_]``I>6HY!\5V/b'rD(Q"q^7f5(0DtjK
%-sPj<EiC3jo9W)'R12N8.Yng:qjFik8<$`mMdop?M^78Wl7UlpBqZ7hQ^M[*R6cl?T\!4DBd[V7c.(rj[R`oM%U_:@%m5dr$ia6f
%a"t'?==ams-`9@@kB<h@2@o',QXBJO:"R$/6tEO9Y.tV[ZXECt/&dCD&"I!V.C/4],/tI_4I'Krg9]>*2OBhdTaL\KC15eQbTb!a
%ckFQ=9<#P;]76$346oJ+!n)7cs(!0p<[RXC,O;djY1W)V0LkZ\QfJiK?0Z"\/5Y\j8,A,squ=2_rm9'sai96B;t-!HaL$RY1l4c%
%.B`u_?\0_?;.cXOn9@d+"N0tVIch>37COS2_kA42VNdts-Ztc1CRQrh,4^u9O[=p6m)7!Qi*t8&h)Ir(GjpE^FGUkr+mX6+lF87_
%l0ZYIqqH;8mgen`E^ak:bnO9`2XRGFC#Zfn*RJT3pD%*tN(pgI3fXYIeo$G+U0W("ode"niAGDlB!dM<QNfujXY7k9iUP$UG"1h'
%HM+4%"$6m$[4_9:EH783qJqu@G$k*/YTJD$]dpFl99S<%bE)N>2sYn!9Afa-5JR343tk+&>r\MTHD#Af^"sunaI,`G:3`noOO_js
%G!fMlYE48AoVW5*9<sjQa`,?X_1'H+`S8a;fdMakL?Q:O^k-6#+^J8/oa=d(f!8^b6X,\`8&K8O;)m4%8k%]Y.`J*9@:>G6P5-Lb
%KGfS^7d97CRNQ(Uh#9^ppX^un8@BL:B$)&e/dN+pacF'dlNJC[/&u$1WTlEU)G<(:&De;rD.!!?PuUORJYEs.69'-@R?p]kV:W!J
%V^F1aUnANH6#$/YF@>T%=F;hahZ(fEoH6MSf[1piWNEgXUTf:>:qE*Ym:lC5hhbNh#d,+mQU['S%Ib`%F/7Z7K8gU1\K?klTQlfI
%a`aMu$Ro4"Zb3/nl)L\B'rM3"A=@R]Q3hfM>EZg@&h$BQ:f>1<:1b[u-P@^JE"bfH5+m,AB1^tL^(<jao_g<3$:2gH.6g"iR&V#=
%<Fur<_E%0j>NE19';MeY"FGme7KRn&\tbKkmgC9i\4!h1.S'-XL9PUf=msdP][;J`Q(OA-<=BLQ9_`.Z4pMa0CYuiC)h26`;0?c0
%PXi1I`do=M!cniDQ/]Md%Mrl7Td,sBptjB0<]F`Q#O5G8ZC:Z60]"MHm!d"b`S5@'h'd$f?NULJ-C$f_<DJE%kTmX!R.7^RQipu.
%TY?_GT+;Y3#<6C#NVOM.,?Sh+\Q!:D(r?f8*gi`ga+ZA`pVfDm>'`FbW'Wd4+M2&cg*.i6Ea2Sm*7F"`das'&WUe:l7,qfG=mCED
%2-m;XbjtkOl.]db5>g"tUCE=9dZk<7<-iWr"je'6qdOC>OYmK&,ih-8&%OQjDm7@$^mo=hJIm4Mbfiq[:4L#/iKSdK+d`OGJVB$(
%2q>tdh*662I_'0f=VcaZY?5a6(M^(pi'QrNh)O:hC,K8/"cH,e=cD8i]gRB1e3Yjkd\4bKaU7aralNH\$n<FhWeW#Ib28P:lVjBQ
%Cig;(('>ij#F/f+oDOf9c/P:>,MX\M+OQD_]/N\70sTU8\1@je4jktJM'-O=ej\b"D/^UsqbtTF$=T]Y]]/=&Vpb6j[&HiLrs&`:
%O%ojZ./;6+2@ML1%WB&k?VhbOZVaPrQpKn#ZfGC`4stq@Ut`_@b-Rt*a8tfJ'tNTKr@.FjH*Znn;49%/G<b/=r&4>h)m.TM4n)9_
%$UOEMRUCr^MHC@&LtQLY5fG%,8mLi$-X%M`@:_#tOOCr6>E_YH!V-&%csYZGAdP_jk8=nh,5;[iHa1/d`<k!_3uR\K:;mMQ@KhGK
%^]pU9]FE950V*65?\gKH;t*>c2sV,Dr_D0HIg8$Fmnm5=N*K73DVpI\Y?ma5(`n0;Pla`!'3J,#J10Q`'7=XsZ9_l%,fu/-aG4fZ
%d2\MajP:T8UbiP/Gd2SH#2A5pa85lr'JDd'C4jU/Hl^Pl8s@"1Purn.M8Qb1at/F5:^,h]N5C;2<V$EW4-%a^jW^krW)5fDG,6Z^
%3tN<c>mVGD<Q.:`,(n%F`l&et6diAT+r\:RH!O3$9JU._@Xf.f1-"l);&0FT"B>O@5`X$f;lDt$$CBY$9[X=<^&qk_(d<:OU)KMu
%,X;.\OjMFLi"$5:A6MR5Ot<LJTYI)^Pikr$H-AKa*X'p:^u(M_5+m,=eEspZoI&!IN"NPZW$o+7rK%-PgGm\(.-]YTMm=P0Ne9?^
%(Q:S7C:s2cUaOf3l-HW7hIV=2LGY1kX58VXZ=Mu;jrW1%]BF[5npFf3\_]$*N2=_W-WRSo;sKSUKHbSN;-m#K_TK!""3PeSpOKX;
%<=X\+eqc9AfB#Q%@HJoc@W&+n0/2s02G/:uT??88l!.ZeQoH\RjlgF@Oa\>jIq/esI0WRm'mh#pYh1tN*[nN3_#D]bJ?1/H+ra+c
%j$a!^gCp_@]g,qse!NkS0[RNS['n,rfFPNdGT6S?JKba<b0``k:<Oq@UesO9J3afL4m@1s;!688;M(MOZnGFo6^(c69+7[@qmS;q
%rIE`Nb+9=\g_V0r9K<)YjVX(gQ96N::mLAM2.fG5Bl4Vi=@:rCgLC]SkT,g6_?G6TY/S*b[a/nj"cJ?NUhr0/!u(n@^)s2Bb"<af
%U,^1Z;@:_d6fS\[=9!0JiM+)ElCT7K`Q)7>ZRY/n),S*tN68b/F<Y()8gG.C/DLjq,MLO7ADqN3oV>Z$l$'!`#>#iemW(ah_$8Ru
%YQW^C/7ELUP4Z4QF_(Vg>ac;7<K:-)Xe)gna@+8]CXC,q.>>,^^?fe*;Z64DC*jRVW.VKQ+tQkIW!!2"H%JjN7/-ap2&Q(ho)'LB
%LCMHoTQ"%j3T`_,N4ksgQ:H_&?bP%:5;JgZa*h2[MMrO%4CA,OluNpGI\8nI.#=j[Hj&pZaY!9L-m`h=9DM@T]M!5+6nq-?qI7BJ
%M#@8Mo#:UTGQ.D:$2fl7VEoV#e^\]1TRaU9d%;\Cg]r]NrD^-j706hkp]\YEIOY^(qX=CaKi(t9*Z`gIqYB6BrLr]Yo4,;IPK^!5
%=,H]#;!c1]TV.o)'IMj9RFNe#rt7^[heSpOad,X@I=bE@_J-Bf55"+%fD-BXW-%AA*S"0h2Y3M%*$4=i#Du^?.2tRn'ZO:j7UI)E
%QmUgs8cAAc"8NMoH>m1]@))X8j_OgGO)<NTkRn%:(=`s.gBT1>q7hmfI%W19Oh1sBM=L%Y^i&ONJg2Hl-]1NDnp2:6eebO_#<q:"
%r;4BqTlBqt'N5FnXIH'd"pI[cb1p:i7cIYoAGbNN_dH;?"S+p_7oX%1`RU22LGEcn9Hmu%RkZJj-!LKa$o&$,UqXE&Jb4[G?Z8k$
%\.l)B/t6Fq+!^D1Opq#rJpnfVl$nH'D#0H6XT$,P@;7"D%4`rD&#Sn3;E!X%8u+1Hli;2T)^I#oMEj;D7AMrcXno5)^19N>B#)&E
%Z^Ts$=U7Sj$[2;Df`_E,?0MdK@(P:$/ufm,bhP$=rXFV>la?!h309G$,8AZB:oes?lGHq0r:YX!qu?*apud/+a'\l>^O5pVs8J)Z
%jhLcGJ,YdQq=!,bd5_"&hu3pG?W]@n^0^hdFY4#";8Thm^/r"`5J.nPb\@!#p%L3,F^4guqd8j1^\sQB^0C.*l2M].rS)8jcLAoN
%G%B*C3%9DHV,8R3H=*H]r0.4O^#ne9a&mg#K`LBI@ukr,P;9_@/6=s.VC<erX;sdG["tG["Df?c"OHdhbrtXSiP4U\8gq*i9roSf
%hb?e_IuUFWdsESSE2,Y4r0kC+_ag!)\QTo3B4TKJ5EC1P4;8h8>/#fjkLHd8L0i_?mC8aYr^VJ9\)75UU\W3-raVK/LX;8[mt,:j
%.]B?.o$=,+SirVo)5h/Y<1YBh7r^;s>M-Rf'kbWt\dYG_+^Wr=,[2U9#JJ@4`Z.*G"Q#B=7C,jZZ4Xdg_::fbb&THGePSqo<=4*a
%FMkq_-St)[Qi)")NRE9'$JQE)\iAI#5Fug:HMogM]4Ag?M`n]48p&&pr6aDNs$uM^4+?maoeEo-I]W(!)0m^DO[Ln/67>k[dHMjO
%Y+J7j(b-nCM)s+P3c^V,/cq@J;J0@MhBD<\*9Z>Q8>jQOKqKttl;7.Np,38r5\C$`pL^C(-.D@-l<U_P;(IAVBtsEUh`A<PMU'qJ
%53K,>kboXW3EB)n3L<gZmpFE%W(rrJ%,1f4?61VD>g#_<7t:<C5P)d:dli0WO,ea3O6>JTb6s#GL=Lf,(#crJb(@p2Z<("T4M.nI
%&[;lN'inVYN;aQY"c">.>X6-IA2ijB+Ko3;G`*F=8@#^RkWYQtqNTDIZ5rc1n'0Ops5kMh>i\g3=T=JGbVE%%L32qbe($57lp-uf
%eWkSW%m)*M/CQ7:ri[7mMu^gB7>:C743dbEjNum\3EE:tpi3Qo8mM2Hq]GgbhgYSqmrgmEpQ(;s?.ZB1Qe,a&+H;c-6V)f5W2QU=
%'+p[YJ7LI4r5A.a7Pac_TOkIEJ0jZRFg!.9S<rV-A=gIc^=2QXK1ueseKV%(.=FbH!9_lH_PfVl:%V>HfuFFr'T&.XdSQU;2Da<U
%3XfJq#L^%=`rf##pTZE6o<=oL!=2&6ZYTt&\?2dLjbh.s>6mS]]:Ja<c&(a#id_htOVUMhgu+YeQI'[?@g.73%9h[!/`1n+Re.I@
%LHSLkB=`ajNsP,*$7I.]UW`r\hbZUM_Wc"a2TtJf$a<21O4N)a4Wb8Vr\3rW\N_^IbIg*&m#o'hll(fbB^qRdbQVX6,gHIbD\Yk.
%q0?,>*Q=WPTa1]/6aCH'Od(L4"W'%'$j(!6p*i150]<)or^q1K5Ui`$BLs\S"CJ'bK$,@mGDO=lSr0E=,N5*ZX)<4YhN:CB<T3eT
%OWR,:W;,u#"f^q7S?-(M(]ueM%j1p<YP4nlLQq-06S\queEYY8%8ShlP_"`S7*b3M"r^4F]&9fZMB3@!b3A>Doj;\_//nr:QAZq1
%R,.F>$ZU7c4YB`qj4g9rUGW(g)ouBFGqLG9Q^@GP4b7a4MR+91d4-hSRL'#?VIGq^nk1_e!r8SH<9,.:CL5D,70Tr\Ashs!G`D7P
%2k+l<Dt)pkn#9fGqY$QV^(sA00"8\f'PCN[f$dB?ZhkNf4@)RneDp7p?iB-AUZ!gf)!/B;e7\)5Ni_maUCVH\W_/pfk%Y*g+n>V)
%3*/=l.GeKup#.jK,OfA/,f\/#MuNY>24rb]/]I_aN+K_[a%\)J[EiJ0!IU.&$)CPlUVA1qdF'C=MYH<$e#1[8GC4kc@h@Q0Uing(
%!=$6UArlr209V:o"QqQ-n2Ub<s5k,M!59kZCP,#a."V0pZBQ5g&u)V_:eZ^B:PP7B"k31^Eg$Z9JccRD1TMM"IfX#u"/2bFLBmp>
%M\W]?I=%]R4Ed>^]%%*YD3^#n?A+^-V%kp<rr?`8Yum40$BX9&j9PmJ)^)'@@+?62^Z'%nm+ql].[VidV/$GA+P(e@XpRMtU^';W
%'GaP23nj"m%)FjaN'2?s"IjO*5':4goZ-5[O6hUOedSD/fXhcr]-V[@*<5_I'uW.+o*VD>a9-1Wg%N*<b"PJqf5`+"T*eD3e(2jN
%oG#\gGSi,2b?%9h:TE1`J?4LI_4pj0TN@3&!tJR`SB?Iu4Mf^k-BMosZll$rWk)%N]ttRZjqFU3=[K97\j?O;qM3`o_c?>sJfCJ!
%W:`^&)YR<ApeEghOXDtJaBOfCVhsY$(T^@9fc-:gRP`L@901:gcum<`\^A?8c^D0T3WmD5!@ek6VncI#2'+4[/td6fU/Ha$]MtB<
%p6Nc:7EZ6/RV"khl7YNg#%]]+'bX+O@erpT7BgmD@\<5HR!BSjLj*6_>K.O,YDB#rLpLu56ghB`,iH0cbkhR_qM.H0CT5R)PKTj.
%*i63=qhAi_&OS"R)5;L7_^ZFN,b;83\<StKi.sZ#L`E=/4YBW_\n&t1bg$2a'SiU()SK#!ie=FQFVm)MqVE0K'?#`>k1gO,%SQ>f
%-"N<R/^\>n8XKhp;LpDD/EQ2?c4+M=NM;K\i^IeF2.BlpAhVN?-X)nFn,^b5-0NdE\MM<mY3GgEG?6^hX1L$_7/oM73B5oZC(1JX
%M;U(L(gPrr_":cNNJspBPZA^D@)%ZN<\*6=WC)Z=8&],8XCu6'r(;Ds.VtUd)2%XGI\Thgh6c3XG7P8>A,/ot/)aEJ1t&o+:o4M>
%DRZ<F8VQhNh;DPt<3_m3dFjX(Q=Hne/l&-uqrN18agmP$i6>T@3W`.=-.dJ(ckZ;E1;"[9>\hQKd6`AoB.46uDDZ(^_T/*&p7/'Q
%_<r*1ippNc7DiWfQ=LqeV`]3o?`-N"r%*=XU&1@$U7e_-]%8<`3HV@cJ1i'74qJq0F6cBR:+PU?!PS4,,)H'!r3-q!'qT="osp@h
%#1F6GD.j`dUb3`B0t+"H(`["T[_`JHEkGB-?J8`,,CU_4Nkp.6>LZ;I3\SFUC6oAuqWY9?%\5N"IjHj;DG>,NT[Fq6Di%K34T[9,
%,3<0i"'bMW!S5"9q-6Y28a[P+d4A56SLQ:bpP4#X\HfM`7Sr&EEgqehMo]NEnp*i#8;YrMYUkpU#\",)jZjJ.jK@tl+^,='Q0rOW
%Yu$MqAtQAjJBbs6*bP^)*@.RJKOmpmKt$';52Fc5N^F4dbtqh]"TY2RUFBnknQrMp#pcc,/(R>&0ue!?,,G#*dtYbP&frH'_hllF
%e(uDu[jYA/4X2A-a'0\u@j<n>WU$!N?r1R0BarlpL>+#nX[]"hf+_RUd3;Lkcfe]G1ADjb1<J\!*_\]#K+]]^Hs<V1cq;'f^3-X<
%ffJkDVB5F9QWOfJ,q2@%BnK7h`=7+WqUhkhM0'HcO-'O!C!A^2BnPK`H:=Bc\LiH7`@/im#_E6Mg:%kg$.faC-nB(d=[BJHh#FP)
%ft8,DGr%9birCGG"XCXd&%50gVqCl-3#1F>R7=!E/0A^WjE("mD)A[V?)?'ufnI]uThMfGEX`aG!#>G:NB@nt!hs]XHfH#H?VmmY
%,I3M`>+8o+YsFFDU^quXf1'GY$L3-OA*-%i>67AlCPL?i=8?7K:^U[&`XJes8nb'ER)'a)H($>Rc@OFQ4cPj3/PKs[!'18aI3^g!
%IN0b1;mqH_9i,<Aqu#dB8su6aMVAi8=<%L>[i9VEU.8SREENV5"fh>l%B6pgX4cA<<+Ok+1Q.LJ#d"IB1$C6:nS*M9/fsV4<EhdA
%o><nAPM]P(p^eC3C67`?9RnB<:c![KLla_GkX\eY-R<afDAC5"JaR]r;%tN]XjUc304l5=]6or;ESl%W)"=A#*7BtVcS$g-C8SIm
%Z['OK[e,plYe?2?]l\m@N\<aFZXD7[m1!CLnFd%EONo3fkGf+[B'ljm"m#(e-,b)bgl?.#DI>/4f>=6;P1s4o[X3:6=MROD@InFM
%^mT)o0P[jKOOPTiA6.*K;g[B.(_)8s9_Rkg(5TN!cNqCF6H]Hn2teNV=#atkW$_BF%[:[sElihVN-&1:LN6Nk+&Sj-,crY"$M06g
%buhZl(4ZRrqV7?gX+8qc\4ZOQ.q2!V/batDn\HUS^[*gRO#h&c]+`Fb-QQ"q@W)rlPG'Pb("*0%1/L8:;$W9Do]0:f,&RNsXBB#s
%LOTC<EZOkhZ^>P`(2:d'1[+$I:mWgUMMJ3F=QI#diDNPj3@QilS07lX#F]1&9ONb'fdC8*nTZGE\X`utUa-;k?="I%-tai,X2QQp
%lXl:ATr9$/K&KfUGtmned!-`uTVB(]h]$7*V=aHa],7sWOf4+#)LA=NIT?[q;Z[a6OL0+a>B64.$!<XjEt2YSBKS_CER8,<+n)OA
%f,RQAj4Y.m!J\I#nAblO$<Vb:4mq1%nF.-A0fBPD0h*DP=SZO(pN&2N@tQ]IW(elA9=#X+cUWXSL<UR0euTr5R2Ve^h%51Q!FsOF
%<KJOC%i:2ZT'S4Bq*SWRTDSgGfIfI\qE=&_AL^iCmRnl-ErU*5"4XaU2c29!&H'h2V4K*JB_GUl:c`^kOQJ8X&X;D3XDDsN`7g:(
%-N+['8XumWEJijc0:bFsCTTa$@6V,">;8@F;V?FK6',M;Vd$kG:Fm!iGP,.k;@3L+5ui*h(l)bbkjZJkEfVT#cTr>!i9-F/k,Ua4
%#erP>7"eHZq%-(Wd)Q:B^Mj\FcbK@)3bmt`cM-;61Q7+0K4g^spIa4m&Xs.ZaoqdiQMehk3+9hW4q=6?(so;5DFZ]sK*bI,EV0@0
%UKDheO_$-a+I*ZCU9>m9il#K$@%'e\,XLmqQ]ZqheXu-U&#[JVn_-C/X]O#4jMtu\UV,7k1bR<j+3Q6-1GZD6\86nSSt\i3Eur[6
%$QN1A2c/sqlGf840Q/=N70*=3Q=jsbPbk8JjcuZEZ&W`Q-Tu^i&cUcK:$qnGLcGJnMFYhj2>5)*3iHg/eM.d?8k$!#.#QraJ[3E6
%fb)@&A*BFEOb,%(J6j>*"N`6PY\kDoGBH!3HZJKeR?(/EJ8sQl3iTjI$)qPKOJp;j_8,BF1Qd]N1HdLS\rp)rmeSMtT-Sk:I#7T:
%2u*(HcY7RKQZJUDSjhh6JYJOeh83ZXY^u9*&;j=MW]"9eOE#kZ)HR*E.o=@=!bI?(B@E)`)QBj/&TIY[3um"dFpn2CKbp]!NiWK>
%_a/)KBPM$'GAi@#*QUL%#6"p(bq%O>GZe5A!KgHoloAkr<*uN^3`+=9@i*!LjB<M"cKEA!UBaZJ<;1Tqg5I@QcX]I>9[<aK!Lc8i
%I>ei(r?60ZKi-AXa?',g(hTFBY$]pQ>@Q7Z-l\rV_O(33+NKJs1%+HnG)Tp"]m#EFgj'2'r,T;p[:>:`4k4%8,Pb>@N9!IcT'3GL
%LPFRPU;nnq"qBbaU?<6$hs?jWTATDBWkX43'.r]BMR`oV##"suHoo/jmDCYhUZb\Q4nSLM&D`?>3uBr$E+j^WrABH83d<fZ0D-')
%hLC#hTKg3hroXidQ:NU'k,Q#b=(pCY&V7YZd.7o"p!%fmYL2qX1B#\`GL>H'N]0$`k_o36n3N_g:taaRj&C"rDYs6mA>0IW[6AXE
%g3n))Tae/L&hCkB`)@G=b^_\5S]TBU+etnT3M^@b6+jf=gY#slS.-+_08OMkmkW7cV[8An*VDAf-<,]Ma6h@Kq=c\B=2O.4/./t\
%mi7b:pP3b?+L,C_!,d5<"9+7c[7H+A`p]X7kCH'&Cj'0\84OVnU-DMNqn?km;0A)?KB*B<=N1r@Z7%/$chOC4k@s@m%"8QsZ-rf/
%P9ck95f=qoj&*7b#LFb2PYNOr6A?f$_aGmF!K"SU=onq93+<9Uo1cl<Zp(<F.BYio2i8ZW0HQl;RMLp]dVk4!JGNR%#S\"aH$"oN
%rdfZ_RGP.=#J^@7T@HG.Hn"rXR(Sp7pBD(jk3;\i+NYnhf%gn&M>Lq$<H?il&'[^\5,-I&5c/i[q?Vqs,T2)R-;_93mp8LE6)s/h
%)[GFijEllX"7BJ(c8F\S'(KB>R@sfX=@429](5Hq)q8;II0;klq&k+k4^[`.f(k2qhr+<fA2@0K5A#$NU\KZUmF6Y3#)7_XM5DM!
%K]7u)_3"",l^&H4!e#Ei+N)gfJ"Sd(-*SYj@fI*Y2:D(]C7^Tl(r0[SkB!)/))P+6,TQ-mdNYLbAE_U/IR<MS=.H@Zg)&mB4Ocs@
%oQs948DU:Emh-[!9fD@SA`Ze<#B_NcjqEWuot<gLb\AZf1:U1s#ugG[nU-@4"=3eJP,koYY*`c^LCcUF7Nh3O@W&t<iFr`4\SA[.
%pJ>3kju!1^.ZDM0.!LoEjer>.N`JD=_K5Ubhr&/^&)"8$,pC\SV<P(c%D>DA0iS,I\?MH4N.*l>1FiETrk@M7IRs;]/a#RM$gKi4
%m?A>YO]^e(2QX@YL8`2%dK.(Qi%[7+W%i[oL`Esq(JgrqqtEo`Yi==+VXZ.5@5<SC?]Ype/LC7`_-^-_KI\0:/e-&BejWLD3d[^0
%7q!JcO[n!F1-$TJ@]/h9fpDBa&4(So0Jl5!>P?g[f,2u=8<tA9#?Ejh6U7B7s2!9YeC6UR\askP1q3YESgZ(5+a"#6+,U<o+GHfq
%OIW?)mkrWg)qO)A<Z@;g,YLLrU!W7bJf$Z:gT":Iqq9gP1-B-_F>E=qWr9A"%XWN8_*E^1)nFGuYp@1bKH/oT;an0>\,:1FS&9Wu
%"*p6iWmh-3lY97fi7E8g6_\o:LHmd?;`dnma?n(=K'jo3K7r?25q[!K@r&"t6:?c:,i[I4,m'g:4kl!kFAt.DZ^mCCl\Jp,\\iI^
%g@*Y&@iO@2G!)GM0Ac`o;q4bFLdnu:gBKsF\-k4k-<*s6)m*L[VaqOGm)39t,J=tW3F."Fl1I;37<Jurpl.t17BU6j1mF5F8U2-L
%LkLM5k(`OD]OE-["2l*"Yd#o;!!nqaG>Y_md)%rjDHoI[$]*;2+I#g'Q]1"]2*f@5lec^AAKELt-1eXGC5#Oo=q)V[Dp9DtjrG;[
%A4D+S9*k?'aE1q2bXRn?/UXH]*;3?PE^Oeqf#9^6G>RX*KZNDA&GJW%WP:\\W$#s&0]X^aJU-0=H4`m[J.`_e!%k*bTpa]QbbBTh
%^gnGI0$[]LbkC-":dWV3I!!X@8ejm'M*@dDkmbfQ,XuG9Y"\$H!kfk$Z)Di<3CXA-.u4`hp2c?TLeu/q!Yoc#:^YHVA4e/:ct&hL
%Z5igthB-5jd'j[J9'3V?.<#2p"s&.Xr/N2#8Z#e4;T+pNJfcC)5ug()Z"f@Kj'/KXM67`Ao0SpW/MMuS,=kJ!7#ID;>G4+!`alf4
%RWjo(B@s:TRAnEEi%R[:H,0W7RPk?2:`%D2XD_D@%`nRb638@c'@,D"NXZ7/33ID9;1uoS=Q3+u.WL:Vdm,X-=Ra.n+Y+ICfU.):
%LBp.)mpKB%P"ZU&-](+iWD8`mf#J.V(+\N%Z!BXsUO""b>Ej\/gJbh@e%\<@?'4[ddAmtBZT5[EXMU6>pN]$ME>IbJSF)I.o?1#&
%Kf]ha/P6pEf5?\KW>+S:Ns?"6qeJY7V<LJ(okX3t"_=^j9Dp71Qm_V=HjO9K1"Z6=H[UU>5HmBHR!i>K_6]u2E1fhH7jI,0HIKpT
%5acgZI]QC9G/[3Y8ATM<ZM3/5J1bFkmiAQrjIF6'`O.:>G&D:bFb5Di%[7@Lgt4]YW#miVmO\pIl882Mf>&]iH$kN%%aZE;o=;gt
%KILL/`"iSK@R0Z/LVsRX=?lL=(sqtR`ZE1a2ifS<P<5FIQb1XlRldk,kO8c>XR(?FY9M<:Z-Vs2eSDG9!E-erhWFlEXJS/T3AaE*
%.inLlUT>!XQItC>KuJ>g3]9%k&^sD@XU^F0f_/X,^?o!;cb0fUA!-e1mraV9%s&e]*QD(9qd4/_(m<&%h4#E-Yla>V$tEEi_rkWU
%N;I+k]?t]2m>5mZ\'MDFf^/)hU-h+'42)]:`W5O7Op]uk*C!OoZX^1+Rn-P(mra.+>JKnn2Q"^2A$9ZZHO4/b"%4$>Ha@5VO=U7a
%m)YBiBb7lsk@i;0mG72`mbR:rO594l^"`'#;CICX%ZiG]cJ=Ma4]baRf^8HRE[JhE#=t<DkAJ?&=sC<EDT@</j^7Usa4=nAn_EM^
%-;BNQmEh2o2V=MOdHS\hG:p,oDKhboDYM,Sq;YnXhcC$\:S6`7gGm_@=L*GX9)1?mXp!I?]0_F+ctdM2Z;*7%ZUN,s@jFc@J>elN
%Lih&.!5`c.f:m-&"eaq(.A2MCBi*$FPo$1MrA%>Y-J]'pNd*m*Hh?BG]8tg&M3b=_!\+ij5`gPNn'jTA'cQPr)L*e/>k79,GK>lm
%ZcS8&@-s?VM@sH:$+5biW9m%?Z;S0OWO;D$nHrg!dX31Y#r3=47N!5!6i-2,_Xu%J_5cLT.Z8uKU'NarVF/Q503oIA`H$grCjt)o
%iXQU8Z3_9K`fmE:^:.73SU$pu-(m[QB#"O@fS>H3L<Y"LI4DbE5#RC`#p)]Is!D;-:9p6#=ZK*^6c+LD_jM23J8tLSg&b5XY:ddR
%HQCL=hFSW3%^Zr(9e>bO@o4)N>i!Mb+V*tJdK/mhC4F'>@GaH`Pskq;]D-F3E:28oHU`u"9$WRdd$W2pjne&'!ArAJ6>^c17RQT1
%Ermq)I"41:*ec=N#=+H>H,O,gNS=c`M3>/SFt&aPl24#2!P/A.kV\5M\'on[:#YatJA`oGB[3;uSTDa0:Z(pCbXZP5fQqeWTiZ4>
%#*??&?b<_g=5Q`gW62#'hju5k40=!#M`e$L>fKK[$!F97@-sXK%3)!f"sP@s[jXRX0G;1L?8kF`S>@210#0@:Y%:?dj`+]um].M.
%XC7d8:0((c0;cg`@63T3\X,0R9LBu%X'QKC!*p>V*96#rJJEe?`('\[h2?(\c8HALX!0*YWl?j7I'dQ9#Z(Pb0K+9a[.SrOiO83_
%Ji8#-fa=#MMR=Kp.SFKS`<L<.fEZdA1AOiShE&2lCX\@mF"@?T(]h%l6&*iZaZ+unbP/,+oNE+5_W#hn->tRe_]@W*B/tATWTr:4
%nd8hHBCqBL(7eB/g6%D8DJb-b[Gb7tpUkIAj_]RSL_rI^$(_;t>g$X%m.'#H6^fAF&IasVVGN:O]u[U&o7>"N<K^9U!E$"Y;?)Ob
%D=XR/0s@utdB(1t]M1X:dgiQDWfmshLFD#1A_'eoBf<;pl1[G&h\@"j;(U*n'AmQUM!lHd!m=gfm!b0NfXZtfnsYoi!]'0%_^(TY
%gL5&!IBkrkT;PXfR^#8d8>WGH=S>4rD$cN(jeD8Q%WXo1(<l2lf=e"T&-#nELc4c6]qD*G8O0Q,k?Up7:^D?+H(](OoX0`:KgJSB
%BtP!dR0:,M_,SF#O=nka:krj;(kU,lY9i0c:7r`\p"E''+H:"U)G5g2/T4?6FB1Bla@F"><YSBF^n;5<FJ:`kG(Cn,/ZPr6G\7p4
%T[DFN@4]*`,[SQirC#OSCQAiH.TSZY&2F?3Y=6'3A5/-Q(TP>tHjFj.+fd$M?HrVNrLD5r?-IY6'SK=tnNtV,E@f#K+N1O@>5##Y
%G\epC:#6+?6TPBQ)j1()W6q3rGY'ekkuOu+0eCEOnnQ/jM!b7j^Jo,3>^H"n67#Wq$IKREgNJ'6R["oC6MVY7pY0kA+9e%\Y:L;;
%:/c4j^!NQoBnQ"7EB1cdVC2END7cdGP\1)b/+2Fk)<S;Gr@5n+?Cu[5j_hg8L"j%Mg/LO.BRFhl7L@D0hQO-IeH%Q@'c^=#NW$!(
%:_os;"<s&L6L1S0igJAW@#">Gdf2_7:MJkGp)"bYVOomX2n6FXYosRhA\FkV$="nbH('Yl9/la\E'uu!ILQDs%:On%$#?&kq`9Q$
%c\4[Vg.M7-9_-EuAXN7C,Z;W3ZE!l7?RRXH0%NWkoBT4H^0LZ\Kb-f0bZ5u7jK6Br@WY+l;%1NkX&p+rf)iMm`Y5brfI7uu%ssEL
%W;2(Z#h6T7YSR=38o<=@r.kpeEncKhS1/rp(D##]bQej4EJa9llO1*AW$R;rX5TD,o=k*Bok:KYF1SIhkFl([QT<0#"lpt-8t*eS
%Gum*Qo%=\Ck!`>r9>co5Eb(,8?12f"AJpS7nUMC<"AUA'(=)XY$;Vt.([TW-:6Qa*:38sMqeGp<4BKHHLjl!L"HX>W3QZ:9i5Unj
%Tp\RpLZBOM;g/%Nn>=@2joWllU4c0%"'nMq]JiJ6K:Q<kcj#:1,,$&>N8g5knYPUU1FA;-'@N+efY%;[%M(pqOsP=>*jO$PIp(5f
%9%cf8nef_9`F+7o47m)1KoR0U=g/m9:_thin%I,Jnmt'[#a=@.Rc]D"G?BFIW<]F:FJ8]jV0BY%'&4]#AL]0`&J]1TZiX10i:k<k
%eAM-WH3-@8rD&h$1\G-C;5GNr-jgC2!CJLpq;Sr18835e@sgZ32bBDY(FE3$o&jtD_3umr8jGKIH?#6-);^GHVd.3=D!e7IRV_r2
%,"Y'\pSLbuIKUDWCt<-+^;I1[<hkX!:k0j`8gZBK:h+P"L_qVu`]b6':M]R0B^r2&0K'Hg[O)Q20t+4;OikIYaD#Dk[6585-6OVm
%Cg45QS$_sp2*2!kBb*sCo0dM$o0dG2!`I=Z[P\*->CY@q5iq7f[O*-]_/3D_K;t`$M&*NH:dn?lXU.P#'rGT@ma6p0RnZVMMhPm"
%eEgjU8OnI<flod6Bkhg7ki4G.q)+[YB`bRirF'F6I$ob$>FM*97GY;S1f*>D1f)VeB%Qj^*0qqE0hQk_RQt_SLT/Bs.9`N`C'#ln
%K5X[%BY)2tCZ=AFZ?=ojJ.t".D,$Z9"51+0)UGGV@;>r(nbus4G-%5IO#q1&:=^tq.GNG?@/+/<-u;V:k[fP0D/02)p>srXjKqdT
%Sk[H3\Ll&.[%YTUUclV=-4gf_4mYkT>L:7@c3,E#o5/.2UK6lGL7O/*GjX]lR1;<bK4dfXnmQ0O<_:@'YVS!CjR!F=P69[E:RdC^
%h,U&@_p1ZBfhgQB@edH0bB@J&d>6:B:HK6#@Ol\IAS72*@Em9H`6-kf)0ai'W:_7%]p=smh@-:9d*-oBD24gQ_(WYD^MRY9<eMne
%\"S(4LS9!d@;+e@&'Jg(iX*gLH<?UIBbOe3[P[N+\b4G"bd$]/Q6och:S&F69CkPi9CkP_BlZ*#8]R,DVlr7I\#J&kcifd'Pr[Sg
%%S%]p8.:/g5_c+ljY2Z:"7gT-9,dc51bm@oa*1aV>cr5E#tpJ?3kY^OdQF5XdQCB2RXHPIhd(o:Kknu3V+Ge+F_POk$Id@f-6V`Z
%%nj6M6gO]T2#2,8Ig\m_&.A=UQ6mLs]+o-r!jY:5=IPd2Z48RDV4"Z:nmQ7Li0)II[PURRUMs%3R[bL%qd=,Ipf`;6/Bp;c[2>4l
%!?IKgJVL!-c%R[me'c1EY9Wt)@;-qb[_`1m9,$c!k@nVll4j2PTp[.[I9W.R([76(9,#di^9b`,j9F/T@;02,/$X49OF)eUL*erL
%=o-0]"V_O60Jp&u7]>c61cpO4($`-!M.Kq&KA4bk@]q8?e'J5dm/=5`amDGJf!%!A?ce(DR$t>Q;EIRs_a:`,q:Ul-?t^a5T>M4/
%Xk0`]fMsUlKM)<9o&qqrTgrN(c?J)JH4A'V2*HJs6n8Q_'ZL+qGuJB#39Jh:9#sKZSnKG7f*BYI%8a7eM.LZK+:0MQ7Z_GCTVSG<
%O)($n!OBRSE^E@TbU%@m0-r/n0G_aF5`gLh(\5E(8S=+b_ZU]8-#CQd;K=qI(*I66`2)!E]pF8(]on/9=_%=n/kh-klIS:udSZ">
%lkDW@$tE6@0HGg)0?WN@eV9s!lt^fLK^<me$/&-P)piO.\d`tfqr"cu&IHMs@4VRY8-u4mK7Hk!$BQJQ0K3Z?*71t]*,*pKrq8aD
%ngjMI9i4SD0(RAs-dPiPKGuFj;<>,L\KTtm(gekbDp+-UH&':8ZRs$D.N\Qo;EYuRGp\QOCPZJ`9eTHB6?on+Y;qUH#$J/C!4(oQ
%(3oIrghOo?oJO&=LRm?gZ^*habP_fEFQah_.#3op`#!LMLkmhu#Xd;e1.aOBE!+[e&+gG7h>t#+\@.]s]Z)!Ji@Jsd*$B:O&Ro2O
%+G\Y%''o$s\,ji-1K0hi:,8:,Cr71nO_rkk=Acf_gCqPM>^gW4-L!dM#a!Zpgcno''FMsuP*ool>ICkTnW8YHD-UiZEN_@dJ.P/>
%F8J;fr:UEKJhJ-M=Z=eS$+mhON`gD80ped*/3_cQCS_9cA<lrH5S#(Pa[Iu@5+p%k5SRbu%FaHolCOJIht(CeW\9tF9+&:[6'<^A
%?7:lPD3H!e@:(*i(uiS'_Hb,3Da)S),KLu`lW>,,OEB#2l^3.(6m2@h:I#6?>o*_VU_&QXcf5=VY$1=>mrJn9*.uUD#9Ju]P^Y[T
%c]N1:T.lDIot57)I&)cfP9+MgI=@of4R_YiXJKe@aD[aFPcTjr?n-oYB)sF;46%:_LDQgtLBNHi?:`c,M"m2Q(-HJOQX`OU+K/HJ
%6uF7B)G1`?W$q2\pBK?j48\_>LJhd\OQf?-TkB"EOe'8J]\upCM5KPl5Ig$]:m&N.<fXANTihjQ5cuUU+N`uh\jl:Tos5)&,)UqZ
%+<Z"SiMOkJ2`t5/M39g%6UQZnUVPE[2aJTF?(EW^gRf#KA[8<>WejB*P!TM;$Br8.^gfRbVD?9pW*;ra?U@Bo7(,)0gmnh/_$tQ?
%M-$q[jE7kD^Tl2<0g;l$;p%9rOHCQFW8%c=V*kXq['O]i)_6+e5S>!Rp8aDH!>W;!mgZX<Km7s=E5FNhY%-%"F^\f7TXIRY(^Ztl
%cUN(e[Xp)N*1E>Y6C@Un*ZeM=^313t<I?R51QTT^J6EP%M\RTE8g&C`.=F0+O?lQ6l)P>e4.%@6g2(uq5\IOt>j$g>mS;<#Lq2GW
%=GgnWps(SsZ.:o90^G%Z,0tE]I5]m<rrs@/cX]^_C)%fMO>_dIZX5)9'HA[G5\,kL;@q%,/]ItVVQ%-g.Qh3]+P@Ci:aTQ@,(SX/
%^U9LJi(_+oc@+):+tnEM,_$@akOB5sb=T,m5jDSTUioQ]?TCU'\0V(F5_:9M!+C!dh,kNZ#1$#=#]:1s%&SWaGgjK>:1X;H;2ang
%Yl;_l^u?0YI1_:i74ZZ/)-`!5"M*AbEbt40#W4\D:RWnWIjLqPII=r7nLrA1P5O[GdYj&o0)\*;66_EsbWo'\pgskC&kQ!H]Zc3]
%opJUNiY<%#_n2k2&"osMg@lHfH18cfirFuW]g13iha(h-i$+9&mAg&si[nPVU0RCL0R+=r't`R05:PI&9,EZg$'96O^Bf@1*'p,"
%&I0F\.A?8kAaH+i/ij*(WD\91YQcF'S0B_`-8<CXQlED8!gMIEpdCb]K<A%,VO;,eZ[UfDH;$sf5VOqp;)V@Z5;1LMeo-*5<Mik=
%(H#d^&m>-:%0(RI'Kq>)fCaR9XNRE<7mhju"=[VAP]I84g@"clo,Og>_9@!Q?DSPOPlL?%A,@PYSYnQd/9H_mVW/t/-9!TXCH2_3
%@&11'I0-at'o4PpVOR.F#d]a];ePrV4V2ZK@g^cn&/nV8(47Mu=M`L8Ed#VS3AA7X#DahYdjL7TEGG?G&IO-AbZGT2o$16`pR!jX
%Ziq]sJ7tdp^dZuY;2.pj*[6fl.edMQ;]Gk)V'-dN]tgk[8r`]tj%B7_M$T2:r@q!:`n&2^H?PDPbr:f=![*C3kaGoZYl1m*UR\/8
%8[F>[H</7P1Ld;t=GV>,j\MbL\07ag^7EmjCDd/oa9$'W'r!a;A::@=!>UnfrA`ktp_?t+Q?WW/YtPL8]mJY=.k5;0aL[K^\I5(C
%X:honO3>a(c+B)B74O[WlX!G;/eI+/F5kV?%E.9LZeG#`XK:cJ$`X.k8GEXi]dD#fjXJ&af`Vd6:4Wt+j2b_K@EIpQJnG\png>Vk
%J-a?cd1V-rN*9Uk;5@X5C.nt\ZY9_r-0Z9EY$sSVWMK1LCmlOXJ+MI^+aj,$aC;7V3)$T1j^rN*N[.p_;qfhP>SkR&^"6Z"_ra[C
%lFlS5g`8WGT%%$':cNVoOE\$kB`Cbd*:@7hnXQA!Kk\CZfE&F*5+MeDT#.RGQQ4rqGu[i_C%ueq"=Q;V=pGmIoM4rt@&p'Qko/1*
%1R?1e?d:H^\UXc8&7p)0FW@s,RBC*35!!)!,NH1JDB(&[6\RthK6e9#!T,?lNl>,5EOo5e#;oqT!@aA41kW:Cdf3iNr4qTiXS-pI
%70;3>oqjTX+p>rQTXOul5ahN:]uO5oRGYmr"],cYJ>H^Df1O5.A)A\_!cS^:XNT[6JrP9ua`^u[?:TV^*@1@ZX99N6JFHrA.fjS0
%Sdfc$C+I8baO'_@Sdb4DK7pLk7PBG8&h/:>Nu*kR/.kX/Y7BZmA7`g<s"Sbdn9\=F4ADs,Q2pM?lO%<D/-7q(aXW]^0ljNS'4*3,
%.RDu;fm'2N!Mn)i6!M4G0A'@1VQh;Sk`TZjrJJSr\OgC-<gUooEWk6476<Cj8H46;=Fo:LYqqgZSRgkf^(CAe*["SBMp?i7-$__0
%AI!ku8<018aprsEElRSMK.`7c!t0i+N\i\hJa3,koa"qFfMK/TIU1,8m2!B&4Vg*YQCNm1=G+riY!U_C5<?cBFaT*a_tB9gc</KA
%Ib]I!<gZ4<=Yl3DdG-tP1'mh4Fr96j=DZne@_X\Z6_+ok&-LGSa3k,?;\"pL_pmP$7T(jBhAB/b8BRar*Nh0[Qt2*8\Y).<h=nP"
%Q2d5b'lmu5;&40%hEu@OgY@hBE5`,\gpP1O*Vo`0%P7&K,o46qoc:_mO5g8l2\,!Je!f3!(HX$QEI]j4#TX??@[k0[='u%Vf^M]@
%9dBq$2W#1iHd6Q68>>>8"'BfJ\:6`d&TbSh63VYLL>Om\K&QJK&A#$bLF8?gqaRt(k#^M>&8g'*9lN$K/56r-h*'1l\:"&)2Iq$p
%T(Xef2Yr0SbEO;mrY/;e*tM&.M*BcH8a>kkpE[Mto+R=#e(kX=QJFH:XV^Q%7?[l5NeU@(qVf^[&GBPfpuq+S&"j0Hrr#!!oFC'B
%g@)Smi;T$*:A6-._`:o_*qdp,pWRRq5NYc6`')A>\*g6jEQ5_BVUEPInf^LDFr51=@9T#@3\CHI#uhV8;mb[CAtiX_g?`c(7I!3o
%;iRVrj:`SuLjV0AoikHFZbjD$Mo*mI6rSp=3K0*;Z]=eOiIQWUnEQ(-#W`Mo?o=sB:Ek-MO)Shd`N`n?kLcL?lC_(%n'l;'XqTcR
%:r?K&]WA]sZ;!?%J?7JdTO?.hD^63(o/FCd#NAg=-6^C\$e_Z)!aji`9U)t2R?Kqc"qhF&#QkEi4W@%qb.OuPqgqU3'IP\eml$u.
%4<o(mmm-[ghDhT"N`P8f&#BZu'<tK&iD$SFY)`6No9lj\YmEdcAD+P7CX(Vj\f5d[P3ou"M=?/dKhD"H$KE;MM:I7ZWE^<)-Ks:J
%l6K5uY9?,P+F1;Sg`X%#"D$E^p9")unJT8B]=&4e[W&\@F?)K8@)UJKoe%l!?WO`_L*jf0T-c%DqA>kO;tgnKp>4)Jg)9Y<JT?T4
%Opt]F)/2mo+-KA'@UWSnhI'Hsk`01Bs'FC+fAiXDK*3Uog]0su1;&+/UMG1]1Ps4@Y53]iohb!Ebs4]h!/_:c"Mlu'^t@Y6qCH.l
%T..q\J2j=`!KI47fE5:@$*^l[pHAAa\74_rn/MEIgB1iqJ+`jj<\ZcC!$_/KSKjf[KYL#BJSsKB0ER,05)p4O_D/8b5W055@g(k3
%mdCa<b0[QAY0HZ=5"7dI2r;8"W:9TZ=idOMFKASdi.;p(6NE-=KYgm>9Fob%VNB>/Fa,A@FuK<UT`Y/fe[G.[+O36>#"L'Q=!NRc
%8l5I_d"^OgXPI(Bebo(?_>4H!<uqXP@j-12\]5C.,AfA<!3Bdb4WPLQhcC2V\;8),VTfpu@#0$;cLkHeKp?I<a:kLH)MK^C#/+)5
%;E#:cpl\P-]C[?t#QUquQjo2q)#N4kUG)t%'%9CMOCF>V\rWH@[g./O?Hgj#b@N^7o2Pi+eJZgjWZE[E(`(,'$"+62X1tue[cI3W
%b/XKm&HtCh<A5i4^ECpTp;&D07qM\*bRMfElkkpXl]RB'%=-Wj6*hg;:Hf@VqiEk[_/)eJ[Ht%9W/Lc]:UBViOcH`<Xo0Ye9T"A7
%4YUQJ9oT5N/\V`gjJ3cedXfnmCIp7;&Q_u'dO=5/H$]$A:O6Mi^-HnhLM.=B;q%'gLf@2eb&ZS5;::`R.90bk=UYG?oe`S$'9IaK
%3ZY+um'P,/'45`%mugZa"o*N!11_,[\PTX8Mb`g6q?Rt:b:H,AqE`XIF.P-C3!p2]3[HFS3"$Nq[GP@<B@r]&9Jn.m9\!7bVuYFp
%;3NAs>*\_!!LY*b30edaI@.$h/V+0`OHQXUHEFnOS\LXjB%!>q%K7[b1]A_d!?-Daf,UeKSlj)0AVCAb7)if+c:VI'@$pKcE7OZ1
%!g2$=4<\XIL]1X^D@qul^KI^)c/$%l[i1S5-lZ+)QpV#FNk*RklgdoL%I#F((Jsu>M`^.;E"(c7j*$I)hlARdV1Z9/9&`]/3i3(<
%%["X>7,Ad-@>lZ:755c+mClmQVSrb;c5sV5@H6gT03h.77Qo`!8ls2^$g&"qfE>s\IXCl\Yg-NI)P%P&!lB&%$$l*^S!F5ef5!3<
%/_Uo0J\R'6p8eCP$5hJ28YXiLW_[p*%4jdnAm`8G4gl=1Hlspb2?SR]1F5EGT'0-ncomhn:O]-Mcqsjl[B9;*_+AY8,10I$?OD'c
%[3!5U1?g5W92#S`/<@C*%!8F$lB:VH"Xpc\Smi02Ku<STVF6a%$dIfC4m)]4hju5E?S&t'QP,qphTL8Z!Q878HX3?_pX[cPoa<2.
%<;.S,2=ol^2L0X7d55Q"Y)@FF5N?(!q/Rq8JQSc_j()F>YN5]Y%Lqp!4L,@j$5"+.f+r:)jXu5&Bc1pfaNGUPBCe#+C?;+*p8/R1
%Ckqb%b>9$<Kj^pSY'd,!n/dnBPB`7tn_Ca#O8Y5$>P2&dLK@Q6h4k&9A68dbG`]#greaQR1!8Zh/69?'5E&a@E+Mb/(u32YP"&0i
%J@_8&qNr_Qo.&h9gf(5)dq,@siZ6CUFc&-C\bu.%du4Mu28?gSe0TCaa5V[2/WpS32+G-+a"l-sb:9*a'p?i"1:\4/QDAhH075?3
%1juNf%7_`Rah<YA/1IlOWGU>ZIpS4^hgoe/IM4,uMnQpdk8F3SRm9?oI*^-PU*3K:cRktRfB1q5nD2Wlh;4[K3mbRSpFp2d@P[A"
%%LpZlb&]XTJ)Cb%4`gAMhGnL4S+!,YA".rE!-0mQ_eJT6He9?>_&f-$G1\%lejU#=dfS4/@2g\Cb%tQ7B%C\em.n+BUHM2dGhR5l
%!,noq4J#U*NS.ihdm?m;@j//E.T.(R8L<[5:K1$c0G9dZR-.mN<n@K0p*LJVR$r&aV8ulcrdA,X!A]FHA`+b:F02>XN5=*2Be6_=
%%^=]\DNpu":V45Mlb[K0]HN>eG%@!0/[>sa6ben"M)Z$QC?>/;B"/GD/D_\e-S19#D\"Ns.]p;7@%V$L%WLnuS;3\:,tiQVN>b\Q
%YOh\AWZA##0rm/Xbh]0O./e,ZhBt30;t5_-_6/>]2tc5/pHfSHfOr,,VOb![UZB%?ifq?,*]e6/31dQe_)n9!ht1$6$/_Z:7c)%3
%S;?^LjFB58c)k,^Gb;//jd>0(!?;Q5C%<;-FL3:!e+Rc&D*??njDR=FEI%i9F4=p[%KuDV,(d:fiC:H^a2fC52s[q#)S:;GYuAZn
%NtEjMM:4q-9]&UC0nJ</U6s]rBV$qSgP"%RPgbB?F6p>Wp/HF,7!m)5[aUi"[tV6Qs2,K(lbmdO/1.i7[hkTj"h5AHgJlrYfPOIQ
%Q#9ftO#:o]2a>'aK`7b&<#J8PQ'p.+N3KPaqM;jdZhuC25tn[V;gpenE^KncWlE7N^Z'Wb-771HRU!PFbg_UH>]EYh=<O$gfGaEe
%3"5pu8Li3UiTR'J1e0Q-O#tH#*@8>MfeYdQ_`@V<MulD0>="D'7>7'GW"T7CYir"BoGG,nLpjtD<`N6u=O"e9RE=%iA45t$>r7;i
%'0BC^b@Cc'W+,6@CkT`a]aI1Ul^M%p74;<ZKWWBON`$4)?*`^/.KO:!GpY)A!lOB3lq/!A?V.Zhlu5QhY`&u+c3[WPg%PhBPnE]7
%hk"MDV$![j*qf$l-3I0F+0(8DQa!eqc#lM"JHOEA'nhuWK//j=F&4>dVc,:]UUh;$4:Jd0-uPJKGQOZc*CV6UO:#,d0uO&\>,8Nl
%I2U'_jcek4#K/]Z)6/`*kN;2YR>a\+TmZFpoDX0p]"AmlA=c>!EbDEuW$C=8A=fQ`GepH*!Km^oFqdc>Eh+>%W:g=i^9cNY<!8+$
%pDS@l2qOS[j-YBF%ar:VK4c>(kPT=*i</bK$g3(A0j;@lD]F9j'T8rIPB8I!CH4's]^1!KUj(,T183T+S%`j9MVs/XT>GqnF@g-4
%m6k*e[$jI9o)8[;ec6tp'+FfjH+q9O8t1XEQSU4SU@)J;fM"PTg^tWc8OtX[,VMr-]&#FoYF,3.E_KNsAYU(kqa:ILC@`o[6ECH6
%JKZaJ/MRbDM>02/UI=@(@/'h8V<=>pBS<83&0E)?TF3?)YUSG+(U'*g/GIo#?/^I*5^lqb!fF(!"GY8/\Tt_uI++(j>X7]c8dFcm
%/HK;b.[n(nD_gCEO3Z8'$.C*[UXN'D7Jc`l8uaUmMusgT[#a5I,u6C4VI-K[T?7MN7jV<!l91k!Hs*8:\2_GMB:Un9QM51q'WJHd
%erVC%)L_A8!i3KP4UG8=jT;l;[^*Ob;7:gH'C'C2ci&hcQALU84]!WrPlS5_Yb!AO94E;nR4GcUmWFIb'YWi:%k,U3p8Z2K.;6EP
%bNFW80O/4NlXD="O1<eX]Gjd^h8(Gg6FtD!SmK;c+`B$3$j^`MUGX&@VU3":_PhY#D+E>s=u$Ms4Y]0m/6Be67dOVa'P.IHnuc`n
%LhmS"Jb8>`rkc*iHG1L:mm=hRXC";LB%cV;R:5pCF$Rrc-%a1YJND'+lT)nVgAYM'c4YMBa+/keaCA>uW`7>Tn4t$nk56o+B$e$B
%dqRg''Qh9^F:X26e+X(3RJcbHA'+nBi\ZXK!Tgt#)ik/5<g>5m$Opm!<Nd=AdB(/aG:m*=e!QaMei+/-C09q)OAs$oj(\m`qg,Yk
%=e4@RPC)g'%I4Z"J6-IBH_Xinhh:8KEA.9888e+U+D)"ui,^83mIV=[Ne;8N[@R3CPX"<@J"a-m?&gK4,G/0`gHDqTHR:hQc#[s>
%]5_c*)qoZ3@he9XrU#Gr!AJGhTJ.&QR!dO"HgomHLBmTkSEstZY[[<R\]p[.X)=\G:VV\X[--[jB'n9!)e46KDi".>\>P8r[bQkr
%(,SS<a2;MZ=T-r5/^'RCJp:Cj'1EHWT9ec\E?Nl^St."U(`s2o[*4u"lftX,[h1b^6doac@lTL(;*N_mU;M'XWS/aB9RKNn9kU</
%!-BTk:p86&@7#fmNT\E8^=jD@3e>M[NT`@"*0:[f^=O<9*.Hb9BUk5N)(.bII?pU,O#T^l6e@i#<JdL(`"'B@H$lC!=VN(#3KO0K
%I\$elLo'b8e;-S9anp(jKMO5@&*b,qSYglY<me'iG\o(-"\Dhaou$=o5jsml2%=;N<d<b:`(.42h_Pm/mP?o\3gGb]q)P!&(2&*'
%^pn3(atJ:BlGI5sFs*GPAL)+_".J&Rp>M#ss.miXl#p:(,Hp3'6N.F92]_h*(ZYU:997KK2Slmj)(0/TJb7LS@7t"h[c%&?7L-oB
%qIuI-*oulG@AXq1*gR;uPs/^46S\CSUM3NPLNU!Po506$N5'5;]eV]d]"NbZ0%<4o/]>=D4Y4^gE8;l(?J]S;F>&8T^ckfCD(,A\
%d]!#33RQQ6)snRPf-)Ab+fQAolk3$EqO%JE8bHIkY6S8-ZqMB,a>iNP3aSi8I$;_"Xm/nd8PbSHNI\0,;8ruU8=#RqPf2*@Bd7D%
%Go\#"!^o:o\HA#]:FU1_FJ7QhDB5jIAedobIR$oEZkqi/,SHuS/jdOoBdGcf%;<gVT-tAUAnZTqC(;Xek!iLg//7?JHm,@G!^btB
%m7_==,FAAVWlP<8PEkN3Q6?H(fjLV^"VaohCftAD-?(<*.0-25EPX/9%SI9$3>,5n\@")O(-G41'dpkKi<faV)k#\AM&QV1OjUj*
%5VU&V4]M96Lh'8AQO0/]4/n0*h[e8,$<p7nBddp[SZn:oJ#W7&1G,m$DL"Srf7U11KWIF>`L6g6Ah;Z#*Fu0"j%._X4j>G_66?\R
%dL.JW<)N/9$KL@97X3fGouFeJ??YYoQUpaR;'QN?J:AO4eP!!.^cI27C9g!Yf)hR(\?s=/N<OBZ0CAhFiD^9.W^?D,Fuf11+HWWa
%RUsI[AR]P5"$,'<:r,>G(kHK1&p&'M"5@pk*4>pn4bR'tcV]Xe'om+WSi$\k/s+\lS[XUH:EbZ6S3r*u9o:'RSRo4EQ$!0X<7Ysn
%Q.mMd,m?lKR")HBFA2r0J;>ObJTl4[pa+%/?m8i(8_"ZW6P)<i:luIj7FJSlYGgo?[V@s"Z/K`O,7t5Y^U,>"&Q*nZWfdO!VdO)b
%&VnGZ1Pu:,>R1Y%<3\"%")X\8HkYeWMt3\=#RLa"e(q4ZZk-&P0#akn;A9LHZF$P#:pIr:iJUFgeHV9Xf%E;m'n$:Lb(iAH70Ss.
%;X"/Hm;#l`99/B4!r[o.BNa?WGM]0nU]J@82T@Z3%8FC\$rfke9A'$sqjqjQ1*`E;OTfW<dp7+]\R-5:OV*un-TL\^V%-+keCX3[
%oG/R-_j1_!HP6@),9e%]kS"d[/g[)1i4,]!5^J\d0`c=gV14#?rp,c_.ESM=#hd?/LbdXUT1Ce9LL7+(!AoF]EmLDsm/\+cT4s-F
%NN>LsRZU"s0CNT_L^i\$ls@bA#8[.s;0o@t;-=Y]-"H2ok(h(*Gi6#.JCn5U?;]8^BLYLoD=RriRT)5*$hC!b#n9+@1V4^6bq\+Y
%G\^SDgPIf9f$.4jdstOBVDWn!b*(]DF+`c[^^=s,XsTG@2jd@U7;#3:l#M?4.$!#4#U6c@d'[IYWC$sMk?^,DO6NbqEI4#I,R$&^
%r?P?hnQXj0#1j8h>1'A(+<9*fj*2>ACc,ut>oT$5X_tUFCKpBo[S+;<(S+p#"@s5oCHR!Q4D;HW%V]+SDB&+mnf88hWEj;<cf`o:
%EmhF7[//N.Zu3pBL\X2QK=Zjk44Cdgd;NgM\eo2nX+aLZ2*kU3XUUi>#:%lU<KJ6Pnj,^B[B41jlidpuQg&?V7^5ZE09%BFng0O.
%PJQ\I)=!.JMZ_hT*8IcS['@8'?Yu7>ZjUX^L;4epY]sTX7_[n4LCl,\lLVCp6a%39Y\$d$9X42cFU?Gsh[O7Q53-Viq'#^Eg+Nn>
%%`-T3kVk&P?1,[0lfE^LooG]eRO64O=`\:;4[.u%CU@^9nt=S+?!c*Nk)SrJCfHkN6ee:0G6Y2i-TH[u6t'#^jX9&M\KB*B10mGM
%Z!:%9h"236dT2>N3I7mR9D8,+\g8K0*t0/u7<\<hTlf>q?;>V^mOl-3h<+^]o$=$/#d:ZUO$ZOogu[gJH0>hOJ>e#GI)QOGW+@Tn
%`tfW9]CF#J/Qd9=TZ8mbjFVTbiZ8f'RN&`R,LlBuAXe#``DheC`*fY#^;_%U+h9pJVakZ2Pd)CMlW+14KRuasaQX0X,;Lcq)DSC*
%B$.1u!9L%2-fmKn%;6#`EJK]e&H'to++';_[#Faai7hc,Sj!LqnU21#H^)f2]^(C80j:+WU1;Q2@?mapFpH+[Q-@rt%fo!P5<*I;
%1o?oe]+V2!5.<-SLb#q"9062Kf87'X!0'rU\,-O"%]f&=.[p)\=j@7fI$It**XX5%l%T[DL6IKV,g54N1N3.ZCPEl?e=+J5dos)+
%qd[f!*0/dZ*lee&@^[BBL?S+CQbD+5V44jZI4i^Pgsj54/m%8kLMkQo[Ke]CdVR><a-*CpVV1[Y1+B66-O1SJ[0IJp.4.,C(CuY^
%e1LnIV.)]o[\!\aCgIW5e9iO*kF9N-D(%=_O9etrSI_KAW8?bZ-ll%3E6ghM:H0u"V$CPA(snI\X@sb*^.>XBPQq_T.IPB.8:k*4
%KPQ>W:f"./]SU/?.*TTp7$0<Gl[T4ai;Q\q9f"V%P2\6lFK.mf\j?G7juVCI%"jrCAT,j@ZpIWCMfD9M,\J/N9AX+Q8=/&1.WB4>
%GXg*I`0@%#NpKJ3XqXd*L(l^%W@[SD/(siko$)!#fo!;g:T-rK)ql\Q3NpU1@&$Zn_LU-)&.nX\126E,e:R><CjY**HmM]>M469B
%p:3Ip]3+ka$.1DYR&@`8iJF9m*@QgREqO6_5b+C5N;%Y1VN?_f>'kRi,cAu=Rf5MN[uWdU<1XCX`%.<S"bn*_c<EmNFabo#r#Oeq
%H#5JNQRF9E!Kk;eY=BXulK!eTDBjuD-p)rnkdrEQDdZEU#6QdXP^Vo!-77T6$<3.ODS0XRMS8D$b]2dD+?+jJY;e/5:!B;oAG,\t
%<g3efgb9RU2=LV32R8tVNGbc5h&!\&jX`Y=moR8&#>d[]Sii\IH9]/FBEPS<[isBPf]qj8<2BtYqr=(a`gV<EZl+&-<gio>,]:u&
%Qk!,c=rNa-,B6$Y[I%-u&Rt;T7\E)r*KVF!A[XJsc02W1R<d^XFNW5N:Fa.`QYCW$ptZ7QDA4r58iFeX:f[!"B#s<'hKW/OXD\bZ
%L.aQMSlFEV4J@n*BR3t^1,HlXFu]PV=o^?rajM0.-L3Fo"2jX[be[ZqR5?:\])9EFE(3_rW5r4pKFU!F6&rGND4H]72$*)P@C!fF
%J6&r,#@6XqrTUacp*pD=2\=DCADCb&,c9PV4N/uhHBf^eZcM8;o((_'mYQY1W+5Z)R*.VE2!qgAeBG>2%&bIT%%HhuS`[c9f84Zf
%m[8V[S&9?X.=5WlWT1oU7gfO>aWIsj6Z-#>oP%nK!KgH$>>Bs$=PE;OAVC!o_-5mLH<o"Bb^/_M!M]+&QU(cYZ<AQCI06$#T,a&O
%6J[fU\EL/j/Ke8h;=*<eRpj"r3Z*Qc+@HP(&JV?SoaN*@U9Bi[GP.8![]2WZ`-r?Q;N&uJXO?'D>\X<2EfKrqT>ne/[[!pO[2K<s
%W'ZmJVQ^M&cX!;X_rPL^0)^RIEEurC"Q3\=s-ca9h,'QhRWSY:l"S`fl;RNONbZiA@T:#m"!DK:+!q+p/Xj)jehjRWgD4Mj!?J$F
%@7KQ-g,SFKV;bf,m3)+oOplXjR.*2@hP+T#9c?qHh#,"kY'C.+D3o.)-N,6TD<$68a",qn`YAP.F32T79*sJOg<OK]BQYn-[P$O0
%ZCKmXHo4,oh!5qL1s>(TeW<-Omku_dP`Zr1?XJF2I2*6R/_?mEpsT.f8*'hhD-NUKd`UcND!bN"a4BeBTBsZ2*LT'+QH-=Ef(+am
%%#k27SuTu]g(W2RYs%UdiK]`%F*M^+1f*V;LTn%!E#BggT%om5@u9BSaku'.,$J[)]OA@N#V'FDG>eu'5*"F*LZcj_`gMl0Y!sGT
%NJ7pKboL!^[kTJaOD?l=ctDLP0(0fQT;qj'\bVU8l5$YaJMu#h,t&1j(F5:#&RKG2@@5B>3!=u0-$LU,'cXH_`i_2K6_N$mW`TSS
%<']a](#n<.%J%T@:#k;:!F!Bt>Pf+d3:7l#o/'OM7oHd0cCohV(d]OJH0!VjpZN2tP!:lCWjN=K<>Adi@)[k`9jW`oE@j)Onoe=k
%$4^a*R'j\Bes"LhU%[=aKsOr5RG4ZBSa3&ijX[2U.pTJT(&VPUWgdjB&TFYih9E?oJ:YG(`Uql+!;%`,90bbVag(Om+@o5u[Em6t
%:7f=?8:YMbpM4W.2CIGUNlkSA"4^=dq%V33[8&C<K*N[dNa<'Z/$96&Qf2+jk;T;oF/qdnBMZG*6LC0ZIB>Z/QW(=?rc6i'Knpf,
%2C86UbMXq,EEf=(=`+o8*pC%Rb>$dsdJ_bIG.Q#lm6gp=s*'0/"fZ!@0.8(^2"cT^B\22d+OQ5M,'a>8%"%]4L9J0f[!C`=6WIE7
%=6VMS,9ME9&CTMRTRL[?'.C3_M6]-Pjig3r"X%u:"!hbDdT=`"Y#Y;'81jASUlT$gf$^qa<Cs-+O#9PPW]=Tl'jEp'&V842Wj\@0
%a[PFbR*&*1T^Y&=1(8Cu\Ms1%3,fOmZomm=;up*YZEcFm[&2j^*5fdRrP(V.GNn=CKA-:'X<ulPg\8!lT--#?,0+"ecN'^#OseT4
%<@$Ep;L!5NJq#jKBb=MO1f*L6^.rdKJ=Veugk#A.'rHMk[nb"k-<0]>J?)2/lc8b&A8gOaTI]=a.UXH"-T<__(R:`qeV492X^T!G
%Ff(.[di*'J.l]G4NX4jrQE"`,.]A1ZP8qq7Jj5q=P3go92oL;mm:nm&J&ol9,,5E@:X8V5?<VJ2-PTScO;0M0rP2bIa:cc!c+L3%
%[#<Jn,udB&-VC,A*`,,eUFFX]Sd=lASkutDpRu"eK@!68_G4cf_'L7(FX$0j@[F)(ABpKI`IV'ZC+r'k!\,Z':"7\?5J^#,!DY$g
%SHDLL6CuTRV9LrTJ[8WtBLuZ]J%_Vb53#+'I1jBW>Dq;lCBeBJ*nq^gRYetr[8g/"BetL0$`^)0)GIrRVH-TY]2I],;Br#)Zm8Td
%O9`@>R/RiBHbCY('H%V7H3SecWObgQ<2Y\*9"CkGTT-DJF#&U+LFE&7n0-#`b=qHmHC()F,!$Ml?TPgX6u^E>)K%Q<(<llIbtR_2
%p-5hE9BNu]hFbZh_IcR^F^$%l?K>Qp,=ONZXbR7V6R.u(:P^%V:)1Q)`mAngM6\^+cnh2%J1u?9,L/%/]emO3(5EZ,PK')0j4L)j
%3!X]:FKKbl\\_8L;gFj0JC&p$9KhapPaU@5fGk&UmeeNXA8M&),M&*'kVNg1^/!2-b##E)Q*%+QVdPnm+moU_$sT^mCAs5KFmKF9
%2`,R]jN]@29o"+,A75-BQPoKe"FJBW`3r3T_iBb\1J=.T<6Uo@kqe&n_LP1"CXYYqI"='4YG@,\-6ubs/l#)YUGQ1]mL8pTFP<Y#
%a]p&3R;n`TF9Rm%SS**5VH('3M,K#iKglMEnK`!k"ne+S;Lg<S0(bi#khDuKUJ&j$e70rfa@65YBJ#$o\F7);HT8X[ScU-@o'S56
%7^h^sHVOSkXLDOmmsmAdrE>mYSR:iajuoA\(l.Xk4]c\HeZB*RVOq^@1LQeQ1eHV!Os3B=22W\CD%ejcec0MS3/TcOT*>s^9A#]g
%L37aiY&/SW[1;9@9_6\gd\OX2P5fZora?O@@=c5+YcgZ(8FXoG]<5;oX6,.`=i(`K@r#>_#*3?T.YmPqm>bs*#<omSR?Z$V95>*5
%0>Ih2Q28u2?e&NPW0[IcBZj!")B$5FXh*Y9D!bPXadr^aJJlj>TqeqAeaeIgm#,c1Su0]Gg66f-@;F:Qnl;!KP>(rEi<!b#TV60g
%'\l-#^[`JhWT98,rG$VM+u&m.][XcDVu'D3Aasp7/ckNoiK6_,@J40Sj[)=a<<!haD.quYp+g[2#:qb\eoKS:opHbII*@UUbjuqQ
%=Y%`$T@(Nkr(8RtO"*W,)SmGCJ0@Yr+tH1jO@:sKXe?g3]M?sD,]_1Ue>,>:lubl(-q%<*8$PX\ctq?iLB)3G9XUk3,!GGZ/Or__
%+o(an%TV9i6GA]/'W_:Upd*Mh6Uu@4ij%c&*Ss(6YO%Q\FTfJ\%C,KfhKR\JC'4Em4o!%OpbmXHFM'ImA0%BAn=HO>jr_&!(Np!:
%=QV;m/Hh$4)RHW\#)k]:a7bMr.0b4f=BcT'VEBC:`;qC?C8--<NS(9!=3A96#N0`TmO/K.Tj?LXFEcmHk&`l/RF8UY'?l*ID3a5#
%@)AjO3]]?m=n9no/)'T5q+c:27OMutkiIfkH,"a8D'5Qo[k12LU!/LCMVBULLN8lfj`t_g\,=]l%Gd.0/Z63Rh`gV4I^s=&7Og;A
%2\.;J1=d@)W,jnWa'>S\WDL/o2Tq(Z9jm&E:2Mfm'Y2X\ZjbTn2.EKH%d;pJ"r8pZ^YPQ`K]W`7@T7TC034n0h`cGDdm_6AV>3?b
%oh#,H*JHB0etsX,YSs0)b%(2f%<o)Z(6s?fV<I9noZ_eH`Y=6>25"]ScV4aM)p,*@`(Q6"=cVCqecCML_eptI-(jb-[i4QH[(XuG
%+:@m`(I5EcLeieQGXAkcj@?SUia9/NOtpRTo;V(@%cf@+`Eu`Lch#t7T[.O1mP,ROB.EC\g&>_P2GWO,++C_S%X77+(h1j,BPTWN
%U8f_J'H!RdE^KY5UZb4Q'B_aT#>3C)895s%__Cc_0)C.)j;CAsF%D&#/Q.[nhXaJ4UYA!(r`N<CG*)XcQ6C6?*i0_PPWYJ[GtL7e
%>Oi_=OrlaZgS,cr'Qo4\FCWeUU;od"Eep:qXR0<c*0oh$r>n!9I2LrdqB-.^I1Vd(rd2c$M&qrNMP?m0&!Wf<&G$*lkYWDIm%$N9
%&$!W:>P=8&[tdd-W@L`kK,^Z5j&]Q4^-rRt(";7eqJ">V&3Zt'R'"(kIm?[!!Hlf]FsDm9O1k+Rkja,UqH0K47qh@#8T\,mIYs_L
%;@_*0Tl\nB0b1K"_Jn05M7Muf([[^YDf7#9((/3u>Cth=W!"q.5TmkiL/hK[!kR!kE.b@tDDWu4iPkLootfsCqo:8\h">,DbhMu1
%rFA3p3\ZqK?O(6i:>CEd]A05G5Q)(f%6lI8H!9oi]mt:&#JT1jU$uWD.HB/QYPPsFe[=4m=",VNgt5S(Ln&ju"<^j@.W?6[i4=^'
%>rlN62I#UPU)b@kM>\PBQ)\?:S2nCNDRD+R5JgQ2d:MAcWRGT#n@YK#G[QO,#^EEIECtd9a+5=:Es1k$loK\7-or<[<?"EhOKdo$
%#M.m^%t4;4Z5XcVr^aoEGAe\q8,>86c0#bD=or5ee%$VBId#gggYFlK.j'-8`g2ZM:q"2D1?(7:H@PcdP3:o/TY08JFHlD%?.@>U
%OsTDH`3b#Mq>jasYsghOpcD#d19kVbZ6h7"2<3#[2)*h&7TUs\Q3tL#f"uA6qf\6D@4r`1gVG"Kge.-W@=&*i-uAJOoGiREQS0RP
%),<t,3/#Pm8EUM3`3uo%a<&3)'%k'-@bT90:7Q7^#-SoRT;&hSki.>bm\9u+UXd5gJR7>jJQ6mu(H8kH8TVB%Lc+HE<Cm`\(rj,9
%n"4a1!T2nN]9U,7ET<*+9)HWTca9O^JKX=`DJA];.0XGGH![T8_T#ec._Tt5j41J'Os*#OBBP&Smp0\BId#h"KtYM!&G@%B/aOdZ
%/aVqZGm_0WV9!b1)4H"Hqu3]8NNc#kE%`Wc\fcUC\Fpp#>,D/f\=>-eYC$/+_QrdLC]7cNp>>"._XlocQ"E8/_Of/J6DnbsRC)Qc
%FheS0b,G@J$:NF[,A"]O=\k8UXlg^Des<sMh+!0)p"/_G3+W8u`4$97pKY-u+Fd7ha[Y-A5%pW\3FUO"#Fb"K_sZr+)j%<&,(MZl
%?Z@6h9j!t=XMQ'5PrWt+#3Mfa@P-i!G\sqVq=);BFL9f*ANq\1AA%)HaWC.UrVNb6b!r2Y+S,u&>2o)$)`[RNj<&0h3h"RY/icMe
%"(`2C-9[^O^Cod3Rm$Lk_+GLDVj3;R.?Xk16j'ER>mQpBZ<Ikn`OM^ir,@W:mWS?1#8tRReqd^*K'1M=oFF9!8`6KW`-T^Nok(#%
%M/qM;OuoVi=?*SiO%r?INAo8J`r[!=Sh/9aa4YT-'Q'Ht=gk'g1NljsIJg=3*?drp>P5,Z2p#RA?M1m&ni33q'lh?6-qZ[r/pZ;K
%Z?"(I\SSWm8075$,T;k/5!n_I"H'Cr>(2YtqOY%B8GM-^]I!A:b!G`*)GBikOs^+qAc!hPE`p9B+oI<PiM11sC4)B;EThTAGVA$B
%jBX'tnBk9Zc7%pVn0+;@;><8&./ioa\b&CV5'U0:gS74%j.MXIZ!7&e;.U-<-2e9Akm,_7ceFF!V9e=joHo"!@(M![nIalC,/qY5
%<p*ET*0muTY-D3:hh)nZ^P/q'*s?;`s'E'NZ=dlN:19]dm"]g0c8?o@@JrJPSOiG5>'6KR?/'RZCLBEFHF_oaXAp@Tmlr3[cR<RA
%<q!AB4cWiGh[t$*jO$N(DPsZO`Bfd>iIP^+@:$t=JZnhiS`7cuG@2BEEkeC-L=,e82a^dJXTlZ"^[GCg'm-3j;\8R-9a;%gP1MFS
%UO4cdA#l/7ZDO$<>^>F;)Z&j=qn>;iesPgu[0MWRn+a>AL2fJqL:20_R%:1:n%M/R76lL\_OKpIqquo&5rt?7Yf6_O["b1+3IADO
%/0eJtQc0:J;/k1s^3d_h$PUk,Xp@0f('^=R(fOkdM,*ECfrP^&ejLtdmDJ[Ho.S5MSZPZ_IR4`t&BK&f^B9?`bT^ZQcNS0`<-XS1
%02brPCZ)Z4n+ro$?na2aMt+9qA(fNc]mn^)j!]HF8;t9&`"$mKm_2&Q6pS62ig]<IqqumP0oc(bC`%uRPhUuRJ-8Uud$MR[<Fs0L
%1"n.0aAT:c:;gVmSV4NZl6(&?H0U>QggFlXnc6L"md)dhXh'=n^O>m[Vq>5!MsKA'-6bW#itZ/5-m%oG(\05/k-jhl02<]L<`2!T
%mDJh84d\('X:+Rm[0KptFSrS,`aS@YOE8>MFH(1J6]f5UUX6lIm4nLrIK(D]mJh@G*>HuIi8a!*d)BPXYWOhJ/='a]CeXOY9KK,g
%BVOXK<=KrX"\&Uc9bJWBkDn!J6:/3dQ-J6l;)/R+C&,-sn?"+\"NqsHel^q>TWbBQB#<Uu'<A9DPh,4['V?=@J&0(_@$oOnfL;;)
%kM!trM)OF7oq%!#)3?KnNe/]#L(OSd-qHi]i.N9fEPQY9U>6]<"4iZ3s8>1^qH!jB%c#=o$,ggGNN#s&e'Z)D`((pSB6j+3a,e]k
%'g'M_38GU%1>$XC@MM@[?(alP,S^bI,s,<ITX+^2&!I!pA"OI[]PoIddE1>&dFnThS$9/@o7n`Z!f(g-]uAn#TAQC-jVQRuXI[+=
%KU[4ZdS8RL]H<SgUZ:>#g[-#4pa)4\X>_'UNp_/eNWc(t4Q*fq%0m,`.tjdUb._UF<(:rDWgLpO/[a_TfMl[#CH4X=L3TQRR*[80
%JZA(8Z"jT]"Ge$hD@Zl&N5iW]HK73Gp,p._"t*q@$[pC)"Fpp2+B;ac7':2_!h(Rh7('j%>=2Z/1K5;C6-)U*jN'4@0VWS'FD(b\
%%<sE-p0:eR"IRN&:olc$XT2Qeb[eV?1A7uFW7Ul!2j2&&b%k.0b*QP[hN=5d0N\>*E*e=%o"qQBd&8=V_:B<m><sL2krF^5Y9kXT
%`<brB.[jEpZaA]<)p+;R(<)ffLVh*.K[a8R\7:SnNFY/%A-0B40(%;N`!f"+B$N(mK@T+Fri660"-7Y@WN+S5"/3@]-!lMr;/Z&:
%W$hfdl]N[=Gq2=`_+j&BGAQMI4sEh3EHk;*!^GurDV&"2gHh-[FtsN='2mp"qQ;6NJXb-VGlMqp^D(ILEiD+``,:[g;>E5cET<k]
%;Co6(g^[Xu'"k'8ABJP^FXEnH'Ami73iZO/'8*Il\Jc,t3g:-r&9b,-`0f\s>YI<I@f,A*?@5Pjk>>eCg)[L<Au1)U$B7@X4b'Mn
%Cl:$mG+?W@7A3X&Td1p9T.q81]ToDJd9?t4&+INi-%qmU([$\hB.=k"ojUA?89J@udUuC<f#OSPC4-<`1H(9q'jYT.qOgh>AHa59
%)aM5mP5MIFEUI,;/c[)Zh%unTEV1[$N(-cJ2d%r)hs]q%(Y\QSl1`MCJ`[*HMq*BbkU-K*F>Pq,[TBi.@bjS1[b%695ZX=;6FrGf
%Ba7_)Vc94$-5c)rC5AKJ[%d'pl;8F-<..+G./'Z!d2Z>]q)@pP,+21Z\*38<QB@1!J[3ejMd/O(ReE!*`Wj37\Zt2>20<q37;Y$L
%8r]\hfmIP>h522'iHl:E^i1DP!QBufNI]Atj3iOuV@_!e=A[BtlBYGnC4K3$eA//R`We"Rk;:UCPR%Q<c8?RoRN`J?2m+N)6#]Cd
%Mam@iFZPPjM5g1P4ZoNWaA[b=J[L&oR[nk?CNgf^raeS,,I>@QV8PTm7>8kT@C7A#A5E;o6Gd[.(9(._&4'f@OYUD3chA>(F^l@d
%13_b#\?rNEC/[Io7bO5i,iX>F?AfOe7r<dlIYic6>t`>%8h0Fc4INQb"3jI[j^W3[k0_!k.^I!+2PO/K$k;f5\B=<n%#W'U<!Abt
%>jjB=l*?!J>8:];i5.X!l'8G!3HCeGK;E<3\l@_8or_D^FsBX/el48\9kt\**]Z#K$A43k,f%I;0q\u.;H5P<B&u'PLt_Jj4.s`.
%$6BmAc_5-<7?i*(]9;'CrJ-(.09F!saoVV=2CtF!U-S6XSL_o&Qc4>PQP_,2OH]o%9D$6;fs&AV7ADX/HZjT$6_>F,5"d`X*d;(S
%8!Uq*)$3c"QQIDO]>RAMrTTgW851".?!uPHlH>&7kd2-#rMUXLOF;e7.;SG]C/_haZBmgKCoXG5][/bnEBj%$)=D!((>IY=l^5.q
%\sT@:p(B.j4+T9d0%TKr5u+<.Jc>sPZK\*,Il`rI+f?^Q^ba3u1$Q;\la?GB#<Tj^R57Vcn]I1qlp)H-[,,a[%%!$WJ!+p:dC,hc
%!6TPM[LgTKZ(A0I);FaKod&q:>>JNC9R%\WNObl4eYB;JG(g(-DaO)nZ*2-K<16YE&Q0LI-+iad,\Fi%H("qK,cLmQZ-?fXcWiX^
%UM*,iN$?@E9e?%J45%'XB5e<T`eH6hi(Y*6S+"?-!ub/k5tGYos#B<nfGt;S,DZ"0D9lLEQVMLc>45oH`R>l6C_$B6:.Z=cOi,3(
%>S)0Z*cbV&de'2$:TmH'J6.fIKIjU*e&HV(oc4JnYEI+Wdg'AG<6Zs1!t5R16*_#7M[eR=$8PB&0II;cS1;,D$lLIP$9r1EX3=4O
%'n+))^<&Wl[;7fZ+GBe<l2XluA4lE9Xt1=6jYZ'd\42P`]uV<nodY3J'lLfD\rP'JTc]eP.J'bjC<ot';u)8poqJ3]p=t0%A9iYp
%[g#U%gR3P<9/b=<j%SYb*474ud:J6p&4FO3YLuJRi9YE7f<QFt)eG<8%Y8O;,ajUKl9ra1?;_4`P"[N3a;;Bmb+$>Ge>he?-Qc";
%q`pdLB`AgZ*JhHpg7V*2IeW=+Qf"tuOhWE>B8\HUP4rSjEK0q]5dBt;R/T$8S2_a@5D%,oH'B&Q-m&8`7.gF>bT%>@KY)*B+8aU4
%2GpQ^SNJi[2hm%m7J9XrKM0q_/TcK\]%[HsX4&Wr1c^P:(]rtU%Mq^)na#cXC(-:)`*mo1hJ*c!&!:*p&a/T:D(*'D7b=-ugTBr!
%c]&%3?Z?$aIE'"WpYYjjle%\M?)CeT^K/<JZY.guRbEA\9f'<F2g](GGK_QW(=6o.=_3Q334*D^9XjhRFh,uB\fH5I3lZ]GjDeDf
%]XD!'jhFo<,BNVuCB+-,&t`94Qq2m[r,9^sPb)/L8\YQ-S'2t?YKY]D53[-b(MKL2\U;`!YbcH9"_17jR\Doq?=BFR@j2*rWaJcL
%4E^3OI7@nqKM.]\f!/qB]``3b5H^sHkT^lp+h7QHb\D-F+jt!'Nub`#!&2"F[^iX!G<6qfc34l[Cfa)$"^&Y;o'fOWU=.+Fat\Hg
%<0M]2F,@0q<]SQ`;8F*hj7B;G-0qN(M`*&%n]aFjX&qbFGKi3-5b@E[WL"8V&ULgGTqQe73k@1],ikfHA#n0\Ch`Cr[s@oJV[*"Q
%Iq\lQLHk`uf+7oYa.GSGIXp>RV]Yp5j+$n#LO]3pj3PL>eK=h^_uKZ)dgps)e"?[:_d@okpZJ/4rUK%ms74c+s8:oT^\mDirtc5O
%ZnD-uDuT5Js7t9]qEK!ZK9c~>
%AI9_PrivateDataEnd
